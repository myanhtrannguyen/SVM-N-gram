{
    "solution_id": "llama3.1-8b-932",
    "problem_id": "p00770",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAX 1000000\n\nint is_prime(int n) {\n    if (n <= 1) return 0;\n    if (n <= 3) return 1;\n    if (n % 2 == 0 || n % 3 == 0) return 0;\n    for (int i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n            return 0;\n    return 1;\n}\n\nint get_prime_caves(int m, int n) {\n    int prime_caves[MAX][3];\n    int count = 0;\n    int i, j, k;\n\n    for (i = 0; i < m; i++) {\n        for (j = 0; j < 3; j++) {\n            int x = i;\n            int y = j;\n            int num = 0;\n\n            if (i == 0) {\n                x = 1;\n                y = 0;\n            } else if (i % 2 == 0) {\n                x = i / 2;\n                y = 1;\n            } else {\n                x = (i - 1) / 2;\n                y = 0;\n            }\n\n            num = (x * x + y * y) + (i - x) * 3 + j;\n\n            if (num >= m) break;\n\n            if (is_prime(num)) {\n                prime_caves[count][0] = num;\n                prime_caves[count][1] = x;\n                prime_caves[count][2] = y;\n                count++;\n            }\n        }\n    }\n\n    int visited[MAX][MAX];\n    int queue[MAX][2];\n    int front = 0;\n    int rear = 0;\n    int max_count = 0;\n    int max_num = 0;\n    int x, y, num;\n\n    visited[n][0] = 1;\n    queue[rear][0] = n;\n    queue[rear][1] = 0;\n    rear++;\n\n    while (front < rear) {\n        x = queue[front][0];\n        y = queue[front][1];\n        front++;\n\n        for (i = 0; i < 3; i++) {\n            int new_x = x + prime_caves[y][i * 2];\n            int new_y = prime_caves[y][i * 2 + 1];\n\n            if (new_x >= 0 && new_x < m && new_y >= 0 && new_y < 3 && !visited[new_x][new_y]) {\n                visited[new_x][new_y] = 1;\n                queue[rear][0] = new_x;\n                queue[rear][1] = new_y;\n                rear++;\n\n                if (is_prime(new_x)) {\n                    if (max_count < rear - front) {\n                        max_count = rear - front;\n                        max_num = new_x;\n                    }\n                }\n            }\n        }\n    }\n\n    if (max_count == 0) return 0;\n    printf(\"%d %d\\n\", max_count, max_num);\n    return 0;\n}\n\nint main() {\n    int m, n;\n\n    while (scanf(\"%d %d\", &m, &n) == 2) {\n        if (m == 0 && n == 0) break;\n        get_prime_caves(m, n);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}