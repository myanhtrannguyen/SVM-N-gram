{
    "solution_id": "llama3.1-8b-826",
    "problem_id": "p00743",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class City {\n        int index;\n        double distance;\n        double time;\n\n        public City(int index, double distance, double time) {\n            this.index = index;\n            this.distance = distance;\n            this.time = time;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = br.readLine()) != null) {\n            if (line.equals(\"0 0\")) break;\n            String[] parts = line.split(\" \");\n            int n = Integer.parseInt(parts[0]);\n            int m = Integer.parseInt(parts[1]);\n            int s = Integer.parseInt(parts[2]);\n            int g = Integer.parseInt(parts[3]);\n\n            List<City>[] cities = new List[n + 1];\n            for (int i = 0; i <= n; i++) {\n                cities[i] = new ArrayList<>();\n            }\n\n            for (int i = 0; i < m; i++) {\n                parts = br.readLine().split(\" \");\n                int x = Integer.parseInt(parts[0]);\n                int y = Integer.parseInt(parts[1]);\n                int d = Integer.parseInt(parts[2]);\n                int c = Integer.parseInt(parts[3]);\n                cities[x].add(new City(y, d, (double) d / c));\n                cities[y].add(new City(x, d, (double) d / c));\n            }\n\n            double[] minTime = new double[n + 1];\n            Arrays.fill(minTime, Double.POSITIVE_INFINITY);\n            minTime[s] = 0;\n\n            PriorityQueue<City> queue = new PriorityQueue<>((a, b) -> Double.compare(a.time, b.time));\n            queue.add(new City(s, 0, 0));\n\n            while (!queue.isEmpty()) {\n                City city = queue.poll();\n                if (city.index == g) {\n                    System.out.printf(\"%.5f%n\", city.time);\n                    break;\n                }\n                if (city.time > minTime[city.index]) continue;\n                for (City next : cities[city.index]) {\n                    if (next.index == city.index) continue;\n                    double time = city.time + next.time;\n                    if (time < minTime[next.index]) {\n                        minTime[next.index] = time;\n                        queue.add(new City(next.index, time, time));\n                    }\n                }\n            }\n            if (Double.isInfinite(minTime[g])) System.out.println(\"unreachable\");\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}