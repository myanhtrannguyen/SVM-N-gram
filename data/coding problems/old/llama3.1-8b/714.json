{
    "solution_id": "llama3.1-8b-714",
    "problem_id": "p00715",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Street {\n        String name;\n        boolean isNorthSouth;\n\n        public Street(String name, boolean isNorthSouth) {\n            this.name = name;\n            this.isNorthSouth = isNorthSouth;\n        }\n    }\n\n    static class Crossing {\n        String street1;\n        String street2;\n        boolean isNorthSouth;\n\n        public Crossing(String street1, String street2, boolean isNorthSouth) {\n            this.street1 = street1;\n            this.street2 = street2;\n            this.isNorthSouth = isNorthSouth;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = 1;\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            List<Street> streets = new ArrayList<>();\n            List<Street> northSouthStreets = new ArrayList<>();\n            List<Street> eastWestStreets = new ArrayList<>();\n            Map<String, Street> streetMap = new HashMap<>();\n            for (int i = 0; i < n; i++) {\n                String[] parts = br.readLine().split(\"-\");\n                String street1 = parts[0];\n                String street2 = parts[1];\n                boolean isNorthSouth = street1.charAt(0) == 'N' || street1.charAt(0) == 'S';\n                streets.add(new Street(street1, isNorthSouth));\n                streets.add(new Street(street2, isNorthSouth));\n                if (isNorthSouth) {\n                    northSouthStreets.add(new Street(street1, isNorthSouth));\n                    northSouthStreets.add(new Street(street2, isNorthSouth));\n                } else {\n                    eastWestStreets.add(new Street(street1, isNorthSouth));\n                    eastWestStreets.add(new Street(street2, isNorthSouth));\n                }\n                streetMap.put(street1, new Street(street1, isNorthSouth));\n                streetMap.put(street2, new Street(street2, isNorthSouth));\n            }\n            int m = Integer.parseInt(br.readLine());\n            List<String> questions = new ArrayList<>();\n            for (int i = 0; i < m; i++) {\n                questions.add(br.readLine());\n            }\n            br.readLine();\n            Map<String, Integer> streetIndexMap = new HashMap<>();\n            for (int i = 0; i < streets.size(); i++) {\n                streetIndexMap.put(streets.get(i).name, i);\n            }\n            List<String> answers = new ArrayList<>();\n            for (String question : questions) {\n                String[] parts = question.split(\"-\");\n                String street1 = parts[0];\n                String street2 = parts[1];\n                boolean isNorthSouth = street1.charAt(0) == 'N' || street1.charAt(0) == 'S';\n                if (isNorthSouth) {\n                    if (streetMap.get(street1).isNorthSouth && streetMap.get(street2).isNorthSouth) {\n                        if (canInfer(streetIndexMap, streetMap, northSouthStreets, street1, street2)) {\n                            answers.add(\"YES\");\n                        } else {\n                            answers.add(\"NO\");\n                        }\n                    } else {\n                        answers.add(\"NO\");\n                    }\n                } else {\n                    if (streetMap.get(street1).isNorthSouth && streetMap.get(street2).isNorthSouth) {\n                        answers.add(\"NO\");\n                    } else {\n                        if (canInfer(streetIndexMap, streetMap, eastWestStreets, street1, street2)) {\n                            answers.add(\"YES\");\n                        } else {\n                            answers.add(\"NO\");\n                        }\n                    }\n                }\n            }\n            System.out.println(northSouthStreets.size());\n            for (String answer : answers) {\n                System.out.println(answer);\n            }\n        }\n    }\n\n    static boolean canInfer(Map<String, Integer> streetIndexMap, Map<String, Street> streetMap, List<Street> streets, String street1, String street2) {\n        int index1 = streetIndexMap.get(street1);\n        int index2 = streetIndexMap.get(street2);\n        if (index1 > index2) {\n            int temp = index1;\n            index1 = index2;\n            index2 = temp;\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n            if (streets.get(i).isNorthSouth == streetMap.get(street1).isNorthSouth) {\n                return true;\n            }\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n            if (streets.get(i).isNorthSouth == streetMap.get(street2).isNorthSouth) {\n                return true;\n            }\n        }\n        for (int i = index1 + 1; i < index2; i++) {\n            if (streets.get(i).isNorthSouth == streetMap.get(street1).isNorthSouth && streets.get(i).isNorthSouth == streetMap.get(street2).isNorthSouth) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}