{
    "solution_id": "llama3.1-8b-3351",
    "problem_id": "p01882",
    "language": "Python",
    "solution": "```python\nimport sys\nfrom collections import defaultdict\nfrom bisect import bisect_left\n\nclass Member:\n    def __init__(self, name, motivation):\n        self.name = name\n        self.motivation = motivation\n        self.working = False\n\nclass ACM:\n    def __init__(self):\n        self.members = []\n        self.workhorses = []\n        self.idle_fellows = []\n\n    def add_member(self, member):\n        self.members.append(member)\n        self.members.sort(key=lambda x: (-x.motivation, len(self.members) - self.members.index(x)))\n        if len(self.members) <= self.workhorses_threshold:\n            self.workhorses.append(member)\n        else:\n            self.idle_fellows.append(member)\n\n    def update_workhorses(self):\n        self.workhorses_threshold = int(len(self.members) * 0.2)\n        self.workhorses = self.members[:self.workhorses_threshold]\n        self.idle_fellows = self.members[self.workhorses_threshold:]\n\n    def remove_member(self, name):\n        for i, member in enumerate(self.members):\n            if member.name == name:\n                del self.members[i]\n                break\n        self.update_workhorses()\n\n    def add_event(self, event):\n        if event[0] == '+':\n            name, motivation = event[2:], int(event[3:])\n            for member in self.members:\n                if member.name == name:\n                    self.remove_member(name)\n            self.add_member(Member(name, motivation))\n        else:\n            name = event[2:]\n            self.remove_member(name)\n\n    def print_log(self):\n        for member in self.members:\n            if member.working:\n                print(f\"{member.name} is working hard now.\")\n            else:\n                print(f\"{member.name} is not working now.\")\n\ndef main():\n    N = int(sys.stdin.readline())\n    acm = ACM()\n    for _ in range(N):\n        name, motivation = sys.stdin.readline().split()\n        acm.add_member(Member(name, int(motivation)))\n\n    M = int(sys.stdin.readline())\n    for _ in range(M):\n        event = sys.stdin.readline().strip()\n        acm.add_event(event)\n\n    acm.print_log()\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}