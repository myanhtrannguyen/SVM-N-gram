{
    "solution_id": "llama3.1-8b-564",
    "problem_id": "p00655",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAXN 20000\n#define MAXQ 200000\n\ntypedef struct {\n    int n;\n    int a[MAXN + 1];\n    int b[MAXN + 1];\n} FIMO;\n\nFIMO* createFIMO() {\n    FIMO* fimo = (FIMO*)malloc(sizeof(FIMO));\n    fimo->n = 0;\n    return fimo;\n}\n\nvoid insert(FIMO* fimo, int x) {\n    fimo->a[++fimo->n] = x;\n    fimo->b[fimo->n] = x;\n}\n\nvoid deleteMid(FIMO* fimo) {\n    int n = fimo->n;\n    if (n == 0) return;\n    if (n % 2 == 0) {\n        fimo->a[n / 2] = fimo->b[n / 2 + 1];\n        fimo->b[n / 2] = fimo->b[n / 2 + 1];\n    } else {\n        fimo->a[(n + 1) / 2] = fimo->b[(n + 1) / 2];\n        fimo->b[(n + 1) / 2 - 1] = fimo->b[(n + 1) / 2];\n    }\n    fimo->n--;\n}\n\nint getMinFirstHalf(FIMO* fimo) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int mid = (n + 1) / 2;\n    int min = fimo->a[1];\n    for (int i = 2; i <= mid; i++) {\n        if (fimo->a[i] < min) min = fimo->a[i];\n    }\n    return min;\n}\n\nint getMinSecondHalf(FIMO* fimo) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int mid = (n + 1) / 2;\n    int min = fimo->a[mid + 1];\n    for (int i = mid + 2; i <= n; i++) {\n        if (fimo->a[i] < min) min = fimo->a[i];\n    }\n    return min;\n}\n\nint getIthMinFirstHalf(FIMO* fimo, int i) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int min = -1;\n    int j = 1;\n    while (j <= n && i > 0) {\n        if (fimo->a[j] < min || min == -1) {\n            min = fimo->a[j];\n            i--;\n        }\n        j++;\n    }\n    return min;\n}\n\nint getIthMinSecondHalf(FIMO* fimo, int i) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int min = -1;\n    int j = (n + 1) / 2;\n    while (j <= n && i > 0) {\n        if (fimo->a[j] < min || min == -1) {\n            min = fimo->a[j];\n            i--;\n        }\n        j++;\n    }\n    return min;\n}\n\nint getMaxFirstHalf(FIMO* fimo) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int mid = (n + 1) / 2;\n    int max = fimo->a[1];\n    for (int i = 2; i <= mid; i++) {\n        if (fimo->a[i] > max) max = fimo->a[i];\n    }\n    return max;\n}\n\nint getMaxSecondHalf(FIMO* fimo) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int mid = (n + 1) / 2;\n    int max = fimo->a[mid + 1];\n    for (int i = mid + 2; i <= n; i++) {\n        if (fimo->a[i] > max) max = fimo->a[i];\n    }\n    return max;\n}\n\nint getIthMaxFirstHalf(FIMO* fimo, int i) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int max = -1;\n    int j = 1;\n    while (j <= n && i > 0) {\n        if (fimo->a[j] > max || max == -1) {\n            max = fimo->a[j];\n            i--;\n        }\n        j++;\n    }\n    return max;\n}\n\nint getIthMaxSecondHalf(FIMO* fimo, int i) {\n    int n = fimo->n;\n    if (n == 0) return -1;\n    int max = -1;\n    int j = (n + 1) / 2;\n    while (j <= n && i > 0) {\n        if (fimo->a[j] > max || max == -1) {\n            max = fimo->a[j];\n            i--;\n        }\n        j++;\n    }\n    return max;\n}\n\nvoid solve() {\n    int q;\n    scanf(\"%d\", &q);\n    FIMO* fimo = createFIMO();\n    for (int i = 0; i < q; i++) {\n        int op;\n        scanf(\"%d\", &op);\n        if (op == 0) {\n            int x;\n            scanf(\"%d\", &x);\n            insert(fimo, x);\n        } else if (op == 1) {\n            deleteMid(fimo);\n            printf(\"%d\\n\", fimo->a[fimo->n + 1]);\n        } else if (op == 2) {\n            printf(\"%d\\n\", getMinFirstHalf(fimo));\n        } else if (op == 3) {\n            printf(\"%d\\n\", getMinSecondHalf(fimo));\n        } else if (op == 4) {\n            int i;\n            scanf(\"%d\", &i);\n            printf(\"%d\\n\", getIthMinFirstHalf(fimo, i));\n        } else if (op == 5) {\n            int i;\n            scanf(\"%d\", &i);\n            printf(\"%d\\n\", getIthMinSecondHalf(fimo, i));\n        } else if (op == 6) {\n            printf(\"%d\\n\", getMaxFirstHalf(fimo));\n        } else if (op == 7) {\n            printf(\"%d\\n\", getMaxSecondHalf(fimo));\n        } else if (op == 8) {\n            int i;\n            scanf(\"%d\", &i);\n            printf(\"%d\\n\", getIthMaxFirstHalf(fimo, i));\n        } else if (op == 9) {\n            int i;\n            scanf(\"%d\", &i);\n            printf(\"%d\\n\", getIthMaxSecondHalf(fimo, i));\n        }\n    }\n    printf(\"end\\n\");\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        solve();\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}