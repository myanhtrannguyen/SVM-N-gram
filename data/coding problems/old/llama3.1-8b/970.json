{
    "solution_id": "llama3.1-8b-970",
    "problem_id": "p00779",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Circle {\n        int x, y, r;\n\n        public Circle(int x, int y, int r) {\n            this.x = x;\n            this.y = y;\n            this.r = r;\n        }\n    }\n\n    static class Event implements Comparable<Event> {\n        int type, x, y;\n\n        public Event(int type, int x, int y) {\n            this.type = type;\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public int compareTo(Event o) {\n            if (x != o.x) return x - o.x;\n            if (y != o.y) return y - o.y;\n            return type - o.type;\n        }\n    }\n\n    static class Line {\n        int x1, y1, x2, y2;\n\n        public Line(int x1, int y1, int x2, int y2) {\n            this.x1 = x1;\n            this.y1 = y1;\n            this.x2 = x2;\n            this.y2 = y2;\n        }\n    }\n\n    static class LineSegment implements Comparable<LineSegment> {\n        int x, y, r;\n        boolean isCircle;\n\n        public LineSegment(int x, int y, int r, boolean isCircle) {\n            this.x = x;\n            this.y = y;\n            this.r = r;\n            this.isCircle = isCircle;\n        }\n\n        @Override\n        public int compareTo(LineSegment o) {\n            if (x != o.x) return x - o.x;\n            if (y != o.y) return y - o.y;\n            if (isCircle != o.isCircle) return isCircle ? -1 : 1;\n            return r - o.r;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st;\n        int T = 1;\n        while (T-- > 0) {\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int m = Integer.parseInt(st.nextToken());\n            Circle[] circles = new Circle[n];\n            for (int i = 0; i < n; i++) {\n                st = new StringTokenizer(br.readLine());\n                circles[i] = new Circle(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n            }\n            List<Line> lines = new ArrayList<>();\n            for (int i = 0; i < m; i++) {\n                st = new StringTokenizer(br.readLine());\n                int x1 = Integer.parseInt(st.nextToken());\n                int y1 = Integer.parseInt(st.nextToken());\n                int x2 = Integer.parseInt(st.nextToken());\n                int y2 = Integer.parseInt(st.nextToken());\n                lines.add(new Line(x1, y1, x2, y2));\n            }\n            List<LineSegment> lineSegments = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                lineSegments.add(new LineSegment(circles[i].x, circles[i].y, circles[i].r, true));\n            }\n            for (Line line : lines) {\n                lineSegments.add(new LineSegment(line.x1, line.y1, 0, false));\n                lineSegments.add(new LineSegment(line.x2, line.y2, 0, false));\n            }\n            lineSegments.sort(null);\n            PriorityQueue<Event> events = new PriorityQueue<>();\n            for (LineSegment lineSegment : lineSegments) {\n                if (lineSegment.isCircle) {\n                    events.add(new Event(0, lineSegment.x, lineSegment.y));\n                } else {\n                    events.add(new Event(1, lineSegment.x, lineSegment.y));\n                    events.add(new Event(2, lineSegment.x, lineSegment.y));\n                }\n            }\n            boolean[] visited = new boolean[m];\n            while (!events.isEmpty()) {\n                Event event = events.poll();\n                if (event.type == 0) {\n                    for (Line line : lines) {\n                        if (isIntersect(line.x1, line.y1, line.x2, line.y2, event.x, event.y, circles[event.x - event.y].r)) {\n                            visited[Arrays.asList(lines).indexOf(line)] = true;\n                        }\n                    }\n                } else if (event.type == 1) {\n                    for (Line line : lines) {\n                        if (isIntersect(line.x1, line.y1, line.x2, line.y2, event.x, event.y, 0)) {\n                            visited[Arrays.asList(lines).indexOf(line)] = true;\n                        }\n                    }\n                } else if (event.type == 2) {\n                    for (Line line : lines) {\n                        if (isIntersect(line.x1, line.y1, line.x2, line.y2, event.x, event.y, 0)) {\n                            visited[Arrays.asList(lines).indexOf(line)] = true;\n                        }\n                    }\n                }\n            }\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < m; i++) {\n                sb.append(visited[i] ? \"YES\" : \"NO\").append(\" \");\n            }\n            System.out.println(sb.toString().trim());\n        }\n    }\n\n    static boolean isIntersect(int x1, int y1, int x2, int y2, int x, int y, int r) {\n        if (x1 == x2) {\n            if (x1 == x) {\n                if (Math.min(y1, y2) <= y && y <= Math.max(y1, y2)) return true;\n            } else {\n                if (Math.min(y1, y2) <= y && y <= Math.max(y1, y2)) return false;\n            }\n        } else {\n            if (x == x1) {\n                if (Math.min(y1, y2) <= y && y <= Math.max(y1, y2)) return true;\n            } else if (x == x2) {\n                if (Math.min(y1, y2) <= y && y <= Math.max(y1, y2)) return true;\n            } else {\n                if (Math.min(y1, y2) <= y && y <= Math.max(y1, y2)) return false;\n            }\n        }\n        if (x1 == x) {\n            if (Math.abs(y - y1) <= r) return true;\n        } else if (x2 == x) {\n            if (Math.abs(y - y2) <= r) return true;\n        } else {\n            if (Math.abs(y - y1) <= r && Math.abs(y - y2) <= r) return true;\n        }\n        if (y1 == y) {\n            if (Math.abs(x - x1) <= r) return true;\n        } else if (y2 == y) {\n            if (Math.abs(x - x2) <= r) return true;\n        } else {\n            if (Math.abs(x - x1) <= r && Math.abs(x - x2) <= r) return true;\n        }\n        return false;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}