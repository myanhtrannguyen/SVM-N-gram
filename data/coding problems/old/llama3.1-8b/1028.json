{
    "solution_id": "llama3.1-8b-1028",
    "problem_id": "p00794",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_W 8\n#define MAX_H 8\n#define MAX_N 8\n\ntypedef struct {\n    int w, h;\n    int d[MAX_H][MAX_W];\n    int visited[MAX_H][MAX_W];\n    int dist[MAX_H][MAX_W];\n} Map;\n\nvoid init_map(Map *map) {\n    map->w = 0;\n    map->h = 0;\n    for (int i = 0; i < MAX_H; i++) {\n        for (int j = 0; j < MAX_W; j++) {\n            map->d[i][j] = 0;\n            map->visited[i][j] = 0;\n            map->dist[i][j] = -1;\n        }\n    }\n}\n\nvoid read_map(Map *map) {\n    int w, h;\n    scanf(\"%d %d\", &w, &h);\n    map->w = w;\n    map->h = h;\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            scanf(\"%d\", &map->d[i][j]);\n        }\n    }\n}\n\nint bfs(Map *map, int x, int y) {\n    int queue[MAX_N][2];\n    int front = 0, rear = 0;\n    queue[rear][0] = x;\n    queue[rear][1] = y;\n    rear++;\n    map->dist[x][y] = 0;\n    while (front < rear) {\n        int cx = queue[front][0];\n        int cy = queue[front][1];\n        front++;\n        if (map->d[cx][cy] == 3) {\n            return map->dist[cx][cy];\n        }\n        if (map->d[cx][cy] == 4) {\n            map->d[cx][cy] = 2;\n        }\n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                int nx = cx + dx;\n                int ny = cy + dy;\n                if (nx >= 0 && nx < map->h && ny >= 0 && ny < map->w && map->d[nx][ny] != 0 && map->dist[nx][ny] == -1) {\n                    queue[rear][0] = nx;\n                    queue[rear][1] = ny;\n                    rear++;\n                    map->dist[nx][ny] = map->dist[cx][cy] + 1;\n                }\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    Map map;\n    init_map(&map);\n    while (1) {\n        read_map(&map);\n        if (map.w == 0 && map.h == 0) {\n            break;\n        }\n        int ans = -1;\n        for (int i = 0; i < map.h; i++) {\n            for (int j = 0; j < map.w; j++) {\n                if (map.d[i][j] == 2) {\n                    ans = bfs(&map, i, j);\n                    if (ans != -1) {\n                        break;\n                    }\n                }\n            }\n            if (ans != -1) {\n                break;\n            }\n        }\n        printf(\"%d\\n\", ans);\n        for (int i = 0; i < map.h; i++) {\n            for (int j = 0; j < map.w; j++) {\n                map.d[i][j] = 0;\n                map.visited[i][j] = 0;\n                map.dist[i][j] = -1;\n            }\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}