{
    "solution_id": "llama3.1-8b-1320",
    "problem_id": "p00867",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAXN 1000\n#define MAXM 1000\n#define MAXD 10\n\ntypedef struct {\n    int x1, y1, x2, y2;\n} Bar;\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    int x, y;\n    int id;\n} Node;\n\ntypedef struct {\n    int x, y;\n    int id;\n    int next;\n} Edge;\n\ntypedef struct {\n    int n, m;\n    Bar bars[MAXN];\n    Point points[MAXM];\n    Node nodes[MAXM];\n    Edge edges[MAXM];\n} Graph;\n\nvoid read_graph(Graph *g) {\n    int n, i;\n    scanf(\"%d\", &n);\n    g->n = n;\n    for (i = 0; i < n; i++) {\n        scanf(\"%d %d %d %d\", &g->bars[i].x1, &g->bars[i].y1, &g->bars[i].x2, &g->bars[i].y2);\n    }\n}\n\nvoid add_point(Graph *g, int x, int y) {\n    int i;\n    for (i = 0; i < g->m; i++) {\n        if (g->points[i].x == x && g->points[i].y == y) {\n            return;\n        }\n    }\n    g->points[g->m].x = x;\n    g->points[g->m].y = y;\n    g->m++;\n}\n\nvoid add_node(Graph *g, int x, int y, int id) {\n    int i;\n    for (i = 0; i < g->m; i++) {\n        if (g->points[i].x == x && g->points[i].y == y) {\n            g->nodes[g->n].x = x;\n            g->nodes[g->n].y = y;\n            g->nodes[g->n].id = id;\n            g->n++;\n            return;\n        }\n    }\n}\n\nvoid add_edge(Graph *g, int x1, int y1, int x2, int y2, int id) {\n    int i;\n    for (i = 0; i < g->m; i++) {\n        if (g->points[i].x == x1 && g->points[i].y == y1) {\n            for (i = 0; i < g->m; i++) {\n                if (g->points[i].x == x2 && g->points[i].y == y2) {\n                    g->edges[g->n].x = x1;\n                    g->edges[g->n].y = y1;\n                    g->edges[g->n].id = id;\n                    g->edges[g->n].next = g->n + 1;\n                    g->n++;\n                    g->edges[g->n].x = x2;\n                    g->edges[g->n].y = y2;\n                    g->edges[g->n].id = id;\n                    g->edges[g->n].next = -1;\n                    g->n++;\n                    return;\n                }\n            }\n        }\n    }\n}\n\nvoid dfs(Graph *g, int u, int *cnt) {\n    int i;\n    for (i = g->edges[u].next; i != -1; i = g->edges[i].next) {\n        if (g->edges[i].id == 0) {\n            continue;\n        }\n        if (g->edges[i].id == 1) {\n            cnt[0]++;\n        } else if (g->edges[i].id == 2) {\n            cnt[1]++;\n        } else if (g->edges[i].id == 3) {\n            cnt[2]++;\n        } else if (g->edges[i].id == 4) {\n            cnt[3]++;\n        } else if (g->edges[i].id == 5) {\n            cnt[4]++;\n        } else if (g->edges[i].id == 6) {\n            cnt[5]++;\n        } else if (g->edges[i].id == 7) {\n            cnt[6]++;\n        } else if (g->edges[i].id == 8) {\n            cnt[7]++;\n        } else if (g->edges[i].id == 9) {\n            cnt[8]++;\n        } else if (g->edges[i].id == 10) {\n            cnt[9]++;\n        }\n        dfs(g, i, cnt);\n    }\n}\n\nint main() {\n    Graph g;\n    int i, j, cnt[MAXD];\n    while (scanf(\"%d\", &g.n) == 1 && g.n != 0) {\n        g.m = 0;\n        for (i = 0; i < g.n; i++) {\n            add_point(&g, g.bars[i].x1, g.bars[i].y1);\n            add_point(&g, g.bars[i].x2, g.bars[i].y2);\n        }\n        for (i = 0; i < g.n; i++) {\n            add_node(&g, g.bars[i].x1, g.bars[i].y1, 0);\n            add_node(&g, g.bars[i].x2, g.bars[i].y2, 0);\n            add_edge(&g, g.bars[i].x1, g.bars[i].y1, g.bars[i].x2, g.bars[i].y2, 0);\n        }\n        for (i = 0; i < g.m; i++) {\n            for (j = 0; j < g.m; j++) {\n                if (g.points[i].x == g.points[j].x && g.points[i].y == g.points[j].y) {\n                    continue;\n                }\n                if (g.points[i].x == g.points[j].x + 1 && g.points[i].y == g.points[j].y) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 1);\n                } else if (g.points[i].x == g.points[j].x - 1 && g.points[i].y == g.points[j].y) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 2);\n                } else if (g.points[i].x == g.points[j].x && g.points[i].y == g.points[j].y + 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 3);\n                } else if (g.points[i].x == g.points[j].x && g.points[i].y == g.points[j].y - 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 4);\n                } else if (g.points[i].x == g.points[j].x + 1 && g.points[i].y == g.points[j].y + 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 5);\n                } else if (g.points[i].x == g.points[j].x - 1 && g.points[i].y == g.points[j].y + 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 6);\n                } else if (g.points[i].x == g.points[j].x + 1 && g.points[i].y == g.points[j].y - 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 7);\n                } else if (g.points[i].x == g.points[j].x - 1 && g.points[i].y == g.points[j].y - 1) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 8);\n                } else if (g.points[i].x == g.points[j].x && g.points[i].y == g.points[j].y + 2) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 9);\n                } else if (g.points[i].x == g.points[j].x && g.points[i].y == g.points[j].y - 2) {\n                    add_edge(&g, g.points[i].x, g.points[i].y, g.points[j].x, g.points[j].y, 10);\n                }\n            }\n        }\n        for (i = 0; i < g.n; i++) {\n            dfs(&g, i, cnt);\n        }\n        for (i = 0; i < MAXD; i++) {\n            printf(\"%d \", cnt[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}