{
    "solution_id": "llama3.1-8b-1369",
    "problem_id": "p00879",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nint gcd(int a, int b) {\n    if (b == 0) return a;\n    return gcd(b, a % b);\n}\n\nint lcm(int a, int b) {\n    return a * b / gcd(a, b);\n}\n\nint main() {\n    string line;\n    map<string, int> elements;\n    while (getline(cin, line)) {\n        if (line == \".\") break;\n        size_t pos = line.find(\"->\");\n        string left = line.substr(0, pos);\n        string right = line.substr(pos + 2);\n        vector<string> leftMolecules;\n        vector<string> rightMolecules;\n        size_t start = 0;\n        while ((pos = left.find(\"+\", start)) != string::npos) {\n            leftMolecules.push_back(left.substr(start, pos - start));\n            start = pos + 1;\n        }\n        leftMolecules.push_back(left.substr(start));\n        start = 0;\n        while ((pos = right.find(\"+\", start)) != string::npos) {\n            rightMolecules.push_back(right.substr(start, pos - start));\n            start = pos + 1;\n        }\n        rightMolecules.push_back(right.substr(start));\n        map<string, int> leftCounts;\n        map<string, int> rightCounts;\n        for (const auto& molecule : leftMolecules) {\n            size_t start = 0;\n            while ((pos = molecule.find(\"(\", start)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start = end + 1;\n            }\n            start = 0;\n            while ((pos = molecule.find(\"(\", start)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start = end + 1;\n            }\n            size_t start2 = 0;\n            while ((pos = molecule.find(\")\", start2)) != string::npos) {\n                size_t end = molecule.find(\"(\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start2 = end + 1;\n            }\n            size_t start3 = 0;\n            while ((pos = molecule.find(\"(\", start3)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start3 = end + 1;\n            }\n            size_t start4 = 0;\n            while ((pos = molecule.find(\"(\", start4)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start4 = end + 1;\n            }\n            size_t start5 = 0;\n            while ((pos = molecule.find(\"(\", start5)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start5 = end + 1;\n            }\n            size_t start6 = 0;\n            while ((pos = molecule.find(\"(\", start6)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start6 = end + 1;\n            }\n            size_t start7 = 0;\n            while ((pos = molecule.find(\"(\", start7)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start7 = end + 1;\n            }\n            size_t start8 = 0;\n            while ((pos = molecule.find(\"(\", start8)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start8 = end + 1;\n            }\n            size_t start9 = 0;\n            while ((pos = molecule.find(\"(\", start9)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start9 = end + 1;\n            }\n            size_t start10 = 0;\n            while ((pos = molecule.find(\"(\", start10)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start10 = end + 1;\n            }\n            size_t start11 = 0;\n            while ((pos = molecule.find(\"(\", start11)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start11 = end + 1;\n            }\n            size_t start12 = 0;\n            while ((pos = molecule.find(\"(\", start12)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start12 = end + 1;\n            }\n            size_t start13 = 0;\n            while ((pos = molecule.find(\"(\", start13)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start13 = end + 1;\n            }\n            size_t start14 = 0;\n            while ((pos = molecule.find(\"(\", start14)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start14 = end + 1;\n            }\n            size_t start15 = 0;\n            while ((pos = molecule.find(\"(\", start15)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start15 = end + 1;\n            }\n            size_t start16 = 0;\n            while ((pos = molecule.find(\"(\", start16)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start16 = end + 1;\n            }\n            size_t start17 = 0;\n            while ((pos = molecule.find(\"(\", start17)) != string::npos) {\n                size_t end = molecule.find(\")\", pos);\n                string sub = molecule.substr(pos + 1, end - pos - 1);\n                if (elements.find(sub) == elements.end()) {\n                    elements[sub] = 1;\n                } else {\n                    elements[sub]++;\n                }\n                start17 = end + 1;\n            }\n            size_t",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}