{
    "solution_id": "llama3.1-8b-3777",
    "problem_id": "p02265",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <unordered_map>\n\nusing namespace std;\n\nstruct Node {\n    int key;\n    Node* prev;\n    Node* next;\n};\n\nclass DoublyLinkedList {\npublic:\n    Node* head;\n    Node* tail;\n    unordered_map<int, Node*> map;\n\n    DoublyLinkedList() {\n        head = nullptr;\n        tail = nullptr;\n    }\n\n    void insert(int key) {\n        Node* newNode = new Node();\n        newNode->key = key;\n        newNode->prev = nullptr;\n        newNode->next = head;\n\n        if (head != nullptr) {\n            head->prev = newNode;\n        }\n        head = newNode;\n\n        if (tail == nullptr) {\n            tail = newNode;\n        }\n\n        map[key] = newNode;\n    }\n\n    void deleteKey(int key) {\n        if (map.find(key) != map.end()) {\n            Node* node = map[key];\n            if (node->prev != nullptr) {\n                node->prev->next = node->next;\n            }\n            if (node->next != nullptr) {\n                node->next->prev = node->prev;\n            }\n            if (node == head) {\n                head = node->next;\n            }\n            if (node == tail) {\n                tail = node->prev;\n            }\n            map.erase(key);\n            delete node;\n        }\n    }\n\n    void deleteFirst() {\n        if (head != nullptr) {\n            Node* node = head;\n            head = head->next;\n            if (head != nullptr) {\n                head->prev = nullptr;\n            }\n            if (tail == node) {\n                tail = nullptr;\n            }\n            map.erase(node->key);\n            delete node;\n        }\n    }\n\n    void deleteLast() {\n        if (tail != nullptr) {\n            Node* node = tail;\n            tail = tail->prev;\n            if (tail != nullptr) {\n                tail->next = nullptr;\n            }\n            if (head == node) {\n                head = nullptr;\n            }\n            map.erase(node->key);\n            delete node;\n        }\n    }\n\n    void printList() {\n        Node* node = head;\n        while (node != nullptr) {\n            cout << node->key << \" \";\n            node = node->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    int n;\n    cin >> n;\n    DoublyLinkedList dll;\n    for (int i = 0; i < n; i++) {\n        string command;\n        cin >> command;\n        if (command == \"insert\") {\n            int key;\n            cin >> key;\n            dll.insert(key);\n        } else if (command == \"delete\") {\n            int key;\n            cin >> key;\n            dll.deleteKey(key);\n        } else if (command == \"deleteFirst\") {\n            dll.deleteFirst();\n        } else if (command == \"deleteLast\") {\n            dll.deleteLast();\n        }\n    }\n    dll.printList();\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}