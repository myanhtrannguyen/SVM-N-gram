{
    "solution_id": "llama3.1-8b-3398",
    "problem_id": "p01948",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static final int N = 15;\n    static final double EPS = 1e-9;\n    static final double INF = 1e9;\n\n    static class Player {\n        int id;\n        double r, p, s;\n        double rating;\n\n        public Player(int id, double r, double p, double s, double rating) {\n            this.id = id;\n            this.r = r;\n            this.p = p;\n            this.s = s;\n            this.rating = rating;\n        }\n    }\n\n    static double[][] dp = new double[N][N];\n    static Player[] players = new Player[N];\n\n    static void solve(int n, int mask) {\n        if (n == 1) {\n            dp[mask][0] = 1;\n            return;\n        }\n\n        for (int i = 0; i < n; i++) {\n            if ((mask & (1 << i)) != 0) continue;\n\n            double prob = 0;\n            for (int j = 0; j < n; j++) {\n                if ((mask & (1 << j)) != 0) {\n                    prob += players[j].r;\n                }\n            }\n\n            double p = 0, q = 0, r = 0;\n            for (int j = 0; j < n; j++) {\n                if ((mask & (1 << j)) != 0) {\n                    double pr = players[j].r * prob;\n                    double pp = players[j].p * (1 - prob);\n                    double ps = players[j].s * (1 - prob);\n\n                    if (i == j) {\n                        p += pr + pp + ps;\n                        q += pr;\n                        r += pp;\n                    } else {\n                        p += pr + pp + ps;\n                        q += pr + ps;\n                        r += pp;\n                    }\n                }\n            }\n\n            double[] newProb = new double[3];\n            newProb[0] = p / (p + q + r);\n            newProb[1] = q / (p + q + r);\n            newProb[2] = r / (p + q + r);\n\n            for (int j = 0; j < n; j++) {\n                if ((mask & (1 << j)) != 0) {\n                    double pr = players[j].r * prob;\n                    double pp = players[j].p * (1 - prob);\n                    double ps = players[j].s * (1 - prob);\n\n                    if (i == j) {\n                        dp[mask][j] = newProb[0] * (1 - prob) + newProb[1] * prob;\n                    } else {\n                        dp[mask][j] = newProb[0] * (1 - prob) + newProb[1] * prob + newProb[2] * prob;\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if ((mask & (1 << i)) != 0) {\n                for (int j = 0; j < n; j++) {\n                    if ((mask & (1 << j)) != 0) {\n                        dp[mask][j] += dp[mask ^ (1 << i)][i];\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n\n        for (int i = 1; i <= n; i++) {\n            String[] line = br.readLine().split(\" \");\n            players[i] = new Player(i, Double.parseDouble(line[1]) / 100, Double.parseDouble(line[2]) / 100, Double.parseDouble(line[3]) / 100, Integer.parseInt(line[0]));\n        }\n\n        Arrays.sort(players, 2, n + 1, (a, b) -> Double.compare(b.rating, a.rating));\n\n        for (int i = 0; i < n; i++) {\n            solve(n, (1 << i));\n        }\n\n        double ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans += dp[(1 << n) - 1][i] * players[i].rating;\n        }\n\n        System.out.printf(\"%.12f\\n\", ans / players[1].rating);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}