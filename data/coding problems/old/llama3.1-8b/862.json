{
    "solution_id": "llama3.1-8b-862",
    "problem_id": "p00752",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Line {\n        Point p1, p2;\n\n        public Line(Point p1, Point p2) {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n\n    static double dist(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n    }\n\n    static double cross(Point p1, Point p2, Point p3) {\n        return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n    }\n\n    static double dot(Point p1, Point p2) {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    static double angle(Point p1, Point p2) {\n        return Math.acos(dot(p1, p2) / (dist(p1, p2) * dist(p1, p2)));\n    }\n\n    static double reflect(Point p, Point n) {\n        return 2 * dot(p, n) / dist(n, n);\n    }\n\n    static double intersect(Line l1, Line l2) {\n        double a1 = l1.p2.x - l1.p1.x;\n        double b1 = l1.p2.y - l1.p1.y;\n        double c1 = -a1 * l1.p1.x - b1 * l1.p1.y;\n\n        double a2 = l2.p2.x - l2.p1.x;\n        double b2 = l2.p2.y - l2.p1.y;\n        double c2 = -a2 * l2.p1.x - b2 * l2.p1.y;\n\n        double d = a1 * b2 - a2 * b1;\n        if (Math.abs(d) < 1e-9) return 0;\n\n        double t = (c1 * b2 - c2 * b1) / d;\n        double u = (a1 * c2 - a2 * c1) / d;\n\n        return dist(l1.p1, new Point(l1.p1.x + a1 * t, l1.p1.y + b1 * t));\n    }\n\n    static double solve(int n, Point[] mirrors, Point target, Point source) {\n        double[] dp = new double[n + 1];\n        Arrays.fill(dp, Double.POSITIVE_INFINITY);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                double dist = dist(mirrors[i], mirrors[j]);\n                for (int k = i; k < j; k++) {\n                    dist = Math.min(dist, intersect(new Line(mirrors[i], mirrors[j]), new Line(mirrors[k], mirrors[k + 1])));\n                }\n                dp[j] = Math.min(dp[j], dp[i] + dist);\n            }\n        }\n\n        double dist = dist(target, source);\n        for (int i = 0; i < n; i++) {\n            dist = Math.min(dist, intersect(new Line(target, source), new Line(mirrors[i], mirrors[i + 1])));\n        }\n\n        return Math.min(dp[n], dist);\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            Point[] mirrors = new Point[n];\n            for (int i = 0; i < n; i++) {\n                StringTokenizer st = new StringTokenizer(br.readLine());\n                mirrors[i] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            }\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            Point target = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            st = new StringTokenizer(br.readLine());\n            Point source = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            System.out.printf(\"%.6f%n\", solve(n, mirrors, target, source));\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}