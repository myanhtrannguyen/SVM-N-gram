{
    "solution_id": "llama3.1-8b-522",
    "problem_id": "p00644",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Edge implements Comparable<Edge> {\n        int v, w;\n\n        public Edge(int v, int w) {\n            this.v = v;\n            this.w = w;\n        }\n\n        @Override\n        public int compareTo(Edge o) {\n            return Integer.compare(w, o.w);\n        }\n    }\n\n    static class Pair {\n        int first, second;\n\n        public Pair(int first, int second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        StringTokenizer st;\n\n        while (true) {\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int m = Integer.parseInt(st.nextToken());\n            int p = Integer.parseInt(st.nextToken());\n\n            if (n == 0 && m == 0 && p == 0) break;\n\n            List<List<Pair>> g = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                g.add(new ArrayList<>());\n            }\n\n            for (int i = 0; i < m; i++) {\n                st = new StringTokenizer(br.readLine());\n                int u = Integer.parseInt(st.nextToken());\n                int v = Integer.parseInt(st.nextToken());\n                int w = Integer.parseInt(st.nextToken());\n                g.get(u).add(new Pair(v, w));\n                g.get(v).add(new Pair(u, w));\n            }\n\n            int[] dist = new int[n];\n            Arrays.fill(dist, Integer.MAX_VALUE);\n            dist[0] = 0;\n\n            PriorityQueue<Edge> pq = new PriorityQueue<>();\n            pq.add(new Edge(0, 0));\n\n            while (!pq.isEmpty()) {\n                Edge e = pq.poll();\n                int u = e.v;\n                int d = e.w;\n\n                if (d > dist[u]) continue;\n\n                for (Pair pair : g.get(u)) {\n                    int v = pair.first;\n                    int w = pair.second;\n                    if (dist[v] > dist[u] + w) {\n                        dist[v] = dist[u] + w;\n                        pq.add(new Edge(v, dist[v]));\n                    }\n                }\n            }\n\n            double[] prob = new double[p];\n            for (int i = 0; i < p; i++) {\n                st = new StringTokenizer(br.readLine());\n                int c = Integer.parseInt(st.nextToken());\n                prob[i] = 1.0 / countPaths(g, dist, c);\n            }\n\n            for (double d : prob) {\n                pw.printf(\"%.6f \", d);\n            }\n            pw.println();\n            pw.println();\n        }\n\n        pw.close();\n    }\n\n    static int countPaths(List<List<Pair>> g, int[] dist, int c) {\n        int n = g.size();\n        int[] dp = new int[n];\n        Arrays.fill(dp, 0);\n\n        for (int i = 0; i < n; i++) {\n            if (dist[i] == Integer.MAX_VALUE) continue;\n            for (Pair pair : g.get(i)) {\n                int v = pair.first;\n                int w = pair.second;\n                if (dist[i] + w == dist[v]) {\n                    dp[i]++;\n                }\n            }\n        }\n\n        int[] dp2 = new int[n];\n        Arrays.fill(dp2, 0);\n\n        for (int i = 0; i < n; i++) {\n            if (dist[i] == Integer.MAX_VALUE) continue;\n            for (Pair pair : g.get(i)) {\n                int v = pair.first;\n                int w = pair.second;\n                if (dist[i] + w == dist[v]) {\n                    dp2[i] += dp[v];\n                }\n            }\n        }\n\n        int[] dp3 = new int[n];\n        Arrays.fill(dp3, 0);\n\n        for (int i = 0; i < n; i++) {\n            if (dist[i] == Integer.MAX_VALUE) continue;\n            for (Pair pair : g.get(i)) {\n                int v = pair.first;\n                int w = pair.second;\n                if (dist[i] + w == dist[v]) {\n                    dp3[i] += dp2[v];\n                }\n            }\n        }\n\n        return dp3[c];\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}