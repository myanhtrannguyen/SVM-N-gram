{
    "solution_id": "llama3.1-8b-1106",
    "problem_id": "p00813",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static double[] prob = new double[9];\n    static {\n        prob[0] = 0.0;\n        prob[1] = 0.0;\n        prob[2] = 0.0;\n        prob[3] = 0.0;\n        prob[4] = 0.0;\n        prob[5] = 0.0;\n        prob[6] = 0.0;\n        prob[7] = 0.0;\n        prob[8] = 0.0;\n        prob[1] = 0.25;\n        prob[2] = 0.5;\n        prob[3] = 0.75;\n        prob[4] = 0.875;\n        prob[5] = 0.9375;\n        prob[6] = 0.96875;\n        prob[7] = 0.984375;\n        prob[8] = 0.9921875;\n    }\n\n    static class Team {\n        String name;\n        int[] points = new int[4];\n        int[] goals = new int[4];\n        int[] goalDiff = new int[4];\n        int[] matches = new int[4];\n        int[] pointsAgainst = new int[4];\n        int[] goalsAgainst = new int[4];\n        int[] goalDiffAgainst = new int[4];\n\n        public Team(String name) {\n            this.name = name;\n        }\n    }\n\n    static class Match {\n        String team1;\n        String team2;\n        int score1;\n        int score2;\n\n        public Match(String team1, String team2, int score1, int score2) {\n            this.team1 = team1;\n            this.team2 = team2;\n            this.score1 = score1;\n            this.score2 = score2;\n        }\n    }\n\n    static double calculateProbability(Team team, List<Team> teams, List<Match> matches) {\n        double probability = 0.0;\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (i != j) {\n                    Team team1 = teams.get(i);\n                    Team team2 = teams.get(j);\n                    if (team1.name.equals(team.name)) {\n                        team1.points[i]++;\n                        team1.goals[i] += matches.get(i).score1;\n                        team1.goalDiff[i] += matches.get(i).score1 - matches.get(i).score2;\n                        team1.matches[i]++;\n                        team1.pointsAgainst[j]++;\n                        team1.goalsAgainst[j] += matches.get(i).score2;\n                        team1.goalDiffAgainst[j] += matches.get(i).score2 - matches.get(i).score1;\n                    } else if (team2.name.equals(team.name)) {\n                        team2.points[j]++;\n                        team2.goals[j] += matches.get(i).score2;\n                        team2.goalDiff[j] += matches.get(i).score2 - matches.get(i).score1;\n                        team2.matches[j]++;\n                        team2.pointsAgainst[i]++;\n                        team2.goalsAgainst[i] += matches.get(i).score1;\n                        team2.goalDiffAgainst[i] += matches.get(i).score1 - matches.get(i).score2;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (i != j) {\n                    Team team1 = teams.get(i);\n                    Team team2 = teams.get(j);\n                    if (team1.name.equals(team.name)) {\n                        if (team2.name.equals(team.name)) {\n                            continue;\n                        }\n                        if (team1.points[i] > team2.points[j]) {\n                            probability += prob[team1.goals[i] - team1.goalsAgainst[i] - (team2.goals[j] - team2.goalsAgainst[j])];\n                        } else if (team1.points[i] == team2.points[j]) {\n                            if (team1.goalDiff[i] > team2.goalDiff[j]) {\n                                probability += prob[team1.goals[i] - team1.goalsAgainst[i] - (team2.goals[j] - team2.goalsAgainst[j])];\n                            } else if (team1.goalDiff[i] == team2.goalDiff[j]) {\n                                probability += prob[team1.goals[i] - team1.goalsAgainst[i] - (team2.goals[j] - team2.goalsAgainst[j])];\n                            }\n                        }\n                    } else if (team2.name.equals(team.name)) {\n                        if (team1.name.equals(team.name)) {\n                            continue;\n                        }\n                        if (team2.points[j] > team1.points[i]) {\n                            probability += prob[team2.goals[j] - team2.goalsAgainst[j] - (team1.goals[i] - team1.goalsAgainst[i])];\n                        } else if (team2.points[j] == team1.points[i]) {\n                            if (team2.goalDiff[j] > team1.goalDiff[i]) {\n                                probability += prob[team2.goals[j] - team2.goalsAgainst[j] - (team1.goals[i] - team1.goalsAgainst[i])];\n                            } else if (team2.goalDiff[j] == team1.goalDiff[i]) {\n                                probability += prob[team2.goals[j] - team2.goalsAgainst[j] - (team1.goals[i] - team1.goalsAgainst[i])];\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return probability;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        for (int i = 0; i < n; i++) {\n            String[] input = br.readLine().split(\" \");\n            Team team = new Team(input[3]);\n            List<Team> teams = new ArrayList<>();\n            for (int j = 0; j < 4; j++) {\n                teams.add(new Team(input[j]));\n            }\n            List<Match> matches = new ArrayList<>();\n            for (int j = 4; j < 10; j += 2) {\n                Match match = new Match(input[j - 1], input[j], Integer.parseInt(input[j + 1].split(\"-\")[0]), Integer.parseInt(input[j + 1].split(\"-\")[1]));\n                matches.add(match);\n            }\n            double probability = calculateProbability(team, teams, matches);\n            System.out.printf(\"%.7f\\n\", probability);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}