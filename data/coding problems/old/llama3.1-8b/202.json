{
    "solution_id": "llama3.1-8b-202",
    "problem_id": "p00361",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, next;\n        boolean isBridge;\n\n        public Edge(int to, int next) {\n            this.to = to;\n            this.next = next;\n        }\n    }\n\n    static class Graph {\n        int n, m;\n        List<Edge>[] edges;\n\n        public Graph(int n) {\n            this.n = n;\n            this.m = 0;\n            this.edges = new List[n];\n            for (int i = 0; i < n; i++) {\n                this.edges[i] = new ArrayList<>();\n            }\n        }\n\n        public void addEdge(int u, int v) {\n            Edge e = new Edge(v, edges[u].size());\n            edges[u].add(e);\n            m++;\n        }\n\n        public void addEdge(int u, int v, boolean isBridge) {\n            Edge e = new Edge(v, edges[u].size());\n            e.isBridge = isBridge;\n            edges[u].add(e);\n            m++;\n        }\n    }\n\n    static int[] dfn, low, vis, curTime;\n    static int time;\n    static List<Integer>[] stack;\n    static List<Integer> ans;\n\n    public static void tarjan(int u, Graph g) {\n        dfn[u] = low[u] = ++time;\n        vis[u] = 1;\n        for (int i = 0; i < g.edges[u].size(); i++) {\n            Edge e = g.edges[u].get(i);\n            if (dfn[e.to] == 0) {\n                tarjan(e.to, g);\n                low[u] = Math.min(low[u], low[e.to]);\n                if (low[e.to] >= dfn[u]) {\n                    ans.add(u);\n                    ans.add(e.to);\n                    g.addEdge(u, e.to, true);\n                }\n            } else if (vis[e.to] == 1) {\n                low[u] = Math.min(low[u], dfn[e.to]);\n            }\n        }\n        vis[u] = 2;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        Graph g = new Graph(n);\n        for (int i = 0; i < m; i++) {\n            st = new StringTokenizer(br.readLine());\n            int u = Integer.parseInt(st.nextToken());\n            int v = Integer.parseInt(st.nextToken());\n            g.addEdge(u, v);\n        }\n        dfn = new int[n];\n        low = new int[n];\n        vis = new int[n];\n        curTime = new int[1];\n        time = 0;\n        ans = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (dfn[i] == 0) {\n                tarjan(i, g);\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < g.edges[i].size(); j++) {\n                Edge e = g.edges[i].get(j);\n                if (e.isBridge) {\n                    res++;\n                }\n            }\n        }\n        System.out.println(res);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}