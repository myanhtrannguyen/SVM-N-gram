{
    "solution_id": "llama3.1-8b-2955",
    "problem_id": "p01596",
    "language": "Python",
    "solution": "```python\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\nclass Arc:\n    def __init__(self, p1, p2, r):\n        self.p1 = p1\n        self.p2 = p2\n        self.r = r\n\ndef distance(p1, p2):\n    return math.sqrt((p1.x - p2.x)**2 + (p1.y - p2.y)**2)\n\ndef cross_product(p1, p2, p3):\n    return (p2.x - p1.x)*(p3.y - p1.y) - (p2.y - p1.y)*(p3.x - p1.x)\n\ndef orientation(p1, p2, p3):\n    cp = cross_product(p1, p2, p3)\n    if cp > 0:\n        return 1\n    elif cp < 0:\n        return -1\n    else:\n        return 0\n\ndef intersect(p1, p2, p3, p4):\n    o1 = orientation(p1, p2, p3)\n    o2 = orientation(p1, p2, p4)\n    o3 = orientation(p3, p4, p1)\n    o4 = orientation(p3, p4, p2)\n    if o1 != o2 and o3 != o4:\n        return True\n    elif o1 == 0 and on_segment(p1, p2, p3):\n        return True\n    elif o2 == 0 and on_segment(p1, p2, p4):\n        return True\n    elif o3 == 0 and on_segment(p3, p4, p1):\n        return True\n    elif o4 == 0 and on_segment(p3, p4, p2):\n        return True\n    return False\n\ndef on_segment(p1, p2, p3):\n    if (min(p1.x, p2.x) <= p3.x <= max(p1.x, p2.x) and\n        min(p1.y, p2.y) <= p3.y <= max(p1.y, p2.y)):\n        return True\n    return False\n\ndef convex_hull(points):\n    n = len(points)\n    if n < 3:\n        return points\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i].x < points[l].x:\n            l = i\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n        for i in range(n):\n            if orientation(points[p], points[q], points[i]) == 2:\n                q = i\n        if q == l:\n            break\n        p = q\n    return hull\n\ndef get_arc(p1, p2, p3):\n    v1 = (p2.x - p1.x, p2.y - p1.y)\n    v2 = (p3.x - p2.x, p3.y - p2.y)\n    r = math.sqrt(v1[0]**2 + v1[1]**2)\n    return Arc(p1, p2, r)\n\ndef get_segments(points):\n    segments = []\n    for i in range(len(points) - 1):\n        segments.append(Segment(points[i], points[i + 1]))\n    segments.append(Segment(points[-1], points[0]))\n    return segments\n\ndef get_arcs(segments):\n    arcs = []\n    for i in range(len(segments) - 1):\n        p1 = segments[i].p2\n        p2 = segments[i + 1].p1\n        p3 = segments[i + 1].p2\n        if intersect(p1, p2, p3, segments[i + 1].p1):\n            arcs.append(get_arc(p1, p2, p3))\n        else:\n            arcs.append(Segment(p1, p2))\n    return arcs\n\ndef get_points(segments):\n    points = []\n    for segment in segments:\n        points.append(segment.p1)\n        points.append(segment.p2)\n    return points\n\ndef get_distance(arc):\n    if isinstance(arc, Segment):\n        return distance(arc.p1, arc.p2)\n    else:\n        return 2 * math.pi * arc.r\n\ndef get_total_distance(segments):\n    total_distance = 0\n    for segment in segments:\n        total_distance += get_distance(segment)\n    return total_distance\n\ndef main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        x, y, x1, y1 = map(int, input().split())\n        points.append(Point(x, y))\n        points.append(Point(x1, y1))\n    points = convex_hull(points)\n    segments = get_segments(points)\n    arcs = get_arcs(segments)\n    total_distance = get_total_distance(segments + arcs)\n    print(format(total_distance, \".3f\"))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}