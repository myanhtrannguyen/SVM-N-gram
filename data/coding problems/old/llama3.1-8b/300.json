{
    "solution_id": "llama3.1-8b-300",
    "problem_id": "p00386",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <limits.h>\n\n#define N 100000\n#define Q 100000\n\ntypedef struct {\n    int u, v, w;\n} edge;\n\nint parent[N];\nint rank[N];\n\nvoid make_set(int v) {\n    parent[v] = v;\n    rank[v] = 0;\n}\n\nint find_set(int v) {\n    if (v == parent[v])\n        return v;\n    return parent[v] = find_set(parent[v]);\n}\n\nvoid union_set(int a, int b) {\n    a = find_set(a);\n    b = find_set(b);\n    if (a != b) {\n        if (rank[a] < rank[b])\n            parent[a] = b;\n        else if (rank[a] > rank[b])\n            parent[b] = a;\n        else {\n            parent[b] = a;\n            rank[a]++;\n        }\n    }\n}\n\nint dist[N];\n\nvoid dijkstra(int n, int s) {\n    for (int i = 0; i < n; i++)\n        dist[i] = INT_MAX;\n    dist[s] = 0;\n    for (int i = 0; i < n - 1; i++) {\n        int u = -1;\n        for (int j = 0; j < n; j++)\n            if (dist[j] < dist[u])\n                u = j;\n        int v;\n        for (int j = 0; j < n; j++)\n            if (dist[u] + edge[j].w < dist[v])\n                v = j;\n        if (dist[u] + edge[v].w < dist[v]) {\n            dist[v] = dist[u] + edge[v].w;\n        }\n        union_set(u, v);\n    }\n}\n\nint main() {\n    int n, q;\n    scanf(\"%d %d\", &n, &q);\n    edge e[N * 2];\n    for (int i = 0; i < n - 1; i++) {\n        scanf(\"%d %d %d\", &e[i * 2].u, &e[i * 2].v, &e[i * 2].w);\n        scanf(\"%d %d %d\", &e[i * 2 + 1].u, &e[i * 2 + 1].v, &e[i * 2 + 1].w);\n        e[i * 2 + 1].w = e[i * 2].w;\n    }\n    for (int i = 0; i < n; i++)\n        make_set(i);\n    for (int i = 0; i < n - 1; i++)\n        union_set(e[i * 2].u, e[i * 2].v);\n    for (int i = 0; i < n - 1; i++)\n        union_set(e[i * 2 + 1].u, e[i * 2 + 1].v);\n    for (int i = 0; i < n; i++)\n        dist[i] = INT_MAX;\n    for (int i = 0; i < n - 1; i++) {\n        int u = -1;\n        for (int j = 0; j < n; j++)\n            if (dist[j] < dist[u])\n                u = j;\n        int v;\n        for (int j = 0; j < n; j++)\n            if (dist[u] + edge[j].w < dist[v])\n                v = j;\n        if (dist[u] + edge[v].w < dist[v]) {\n            dist[v] = dist[u] + edge[v].w;\n        }\n    }\n    for (int i = 0; i < q; i++) {\n        int a, b, c;\n        scanf(\"%d %d %d\", &a, &b, &c);\n        int u = find_set(a - 1);\n        int v = find_set(b - 1);\n        int w = find_set(c - 1);\n        if (u == v && v == w) {\n            printf(\"%d\\n\", dist[w]);\n            continue;\n        }\n        if (u == v) {\n            int d = find_set(a - 1);\n            int e = find_set(c - 1);\n            dijkstra(n, d);\n            printf(\"%d\\n\", dist[e]);\n            continue;\n        }\n        if (u == w) {\n            int d = find_set(a - 1);\n            int e = find_set(b - 1);\n            dijkstra(n, d);\n            printf(\"%d\\n\", dist[e]);\n            continue;\n        }\n        if (v == w) {\n            int d = find_set(b - 1);\n            int e = find_set(a - 1);\n            dijkstra(n, d);\n            printf(\"%d\\n\", dist[e]);\n            continue;\n        }\n        int d = find_set(a - 1);\n        int e = find_set(b - 1);\n        int f = find_set(c - 1);\n        dijkstra(n, d);\n        printf(\"%d\\n\", dist[e]);\n        dijkstra(n, f);\n        printf(\"%d\\n\", dist[e]);\n        dijkstra(n, d);\n        printf(\"%d\\n\", dist[f]);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}