{
    "solution_id": "llama3.1-8b-1164",
    "problem_id": "p00828",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_N 7\n#define MAX_P 343\n\ntypedef struct {\n    int x, y, z;\n} Move;\n\ntypedef struct {\n    int n, m, p;\n    Move moves[MAX_P];\n} Game;\n\nint is_valid_move(Game *game, int x, int y, int z) {\n    if (x < 1 || x > game->n || y < 1 || y > game->n || z < 1 || z > game->n) {\n        return 0;\n    }\n    for (int i = 1; i <= z; i++) {\n        if (game->moves[z - i].x == x && game->moves[z - i].y == y) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint is_sequence(Game *game, int x, int y, int z, int length) {\n    int count = 0;\n    for (int i = z; i >= z - length + 1; i--) {\n        if (game->moves[i].x == x && game->moves[i].y == y) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count == length;\n}\n\nint check_winner(Game *game, int x, int y, int z) {\n    int directions[][3] = {\n        {1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0},\n        {1, 1, 0}, {-1, -1, 0}, {1, -1, 0}, {-1, 1, 0},\n        {1, 0, 1}, {-1, 0, 1}, {0, 1, 1}, {0, -1, 1},\n        {1, 1, 1}, {-1, -1, 1}, {1, -1, 1}, {-1, 1, 1}\n    };\n    for (int i = 0; i < 13; i++) {\n        int x1 = x + directions[i][0];\n        int y1 = y + directions[i][1];\n        int z1 = z + directions[i][2];\n        if (is_valid_move(game, x1, y1, z1) && is_sequence(game, x1, y1, z1, game->m)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\nvoid play_game(Game *game) {\n    int x, y;\n    int black_wins = 0;\n    int white_wins = 0;\n    int draw = 0;\n    for (int i = 0; i < game->p; i++) {\n        scanf(\"%d %d\", &x, &y);\n        game->moves[i].x = x;\n        game->moves[i].y = y;\n        game->moves[i].z = i + 1;\n        if (i >= game->m - 1) {\n            if (check_winner(game, x, y, i)) {\n                if (i % 2 == 0) {\n                    black_wins = 1;\n                } else {\n                    white_wins = 1;\n                }\n            }\n        }\n        if (i == game->p - 1 || black_wins || white_wins) {\n            break;\n        }\n    }\n    if (black_wins) {\n        printf(\"Black %d\\n\", i + 1);\n    } else if (white_wins) {\n        printf(\"White %d\\n\", i + 1);\n    } else if (i == game->p - 1) {\n        printf(\"Draw\\n\");\n    }\n}\n\nint main() {\n    Game game;\n    while (scanf(\"%d %d %d\", &game.n, &game.m, &game.p) == 3) {\n        if (game.n == 0 && game.m == 0 && game.p == 0) {\n            break;\n        }\n        play_game(&game);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}