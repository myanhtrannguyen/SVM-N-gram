{
    "solution_id": "llama3.1-8b-3077",
    "problem_id": "p01683",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\n#include <limits>\n\nusing namespace std;\n\nstruct Island {\n    int p, d;\n};\n\nstruct Edge {\n    int u, v, w;\n};\n\nbool compareEdges(const Edge& e1, const Edge& e2) {\n    return e1.w < e2.w;\n}\n\nint find(vector<int>& parent, int u) {\n    if (parent[u] != u) {\n        parent[u] = find(parent, parent[u]);\n    }\n    return parent[u];\n}\n\nvoid unionIslands(vector<int>& parent, vector<int>& rank, int u, int v) {\n    int rootU = find(parent, u);\n    int rootV = find(parent, v);\n\n    if (rootU != rootV) {\n        if (rank[rootU] < rank[rootV]) {\n            parent[rootU] = rootV;\n        } else if (rank[rootU] > rank[rootV]) {\n            parent[rootV] = rootU;\n        } else {\n            parent[rootV] = rootU;\n            rank[rootU]++;\n        }\n    }\n}\n\nint main() {\n    int t;\n    cin >> t;\n    while (t--) {\n        int n;\n        cin >> n;\n        vector<Island> islands(n);\n        for (int i = 0; i < n; i++) {\n            cin >> islands[i].p >> islands[i].d;\n        }\n\n        if (n == 1) {\n            cout << 0 << endl;\n            continue;\n        }\n\n        vector<Edge> edges;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                edges.push_back({i, j, abs(islands[i].p - islands[j].p)});\n            }\n        }\n\n        sort(edges.begin(), edges.end(), compareEdges);\n\n        vector<int> parent(n);\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n\n        vector<int> rank(n, 0);\n\n        int mstCost = 0;\n        int edgeCount = 0;\n        for (const auto& edge : edges) {\n            int u = edge.u;\n            int v = edge.v;\n            int w = edge.w;\n\n            if (edgeCount < n - 1) {\n                int rootU = find(parent, u);\n                int rootV = find(parent, v);\n\n                if (rootU != rootV) {\n                    unionIslands(parent, rank, rootU, rootV);\n                    mstCost += w;\n                    edgeCount++;\n                }\n            } else {\n                break;\n            }\n        }\n\n        if (edgeCount == n - 1) {\n            cout << mstCost << endl;\n        } else {\n            cout << -1 << endl;\n        }\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}