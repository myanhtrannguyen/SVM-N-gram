{
    "solution_id": "llama3.1-8b-948",
    "problem_id": "p00774",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_H 10\n#define MAX_C 5\n\nint count_consecutive(int row[MAX_C], int digit) {\n    int count = 0;\n    for (int i = 0; i < MAX_C; i++) {\n        if (row[i] == digit) {\n            count++;\n        } else {\n            break;\n        }\n    }\n    return count;\n}\n\nvoid drop_stones(int board[MAX_H][MAX_C], int h, int c) {\n    for (int i = h - 1; i >= 0; i--) {\n        for (int j = 0; j < c; j++) {\n            if (board[i][j] != 0) {\n                board[i][j] = board[i + 1][j];\n                board[i + 1][j] = 0;\n            }\n        }\n    }\n}\n\nvoid print_board(int board[MAX_H][MAX_C], int h, int c) {\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < c; j++) {\n            printf(\"%d \", board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint calculate_score(int board[MAX_H][MAX_C], int h, int c) {\n    int score = 0;\n    int disappeared[MAX_H][MAX_C] = {{0}};\n    int disappeared_count = 0;\n\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < c; j++) {\n            if (disappeared[i][j] == 0) {\n                int digit = board[i][j];\n                int count = count_consecutive(board[i], digit);\n                if (count >= 3) {\n                    score += digit * count;\n                    disappeared_count++;\n                    for (int k = j; k < j + count; k++) {\n                        disappeared[i][k] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    if (disappeared_count > 0) {\n        drop_stones(board, h, c);\n        return calculate_score(board, h, c);\n    } else {\n        return score;\n    }\n}\n\nint main() {\n    int h;\n    while (scanf(\"%d\", &h) == 1 && h != 0) {\n        int board[MAX_H][MAX_C] = {{0}};\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < MAX_C; j++) {\n                scanf(\"%d\", &board[i][j]);\n            }\n        }\n        int score = calculate_score(board, h, MAX_C);\n        printf(\"%d\\n\", score);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}