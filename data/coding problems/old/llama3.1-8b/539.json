{
    "solution_id": "llama3.1-8b-539",
    "problem_id": "p00648",
    "language": "Python",
    "solution": "```python\nfrom collections import defaultdict\nimport sys\n\ndef read_input():\n    input_lines = sys.stdin.readlines()\n    input_lines = [line.strip() for line in input_lines]\n    return input_lines\n\ndef parse_input(input_lines):\n    result = []\n    i = 0\n    while i < len(input_lines):\n        n = int(input_lines[i])\n        programs = []\n        for j in range(n):\n            name, weekday, start = input_lines[i + j + 1].split()\n            programs.append((name, int(weekday), int(start)))\n        i += n + 1\n        p = int(input_lines[i])\n        f = set()\n        for j in range(p):\n            f.add(input_lines[i + j + 1])\n        i += p + 1\n        result.append((programs, f))\n        i += 1\n    return result\n\ndef solve(programs, f):\n    graph = defaultdict(list)\n    for i in range(len(programs)):\n        for j in range(i + 1, len(programs)):\n            if programs[i][1] == programs[j][1] and (programs[i][2] <= programs[j][2] and programs[j][2] <= programs[i][2] + 30) or (programs[j][2] <= programs[i][2] and programs[i][2] <= programs[j][2] + 30):\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = set()\n    max_count = 0\n    def dfs(node, count):\n        nonlocal max_count\n        visited.add(node)\n        count += 1\n        max_count = max(max_count, count)\n        for neighbor in graph[node]:\n            if neighbor not in visited and programs[neighbor][0] in f:\n                dfs(neighbor, count)\n        visited.remove(node)\n    for i in range(len(programs)):\n        if programs[i][0] in f and i not in visited:\n            dfs(i, 0)\n    return max_count if max_count <= len(f) else -1\n\ndef main():\n    input_lines = read_input()\n    result = []\n    for programs, f in parse_input(input_lines):\n        result.append(solve(programs, f))\n    print('\\n'.join(map(str, result)))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}