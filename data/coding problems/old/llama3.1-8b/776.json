{
    "solution_id": "llama3.1-8b-776",
    "problem_id": "p00731",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\n#define MAX_W 30\n#define MAX_H 60\n\ntypedef struct {\n    int x, y;\n    int time;\n} Node;\n\ntypedef struct {\n    Node nodes[MAX_W * MAX_H];\n    int size;\n} Queue;\n\nvoid initQueue(Queue *q) {\n    q->size = 0;\n}\n\nvoid enqueue(Queue *q, Node node) {\n    q->nodes[q->size++] = node;\n}\n\nNode dequeue(Queue *q) {\n    return q->nodes[--q->size];\n}\n\nint isValid(int x, int y, int w, int h) {\n    return (x >= 0 && x < w && y >= 0 && y < h);\n}\n\nint bfs(char **grid, int w, int h) {\n    Queue q;\n    initQueue(&q);\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, -1, 0, 1};\n    int lx, ly, rx, ry;\n    int time = 0;\n\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            if (grid[i][j] == 'S') {\n                lx = j;\n                ly = i;\n                rx = j;\n                ry = i;\n                enqueue(&q, (Node){lx, ly, 0});\n                enqueue(&q, (Node){rx, ry, 0});\n            }\n        }\n    }\n\n    while (q.size > 0) {\n        Node node = dequeue(&q);\n        int x = node.x;\n        int y = node.y;\n        int ntime = node.time;\n\n        if (grid[y][x] == 'T') {\n            return ntime;\n        }\n\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n\n            if (isValid(nx, ny, w, h) && grid[ny][nx] != 'X') {\n                if (grid[ny][nx] >= '1' && grid[ny][nx] <= '9') {\n                    ntime += grid[ny][nx] - '0';\n                }\n\n                if (nx != lx || ny != ly) {\n                    enqueue(&q, (Node){nx, ny, ntime});\n                }\n\n                if (nx != rx || ny != ry) {\n                    enqueue(&q, (Node){rx, ry, ntime});\n                }\n            }\n        }\n\n        lx = rx;\n        ly = ry;\n        rx = x;\n        ry = y;\n    }\n\n    return -1;\n}\n\nint main() {\n    int w, h;\n    char **grid;\n    int t;\n\n    while (scanf(\"%d %d\", &w, &h) == 2) {\n        if (w == 0 && h == 0) {\n            break;\n        }\n\n        grid = (char **)malloc(h * sizeof(char *));\n        for (int i = 0; i < h; i++) {\n            grid[i] = (char *)malloc(w * sizeof(char));\n        }\n\n        for (int i = 0; i < h; i++) {\n            scanf(\"%s\", grid[i]);\n        }\n\n        t = bfs(grid, w, h);\n        printf(\"%d\\n\", t);\n\n        for (int i = 0; i < h; i++) {\n            free(grid[i]);\n        }\n        free(grid);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}