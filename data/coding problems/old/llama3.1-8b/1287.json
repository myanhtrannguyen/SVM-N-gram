{
    "solution_id": "llama3.1-8b-1287",
    "problem_id": "p00858",
    "language": "Python",
    "solution": "```python\nimport sys\nimport math\nfrom collections import deque\n\ndef read_input():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        xs, ys = map(int, input().split())\n        xg, yg = map(int, input().split())\n        edges = []\n        for _ in range(n):\n            x1, y1, x2, y2 = map(int, input().split())\n            edges.append((x1, y1, x2, y2))\n        yield xs, ys, xg, yg, edges\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\ndef find_path(graph, start, end):\n    queue = deque([(start, [start])])\n    visited = set()\n    while queue:\n        (x, y), path = queue.popleft()\n        if (x, y) == end:\n            return path\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            for i, (x1, y1, x2, y2) in enumerate(graph):\n                if (x1 == nx and y1 == ny) or (x2 == nx and y2 == ny):\n                    if (nx, ny) not in visited:\n                        queue.append(((nx, ny), path + [(nx, ny)]))\n    return None\n\ndef find_shortest_path(graph, start, end):\n    path = find_path(graph, start, end)\n    if path is None:\n        return None\n    shortest_path = []\n    for i in range(len(path) - 1):\n        x1, y1 = path[i]\n        x2, y2 = path[i + 1]\n        shortest_path.append((x1, y1, x2, y2))\n    return shortest_path\n\ndef find_intersections(graph, path):\n    intersections = set()\n    for i in range(len(path) - 1):\n        x1, y1, x2, y2 = path[i]\n        x3, y3, x4, y4 = path[i + 1]\n        if x1 == x2:\n            if x3 == x4:\n                if (x1, y1) == (x3, y3) or (x1, y1) == (x4, y4):\n                    intersections.add((x1, y1))\n            elif (x1, y1) == (x3, y3) or (x1, y1) == (x4, y4):\n                intersections.add((x1, y1))\n        elif x3 == x4:\n            if (x3, y3) == (x1, y1) or (x3, y3) == (x2, y2):\n                intersections.add((x3, y3))\n        elif (x1, y1) == (x3, y3) or (x1, y1) == (x4, y4):\n            intersections.add((x1, y1))\n    return intersections\n\ndef main():\n    for xs, ys, xg, yg, edges in read_input():\n        graph = []\n        for x1, y1, x2, y2 in edges:\n            graph.append((x1, y1, x2, y2))\n            graph.append((x2, y2, x1, y1))\n        path = find_shortest_path(graph, (xs, ys), (xg, yg))\n        if path is None:\n            print(-1)\n        else:\n            intersections = find_intersections(graph, path)\n            for intersection in intersections:\n                print(*intersection)\n            print(0)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}