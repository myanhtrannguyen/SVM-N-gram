{
    "solution_id": "llama3.1-8b-161",
    "problem_id": "p00151",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nint maxConsecutiveOnes(const std::vector<std::string>& grid) {\n    int n = grid.size();\n    int maxCount = 0;\n\n    // Check horizontal\n    for (const auto& row : grid) {\n        int count = 0;\n        for (char c : row) {\n            if (c == '1') {\n                count++;\n                maxCount = std::max(maxCount, count);\n            } else {\n                count = 0;\n            }\n        }\n    }\n\n    // Check vertical\n    for (int j = 0; j < n; ++j) {\n        int count = 0;\n        for (int i = 0; i < n; ++i) {\n            if (grid[i][j] == '1') {\n                count++;\n                maxCount = std::max(maxCount, count);\n            } else {\n                count = 0;\n            }\n        }\n    }\n\n    // Check diagonal (top-left to bottom-right)\n    for (int i = 0; i < n; ++i) {\n        int count = 0;\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == '1') {\n                count++;\n                maxCount = std::max(maxCount, count);\n            } else {\n                count = 0;\n            }\n        }\n    }\n\n    // Check diagonal (bottom-left to top-right)\n    for (int i = n - 1; i >= 0; --i) {\n        int count = 0;\n        for (int j = 0; j < n; ++j) {\n            if (grid[i][j] == '1') {\n                count++;\n                maxCount = std::max(maxCount, count);\n            } else {\n                count = 0;\n            }\n        }\n    }\n\n    return maxCount;\n}\n\nint main() {\n    int n;\n    while (std::cin >> n && n != 0) {\n        std::vector<std::string> grid(n);\n        for (auto& row : grid) {\n            std::cin >> row;\n        }\n        std::cout << maxConsecutiveOnes(grid) << std::endl;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}