{
    "solution_id": "llama3.1-8b-1157",
    "problem_id": "p00826",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nstruct Point {\n    double x, y;\n};\n\nstruct Line {\n    Point p1, p2;\n    double slope, intercept;\n};\n\nbool onSegment(Point p, Point q, Point r) {\n    if (q.x <= std::max(p.x, r.x) && q.x >= std::min(p.x, r.x) &&\n        q.y <= std::max(p.y, r.y) && q.y >= std::min(p.y, r.y))\n        return true;\n    return false;\n}\n\ndouble distance(Point p1, Point p2) {\n    return std::sqrt(std::pow(p2.x - p1.x, 2) + std::pow(p2.y - p1.y, 2));\n}\n\nbool doIntersect(Line p, Line q) {\n    double d = (p.slope - q.slope);\n    if (d == 0) return false;\n    double m = p.intercept - q.intercept;\n    double x = (m / d);\n    double y = (p.slope * x + p.intercept);\n    Point p1 = {p.p1.x, p.p1.y};\n    Point p2 = {p.p2.x, p.p2.y};\n    Point q1 = {q.p1.x, q.p1.y};\n    Point q2 = {q.p2.x, q.p2.y};\n    if (onSegment({x, y}, p1, p2) || onSegment({x, y}, q1, q2)) return true;\n    return false;\n}\n\nbool checkTrap(std::vector<Line> lines) {\n    for (int i = 0; i < lines.size(); i++) {\n        for (int j = i + 1; j < lines.size(); j++) {\n            if (doIntersect(lines[i], lines[j])) return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    int t;\n    std::cin >> t;\n    while (t--) {\n        int n;\n        std::cin >> n;\n        std::vector<Line> lines;\n        for (int i = 0; i < n; i++) {\n            Point p1, p2;\n            std::cin >> p1.x >> p1.y >> p2.x >> p2.y;\n            Line l;\n            l.p1 = p1;\n            l.p2 = p2;\n            l.slope = (p2.y - p1.y) / (p2.x - p1.x);\n            l.intercept = p1.y - l.slope * p1.x;\n            lines.push_back(l);\n        }\n        if (checkTrap(lines)) std::cout << \"yes\" << std::endl;\n        else std::cout << \"no\" << std::endl;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}