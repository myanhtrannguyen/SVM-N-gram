{
    "solution_id": "llama3.1-8b-3913",
    "problem_id": "p02299",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n\nstruct Point {\n    int x, y;\n};\n\nbool onSegment(const Point& p, const Point& q, const Point& r) {\n    if (std::max(p.x, q.x) >= r.x && r.x >= std::min(p.x, q.x) &&\n        std::max(p.y, q.y) >= r.y && r.y >= std::min(p.y, q.y)) {\n        return true;\n    }\n    return false;\n}\n\nint orientation(const Point& p, const Point& q, const Point& r) {\n    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n    if (val == 0) return 0;\n    return (val > 0) ? 1 : 2;\n}\n\nbool doIntersect(const Point& p1, const Point& q1, const Point& p2, const Point& q2) {\n    int o1 = orientation(p1, q1, p2);\n    int o2 = orientation(p1, q1, q2);\n    int o3 = orientation(p2, q2, p1);\n    int o4 = orientation(p2, q2, q1);\n\n    if (o1 != o2 && o3 != o4) return true;\n\n    if (o1 == 0 && onSegment(p1, p2, q1)) return true;\n    if (o2 == 0 && onSegment(p1, q2, q1)) return true;\n    if (o3 == 0 && onSegment(p2, p1, q2)) return true;\n    if (o4 == 0 && onSegment(p2, q1, q2)) return true;\n\n    return false;\n}\n\nbool isPointInside(const std::vector<Point>& polygon, const Point& point) {\n    int n = polygon.size();\n    bool inside = false;\n    for (int i = 0; i < n; i++) {\n        Point p1 = polygon[i];\n        Point q1 = polygon[(i + 1) % n];\n        if (p1.y <= point.y && q1.y > point.y || p1.y > point.y && q1.y <= point.y) {\n            if (q1.x - p1.x != 0 && (point.y - p1.y) * (q1.x - p1.x) / (q1.y - p1.y) + p1.x < point.x) {\n                inside = !inside;\n            }\n        }\n    }\n    return inside;\n}\n\nbool isPointOnSegment(const std::vector<Point>& polygon, const Point& point) {\n    int n = polygon.size();\n    for (int i = 0; i < n; i++) {\n        Point p1 = polygon[i];\n        Point q1 = polygon[(i + 1) % n];\n        if (onSegment(p1, q1, point)) return true;\n    }\n    return false;\n}\n\nint main() {\n    int n;\n    std::cin >> n;\n    std::vector<Point> polygon(n);\n    for (int i = 0; i < n; i++) {\n        std::cin >> polygon[i].x >> polygon[i].y;\n    }\n    int q;\n    std::cin >> q;\n    while (q--) {\n        int x, y;\n        std::cin >> x >> y;\n        Point point = {x, y};\n        if (isPointInside(polygon, point)) std::cout << \"2\" << std::endl;\n        else if (isPointOnSegment(polygon, point)) std::cout << \"1\" << std::endl;\n        else {\n            for (int i = 0; i < n; i++) {\n                Point p1 = polygon[i];\n                Point q1 = polygon[(i + 1) % n];\n                Point p2 = polygon[(i + n - 1) % n];\n                Point q2 = polygon[(i + n) % n];\n                if (doIntersect(p1, q1, p2, q2) && onSegment(p1, q1, point) && onSegment(p2, q2, point)) {\n                    std::cout << \"1\" << std::endl;\n                    goto next_query;\n                }\n            }\n            std::cout << \"0\" << std::endl;\n        }\n        next_query:;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}