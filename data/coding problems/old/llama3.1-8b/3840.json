{
    "solution_id": "llama3.1-8b-3840",
    "problem_id": "p02281",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_NODES 25\n\ntypedef struct Node {\n    int id;\n    int left;\n    int right;\n} Node;\n\ntypedef struct Tree {\n    Node nodes[MAX_NODES];\n    int num_nodes;\n} Tree;\n\nvoid read_tree(Tree *tree) {\n    int i;\n    for (i = 0; i < tree->num_nodes; i++) {\n        scanf(\"%d %d %d\", &tree->nodes[i].id, &tree->nodes[i].left, &tree->nodes[i].right);\n    }\n}\n\nvoid preorder_walk(Tree *tree, int node_id, int *visited, int *result, int *result_index) {\n    if (node_id == -1) return;\n    if (visited[node_id] == 0) {\n        visited[node_id] = 1;\n        result[*result_index] = node_id;\n        (*result_index)++;\n        preorder_walk(tree, tree->nodes[node_id].left, visited, result, result_index);\n        preorder_walk(tree, tree->nodes[node_id].right, visited, result, result_index);\n    }\n}\n\nvoid inorder_walk(Tree *tree, int node_id, int *visited, int *result, int *result_index) {\n    if (node_id == -1) return;\n    if (visited[node_id] == 0) {\n        visited[node_id] = 1;\n        inorder_walk(tree, tree->nodes[node_id].left, visited, result, result_index);\n        result[*result_index] = node_id;\n        (*result_index)++;\n        inorder_walk(tree, tree->nodes[node_id].right, visited, result, result_index);\n    }\n}\n\nvoid postorder_walk(Tree *tree, int node_id, int *visited, int *result, int *result_index) {\n    if (node_id == -1) return;\n    if (visited[node_id] == 0) {\n        visited[node_id] = 1;\n        postorder_walk(tree, tree->nodes[node_id].left, visited, result, result_index);\n        postorder_walk(tree, tree->nodes[node_id].right, visited, result, result_index);\n        result[*result_index] = node_id;\n        (*result_index)++;\n    }\n}\n\nint main() {\n    Tree tree;\n    int n;\n    scanf(\"%d\", &n);\n    tree.num_nodes = n;\n    read_tree(&tree);\n\n    int visited[MAX_NODES] = {0};\n    int result[MAX_NODES];\n    int result_index = 0;\n\n    printf(\"Preorder\\n\");\n    preorder_walk(&tree, 0, visited, result, &result_index);\n    for (int i = 0; i < result_index; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Inorder\\n\");\n    result_index = 0;\n    inorder_walk(&tree, 0, visited, result, &result_index);\n    for (int i = 0; i < result_index; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"Postorder\\n\");\n    result_index = 0;\n    postorder_walk(&tree, 0, visited, result, &result_index);\n    for (int i = 0; i < result_index; i++) {\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}