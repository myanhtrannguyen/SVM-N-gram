{
    "solution_id": "llama3.1-8b-2493",
    "problem_id": "p03619",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define N 200000\n#define INF 1000000000\n\ntypedef struct {\n    int x, y;\n} Point;\n\nint cmpx(const void *a, const void *b) {\n    return ((Point *)a)->x - ((Point *)b)->x;\n}\n\nint cmpy(const void *a, const void *b) {\n    return ((Point *)a)->y - ((Point *)b)->y;\n}\n\nint dist(int x1, int y1, int x2, int y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n}\n\nint main() {\n    int n, i, x1, y1, x2, y2;\n    Point p[N + 1];\n    double ans;\n\n    scanf(\"%d %d %d %d\", &x1, &y1, &x2, &y2);\n    scanf(\"%d\", &n);\n    for (i = 1; i <= n; i++) {\n        scanf(\"%d %d\", &p[i].x, &p[i].y);\n    }\n\n    qsort(p + 1, n, sizeof(Point), cmpx);\n    qsort(p + 1, n, sizeof(Point), cmpy);\n\n    int j = 1;\n    for (i = 1; i <= n; i++) {\n        while (j <= n && p[j].x == p[i].x) {\n            j++;\n        }\n        for (int k = i + 1; k < j; k++) {\n            if (dist(p[i].x, p[i].y, p[k].x, p[k].y) <= 100 * 100) {\n                p[k].y = -1;\n            }\n        }\n        i = j - 1;\n    }\n\n    j = 1;\n    for (i = 1; i <= n; i++) {\n        while (j <= n && p[j].y == p[i].y) {\n            j++;\n        }\n        for (int k = i + 1; k < j; k++) {\n            if (dist(p[i].x, p[i].y, p[k].x, p[k].y) <= 100 * 100) {\n                p[k].x = -1;\n            }\n        }\n        i = j - 1;\n    }\n\n    int sx = -1, sy = -1;\n    for (i = 1; i <= n; i++) {\n        if (p[i].x == x1 && p[i].y == y1) {\n            sx = i;\n        }\n        if (p[i].x == x2 && p[i].y == y2) {\n            sy = i;\n        }\n    }\n\n    if (sx == -1 || sy == -1) {\n        printf(\"0.000000000000000000\\n\");\n        return 0;\n    }\n\n    double d = sqrt(dist(x1, y1, x2, y2));\n    int x = x1, y = y1;\n    while (x != x2 || y != y2) {\n        if (x != x2) {\n            int k = lower_bound(p + 1, p + n + 1, (Point){x2, y}, cmpx) - p;\n            if (k <= n && p[k].x == x2 && p[k].y == y) {\n                d += dist(x, y, x2, y2);\n                break;\n            }\n            if (p[k].x == x) {\n                d += 100 * sqrt(2);\n                y = p[k].y;\n            } else {\n                d += 100 * sqrt(2);\n                x = p[k].x;\n            }\n        } else {\n            int k = lower_bound(p + 1, p + n + 1, (Point){x, y2}, cmpy) - p;\n            if (k <= n && p[k].x == x && p[k].y == y2) {\n                d += dist(x, y, x2, y2);\n                break;\n            }\n            if (p[k].y == y) {\n                d += 100 * sqrt(2);\n                x = p[k].x;\n            } else {\n                d += 100 * sqrt(2);\n                y = p[k].y;\n            }\n        }\n    }\n\n    printf(\"%.12lf\\n\", d);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}