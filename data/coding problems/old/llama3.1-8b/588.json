{
    "solution_id": "llama3.1-8b-588",
    "problem_id": "p00684",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_LENGTH 100\n#define MAX_TOKENS 100\n#define MAX_DIGITS 10\n\ntypedef struct {\n    int real;\n    int imag;\n} complex;\n\nvoid tokenize(char *expression, char **tokens) {\n    int i = 0;\n    int j = 0;\n    while (expression[i] != '\\0') {\n        if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*') {\n            tokens[j] = (char *) malloc(MAX_LENGTH * sizeof(char));\n            strncpy(tokens[j], expression + i - 1, 1);\n            tokens[j][1] = '\\0';\n            j++;\n            i++;\n        } else if (expression[i] == 'i') {\n            tokens[j] = (char *) malloc(MAX_LENGTH * sizeof(char));\n            strncpy(tokens[j], expression + i, 1);\n            tokens[j][1] = '\\0';\n            j++;\n            i++;\n        } else {\n            int k = i;\n            while (expression[k] != '\\0' && isdigit(expression[k])) {\n                k++;\n            }\n            tokens[j] = (char *) malloc((k - i + 1) * sizeof(char));\n            strncpy(tokens[j], expression + i, k - i);\n            tokens[j][k - i] = '\\0';\n            j++;\n            i = k;\n        }\n    }\n    tokens[j] = (char *) malloc(MAX_LENGTH * sizeof(char));\n    tokens[j][0] = '\\0';\n}\n\ncomplex parse(char *expression) {\n    complex result;\n    result.real = 0;\n    result.imag = 0;\n    char *tokens[MAX_TOKENS];\n    tokenize(expression, tokens);\n    int i = 0;\n    while (tokens[i] != NULL) {\n        if (strcmp(tokens[i], \"i\") == 0) {\n            result.imag += 1;\n        } else if (strcmp(tokens[i], \"-i\") == 0) {\n            result.imag -= 1;\n        } else if (strcmp(tokens[i], \"+\") == 0 || strcmp(tokens[i], \"-\") == 0 || strcmp(tokens[i], \"*\") == 0) {\n            i++;\n            if (strcmp(tokens[i], \"+\") == 0) {\n                result.real += atoi(tokens[i - 1]);\n                result.imag += atoi(tokens[i + 1]);\n            } else if (strcmp(tokens[i], \"-\") == 0) {\n                result.real -= atoi(tokens[i - 1]);\n                result.imag -= atoi(tokens[i + 1]);\n            } else if (strcmp(tokens[i], \"*\") == 0) {\n                complex temp;\n                temp.real = atoi(tokens[i - 1]);\n                temp.imag = atoi(tokens[i + 1]);\n                complex temp2;\n                temp2.real = atoi(tokens[i - 2]);\n                temp2.imag = atoi(tokens[i - 1]);\n                result.real = temp.real * temp2.real - temp.imag * temp2.imag;\n                result.imag = temp.real * temp2.imag + temp.imag * temp2.real;\n            }\n            i += 2;\n        } else {\n            result.real += atoi(tokens[i]);\n        }\n        i++;\n    }\n    return result;\n}\n\nvoid print_complex(complex c) {\n    if (c.real == 0 && c.imag == 0) {\n        printf(\"0\");\n    } else if (c.real == 0) {\n        printf(\"%di\", c.imag);\n    } else if (c.imag == 0) {\n        printf(\"%d\", c.real);\n    } else if (c.real > 0) {\n        printf(\"%d+\", c.real);\n    } else {\n        printf(\"%d-\", -c.real);\n    }\n    if (c.imag > 0) {\n        printf(\"+%di\", c.imag);\n    } else {\n        printf(\"%di\", -c.imag);\n    }\n}\n\nint main() {\n    char expression[MAX_LENGTH];\n    while (fgets(expression, MAX_LENGTH, stdin) != NULL) {\n        expression[strcspn(expression, \"\\n\")] = 0;\n        complex result = parse(expression);\n        if (result.real > 10000 || result.real < -10000 || result.imag > 10000 || result.imag < -10000) {\n            printf(\"overflow\\n\");\n        } else {\n            print_complex(result);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}