{
    "solution_id": "llama3.1-8b-730",
    "problem_id": "p00719",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to;\n        int weight;\n        int horse;\n\n        public Edge(int to, int weight, int horse) {\n            this.to = to;\n            this.weight = weight;\n            this.horse = horse;\n        }\n    }\n\n    static class Node implements Comparable<Node> {\n        int id;\n        double time;\n\n        public Node(int id, double time) {\n            this.id = id;\n            this.time = time;\n        }\n\n        @Override\n        public int compareTo(Node o) {\n            return Double.compare(this.time, o.time);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        while (!Arrays.equals(input, new String[]{\"0\", \"0\", \"0\", \"0\", \"0\"})) {\n            int n = Integer.parseInt(input[0]);\n            int m = Integer.parseInt(input[1]);\n            int p = Integer.parseInt(input[2]);\n            int a = Integer.parseInt(input[3]) - 1;\n            int b = Integer.parseInt(input[4]) - 1;\n\n            int[] horses = new int[n];\n            input = br.readLine().split(\" \");\n            for (int i = 0; i < n; i++) {\n                horses[i] = Integer.parseInt(input[i]);\n            }\n\n            List<Edge>[] graph = new List[m];\n            for (int i = 0; i < m; i++) {\n                graph[i] = new ArrayList<>();\n            }\n\n            for (int i = 0; i < p; i++) {\n                input = br.readLine().split(\" \");\n                int x = Integer.parseInt(input[0]) - 1;\n                int y = Integer.parseInt(input[1]) - 1;\n                int z = Integer.parseInt(input[2]);\n                graph[x].add(new Edge(y, z, 0));\n                graph[y].add(new Edge(x, z, 0));\n            }\n\n            double[] dist = new double[m];\n            Arrays.fill(dist, Double.POSITIVE_INFINITY);\n            dist[a] = 0;\n\n            PriorityQueue<Node> pq = new PriorityQueue<>();\n            pq.offer(new Node(a, 0));\n\n            while (!pq.isEmpty()) {\n                Node node = pq.poll();\n                if (node.id == b) {\n                    System.out.println(String.format(\"%.3f\", node.time));\n                    break;\n                }\n                if (node.time > dist[node.id]) {\n                    continue;\n                }\n                for (Edge edge : graph[node.id]) {\n                    double newTime = node.time + (double) edge.weight / edge.horse;\n                    if (newTime < dist[edge.to]) {\n                        dist[edge.to] = newTime;\n                        pq.offer(new Node(edge.to, newTime));\n                    }\n                    if (horses[edge.to] > 0) {\n                        double newTime2 = node.time + (double) edge.weight / horses[edge.to];\n                        if (newTime2 < dist[edge.to]) {\n                            dist[edge.to] = newTime2;\n                            pq.offer(new Node(edge.to, newTime2));\n                            horses[edge.to]--;\n                        }\n                    }\n                }\n            } else {\n                System.out.println(\"Impossible\");\n            }\n\n            input = br.readLine().split(\" \");\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}