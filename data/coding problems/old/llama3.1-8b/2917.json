{
    "solution_id": "llama3.1-8b-2917",
    "problem_id": "p03725",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_H 800\n#define MAX_W 800\n#define MAX_K (MAX_H * MAX_W)\n\nint dx[] = {-1, 1, 0, 0};\nint dy[] = {0, 0, -1, 1};\n\nint bfs(int h, int w, int k, char grid[MAX_H][MAX_W]) {\n    int queue[MAX_H * MAX_W * 2];\n    int front = 0, rear = 0;\n    int visited[MAX_H][MAX_W];\n    int dist[MAX_H][MAX_W];\n    int sx, sy;\n\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            if (grid[i][j] == 'S') {\n                sx = i;\n                sy = j;\n                break;\n            }\n        }\n    }\n\n    memset(visited, 0, sizeof(visited));\n    memset(dist, 0x3f, sizeof(dist));\n    dist[sx][sy] = 0;\n    queue[rear++] = sx * w + sy;\n\n    while (front < rear) {\n        int x = queue[front] / w;\n        int y = queue[front] % w;\n        front++;\n\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n\n            if (nx >= 0 && nx < h && ny >= 0 && ny < w && !visited[nx][ny]) {\n                int ndist = dist[x][y] + 1;\n                int nqueue_idx = rear;\n\n                for (int j = 0; j < nqueue_idx; j++) {\n                    int qx = queue[j] / w;\n                    int qy = queue[j] % w;\n\n                    if (qx == nx && qy == ny) {\n                        ndist = std::min(ndist, dist[qx][qy]);\n                        break;\n                    }\n                }\n\n                if (ndist < dist[nx][ny]) {\n                    dist[nx][ny] = ndist;\n                    queue[rear++] = nx * w + ny;\n                }\n            }\n        }\n\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n\n            if (nx >= 0 && nx < h && ny >= 0 && ny < w && grid[nx][ny] == '#') {\n                int ndist = dist[x][y] + 1;\n                int nqueue_idx = rear;\n\n                for (int j = 0; j < nqueue_idx; j++) {\n                    int qx = queue[j] / w;\n                    int qy = queue[j] % w;\n\n                    if (qx == nx && qy == ny) {\n                        ndist = std::min(ndist, dist[qx][qy]);\n                        break;\n                    }\n                }\n\n                if (ndist < dist[nx][ny]) {\n                    dist[nx][ny] = ndist;\n                    queue[rear++] = nx * w + ny;\n                }\n            }\n        }\n\n        visited[x][y] = 1;\n    }\n\n    int min_dist = 0x3f3f3f3f;\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            if (grid[i][j] == '#' && dist[i][j] < min_dist) {\n                min_dist = dist[i][j];\n            }\n        }\n    }\n\n    return min_dist;\n}\n\nint main() {\n    int h, w, k;\n    char grid[MAX_H][MAX_W];\n\n    scanf(\"%d %d %d\", &h, &w, &k);\n    for (int i = 0; i < h; i++) {\n        scanf(\"%s\", grid[i]);\n    }\n\n    int ans = bfs(h, w, k, grid);\n    printf(\"%d\\n\", ans);\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}