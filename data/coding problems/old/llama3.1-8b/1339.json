{
    "solution_id": "llama3.1-8b-1339",
    "problem_id": "p00871",
    "language": "Python",
    "solution": "```python\nimport math\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nclass Command:\n    def __init__(self, name, args):\n        self.name = name\n        self.args = args\n\nclass Dataset:\n    def __init__(self):\n        self.commands = []\n        self.points = [Point(0, 0)]\n\n    def add_command(self, command):\n        self.commands.append(command)\n        if command.name == 'start':\n            self.points = [Point(command.args[0], command.args[1])]\n        elif command.name == 'line':\n            self.points.append(Point(command.args[0], command.args[1]))\n        elif command.name == 'arc':\n            self.points.append(self.arc(command.args[0], command.args[1], command.args[2]))\n        elif command.name == 'close':\n            self.points.append(self.points[0])\n\n    def arc(self, x, y, r):\n        angle = math.atan2(y - self.points[-1].y, x - self.points[-1].x)\n        theta = math.acos((self.points[-1].x - x)**2 + (self.points[-1].y - y)**2 / (2 * abs(r)))\n        if r < 0:\n            theta = -theta\n        return Point(x + r * math.cos(angle + theta), y + r * math.sin(angle + theta))\n\n    def calculate_mass(self):\n        mass = 0\n        for i in range(len(self.points) - 1):\n            dx = self.points[i+1].x - self.points[i].x\n            dy = self.points[i+1].y - self.points[i].y\n            length = math.sqrt(dx**2 + dy**2)\n            mass += length\n        return mass\n\n    def calculate_center_of_mass(self):\n        mass = self.calculate_mass()\n        x = 0\n        y = 0\n        for i in range(len(self.points) - 1):\n            dx = self.points[i+1].x - self.points[i].x\n            dy = self.points[i+1].y - self.points[i].y\n            length = math.sqrt(dx**2 + dy**2)\n            x += (self.points[i].x + self.points[i+1].x) * length / 2\n            y += (self.points[i].y + self.points[i+1].y) * length / 2\n        return Point(x / mass, y / mass)\n\n    def is_on_path(self, point):\n        for i in range(len(self.points) - 1):\n            dx = self.points[i+1].x - self.points[i].x\n            dy = self.points[i+1].y - self.points[i].y\n            length = math.sqrt(dx**2 + dy**2)\n            if (point.x - self.points[i].x) * dy - (point.y - self.points[i].y) * dx < 0:\n                return False\n        return True\n\ndef main():\n    datasets = []\n    while True:\n        command = input().split()\n        if command[0] == 'end':\n            break\n        dataset = Dataset()\n        while True:\n            if command[0] == 'start':\n                dataset.add_command(Command(command[0], [int(x) for x in command[1:]]))\n            elif command[0] == 'line':\n                dataset.add_command(Command(command[0], [int(x) for x in command[1:]]))\n            elif command[0] == 'arc':\n                dataset.add_command(Command(command[0], [int(x) for x in command[1:]]))\n            elif command[0] == 'close':\n                dataset.add_command(Command(command[0], []))\n                break\n            command = input().split()\n        datasets.append(dataset)\n\n    for dataset in datasets:\n        center_of_mass = dataset.calculate_center_of_mass()\n        if dataset.is_on_path(center_of_mass):\n            print(f\"{center_of_mass.x:.5f} {center_of_mass.y:.5f} +\")\n        else:\n            print(f\"{center_of_mass.x:.5f} {center_of_mass.y:.5f} -\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}