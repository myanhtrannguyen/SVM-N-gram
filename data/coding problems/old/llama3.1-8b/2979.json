{
    "solution_id": "llama3.1-8b-2979",
    "problem_id": "p01647",
    "language": "Python",
    "solution": "```python\nimport itertools\nimport math\n\n# Define the ranks and suits\nranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\nsuits = ['S', 'H', 'D', 'C']\n\n# Define the hand rankings\nhand_rankings = {\n    'Royal Flush': 10,\n    'Straight Flush': 9,\n    'Four of a Kind': 8,\n    'Full House': 7,\n    'Flush': 6,\n    'Straight': 5,\n    'Three of a Kind': 4,\n    'Two Pair': 3,\n    'One Pair': 2,\n    'High Card': 1\n}\n\n# Define the hand evaluation function\ndef evaluate_hand(hand):\n    # Sort the hand by rank\n    hand = sorted(hand, key=lambda x: ranks.index(x[1]))\n\n    # Check for flush\n    flush = len(set([card[0] for card in hand])) == 1\n\n    # Check for straight\n    straight = [ranks.index(hand[i][1]) for i in range(5)].sort() == list(range(ranks.index(hand[0][1]), ranks.index(hand[4][1]) + 1))\n\n    # Check for four of a kind\n    four_of_a_kind = len(set([card[1] for card in hand])) == 1\n\n    # Check for full house\n    full_house = len(set([card[1] for card in hand])) == 2\n\n    # Check for three of a kind\n    three_of_a_kind = len(set([card[1] for card in hand])) == 3\n\n    # Check for two pair\n    two_pair = len(set([card[1] for card in hand])) == 3\n\n    # Check for one pair\n    one_pair = len(set([card[1] for card in hand])) == 4\n\n    # Determine the hand ranking\n    if straight and flush:\n        return 'Royal Flush' if hand[0][1] == 'A' else 'Straight Flush'\n    elif four_of_a_kind:\n        return 'Four of a Kind'\n    elif full_house:\n        return 'Full House'\n    elif flush:\n        return 'Flush'\n    elif straight:\n        return 'Straight'\n    elif three_of_a_kind:\n        return 'Three of a Kind'\n    elif two_pair:\n        return 'Two Pair'\n    elif one_pair:\n        return 'One Pair'\n    else:\n        return 'High Card'\n\n# Define the function to calculate the probability of winning\ndef calculate_probability(your_hand, opponent_hand, community_cards):\n    # Generate all possible turn and river cards\n    remaining_cards = [(rank, suit) for rank in ranks for suit in suits if (rank, suit) not in your_hand and (rank, suit) not in opponent_hand and (rank, suit) not in community_cards]\n    possible_turns = [card for card in remaining_cards]\n    possible_rivers = [card for card in remaining_cards if card not in possible_turns]\n\n    # Initialize the number of wins\n    wins = 0\n\n    # Iterate over all possible turn and river cards\n    for turn in possible_turns:\n        for river in possible_rivers:\n            # Generate all possible hands\n            possible_hands = []\n            for i in range(5):\n                for j in range(5 - i):\n                    hand = your_hand + [turn] + [river] + list(itertools.combinations(community_cards, i)) + list(itertools.combinations(remaining_cards, j))\n                    possible_hands.append(hand)\n\n            # Evaluate the hands\n            for hand in possible_hands:\n                hand_ranking = evaluate_hand(hand)\n                if hand_ranking == evaluate_hand(your_hand + [turn] + [river] + list(itertools.combinations(community_cards, 5 - len(hand) + 5)) + list(itertools.combinations(remaining_cards, 0))):\n                    wins += 1\n\n    # Calculate the probability of winning\n    probability = wins / (len(possible_turns) * len(possible_rivers))\n    return probability\n\n# Read the input\nwhile True:\n    your_hand = input().split()\n    opponent_hand = input().split()\n    community_cards = input().split()\n    if community_cards[0] == '#':\n        break\n    your_hand = [(your_hand[0], your_hand[1]), (your_hand[2], your_hand[3])]\n    opponent_hand = [(opponent_hand[0], opponent_hand[1]), (opponent_hand[2], opponent_hand[3])]\n    community_cards = [(community_cards[0], community_cards[1]), (community_cards[2], community_cards[3]), (community_cards[4], community_cards[5])]\n\n    # Calculate and print the probability of winning\n    probability = calculate_probability(your_hand, opponent_hand, community_cards)\n    print(probability)\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}