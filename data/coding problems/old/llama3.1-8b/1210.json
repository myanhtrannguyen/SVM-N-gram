{
    "solution_id": "llama3.1-8b-1210",
    "problem_id": "p00839",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to;\n        char dir;\n\n        public Edge(int to, char dir) {\n            this.to = to;\n            this.dir = dir;\n        }\n    }\n\n    static class State {\n        int[] cars;\n        int[] pos;\n        int[] dist;\n        int[] prev;\n        int[] cost;\n        int[] parent;\n        int[] queue;\n        int front;\n        int rear;\n        int[] visited;\n\n        public State(int[] cars, int[] pos, int[] dist, int[] prev, int[] cost, int[] parent, int[] queue, int front, int rear, int[] visited) {\n            this.cars = cars;\n            this.pos = pos;\n            this.dist = dist;\n            this.prev = prev;\n            this.cost = cost;\n            this.parent = parent;\n            this.queue = queue;\n            this.front = front;\n            this.rear = rear;\n            this.visited = visited;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        int x = Integer.parseInt(input[0]);\n        int y = Integer.parseInt(input[1]);\n\n        List<Edge>[] adj = new List[x];\n        for (int i = 0; i < x; i++) {\n            adj[i] = new ArrayList<>();\n        }\n\n        for (int i = 0; i < y; i++) {\n            input = br.readLine().split(\" \");\n            int u = Integer.parseInt(input[0]);\n            int v = Integer.parseInt(input[1]);\n            char dir1 = input[2].charAt(0);\n            char dir2 = input[3].charAt(0);\n            adj[u].add(new Edge(v, dir1));\n            adj[v].add(new Edge(u, dir2));\n        }\n\n        int[][] cars = new int[x][];\n        int[][] pos = new int[x][];\n        for (int i = 0; i < x; i++) {\n            cars[i] = br.readLine().split(\"\").map(String::charAt).toArray(char[]::new);\n            pos[i] = new int[cars[i].length];\n            for (int j = 0; j < cars[i].length; j++) {\n                pos[i][j] = j;\n            }\n        }\n\n        int[][] dist = new int[x][x];\n        int[][] prev = new int[x][x];\n        int[][] cost = new int[x][x];\n        for (int i = 0; i < x; i++) {\n            for (int j = 0; j < x; j++) {\n                dist[i][j] = Integer.MAX_VALUE;\n                prev[i][j] = -1;\n                cost[i][j] = 0;\n            }\n        }\n\n        for (int i = 0; i < x; i++) {\n            for (int j = 0; j < cars[i].length; j++) {\n                for (int k = 0; k < cars[i].length; k++) {\n                    if (cars[i][j] == cars[i][k]) {\n                        dist[i][i] = Math.min(dist[i][i], Math.abs(j - k));\n                    }\n                }\n            }\n        }\n\n        for (int k = 0; k < x; k++) {\n            for (int i = 0; i < x; i++) {\n                for (int j = 0; j < x; j++) {\n                    if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                        dist[i][j] = dist[i][k] + dist[k][j];\n                        prev[i][j] = k;\n                        cost[i][j] = dist[i][j];\n                    }\n                }\n            }\n        }\n\n        int[] queue = new int[x * x];\n        int front = 0;\n        int rear = 0;\n        int[] visited = new int[x * x];\n        for (int i = 0; i < x; i++) {\n            for (int j = 0; j < x; j++) {\n                if (i == j) {\n                    visited[i * x + j] = 1;\n                    queue[rear++] = i * x + j;\n                }\n            }\n        }\n\n        int[] parent = new int[x * x];\n        int[] costArr = new int[x * x];\n        for (int i = 0; i < x * x; i++) {\n            costArr[i] = cost[i / x][i % x];\n        }\n\n        while (front < rear) {\n            int u = queue[front++];\n            int[] carsU = cars[u / x];\n            int[] posU = pos[u / x];\n            int[] distU = dist[u / x];\n            int[] prevU = prev[u / x];\n            int[] costU = cost[u / x];\n            int[] parentU = parent;\n            int[] costArrU = costArr;\n\n            for (Edge e : adj[u / x]) {\n                int v = e.to;\n                int[] carsV = cars[v];\n                int[] posV = pos[v];\n                int[] distV = dist[v];\n                int[] prevV = prev[v];\n                int[] costV = cost[v];\n                int[] parentV = parent;\n                int[] costArrV = costArr;\n\n                if (visited[v * x + u % x] == 0) {\n                    visited[v * x + u % x] = 1;\n                    queue[rear++] = v * x + u % x;\n                    parent[v * x + u % x] = u;\n                    costArr[v * x + u % x] = costArrU[u % x] + costV[u % x];\n                }\n            }\n        }\n\n        int minCost = Integer.MAX_VALUE;\n        for (int i = 0; i < x; i++) {\n            for (int j = 0; j < x; j++) {\n                if (i != j) {\n                    minCost = Math.min(minCost, costArr[i * x + j]);\n                }\n            }\n        }\n\n        System.out.println(minCost);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}