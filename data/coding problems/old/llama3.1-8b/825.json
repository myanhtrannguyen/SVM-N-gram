{
    "solution_id": "llama3.1-8b-825",
    "problem_id": "p00743",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cmath>\n\nusing namespace std;\n\nstruct City {\n    int index;\n    vector<pair<int, int>> roads;\n};\n\nstruct Road {\n    int to;\n    int distance;\n    int speed;\n};\n\nstruct State {\n    int city;\n    int speed;\n    double time;\n};\n\nstruct CompareStates {\n    bool operator()(const State& a, const State& b) {\n        return a.time > b.time;\n    }\n};\n\ndouble dijkstra(int n, int s, int g, vector<City>& cities, vector<Road>& roads) {\n    vector<vector<pair<int, double>>> times(n);\n    for (int i = 0; i < n; i++) {\n        times[i].push_back({i, 0});\n    }\n\n    priority_queue<State, vector<State>, CompareStates> pq;\n    pq.push({s, 1, 0});\n\n    while (!pq.empty()) {\n        State state = pq.top();\n        pq.pop();\n\n        if (state.city == g) {\n            return state.time;\n        }\n\n        for (const auto& road : cities[state.city].roads) {\n            int to = road.first;\n            int distance = road.second;\n            int speed = road.third;\n\n            double time = state.time + distance / speed;\n\n            for (int i = max(1, state.speed - 1); i <= state.speed + 1; i++) {\n                if (i == state.speed) continue;\n                if (i > speed || i < 1) continue;\n\n                int newSpeed = i;\n                double newTime = time + (newSpeed - state.speed) * 1.0 / 1.0;\n\n                if (newTime < times[to][newSpeed].second) {\n                    times[to][newSpeed].second = newTime;\n                    pq.push({to, newSpeed, newTime});\n                }\n            }\n        }\n    }\n\n    return numeric_limits<double>::infinity();\n}\n\nint main() {\n    int n, m;\n    while (cin >> n >> m) {\n        if (n == 0 && m == 0) break;\n\n        int s, g;\n        cin >> s >> g;\n        s--; g--;\n\n        vector<City> cities(n);\n        for (int i = 0; i < n; i++) {\n            cities[i].index = i;\n        }\n\n        vector<Road> roads;\n        for (int i = 0; i < m; i++) {\n            int x, y, d, c;\n            cin >> x >> y >> d >> c;\n            x--; y--;\n            cities[x].roads.push_back({y, d, c});\n            cities[y].roads.push_back({x, d, c});\n            roads.push_back({x, y, d, c});\n        }\n\n        double time = dijkstra(n, s, g, cities, roads);\n        if (time == numeric_limits<double>::infinity()) {\n            cout << \"unreachable\" << endl;\n        } else {\n            cout << fixed << setprecision(5) << time << endl;\n        }\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}