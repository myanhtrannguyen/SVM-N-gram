{
    "solution_id": "llama3.1-8b-1048",
    "problem_id": "p00799",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_GUARDS 100\n#define MAX_PATTERN 50\n#define MAX_DURATION 10080\n\ntypedef struct {\n    int id;\n    int pattern[MAX_PATTERN * 2];\n    int pattern_index;\n    int charging_time;\n    int waiting_time;\n} Guard;\n\nint compare_guards(const void *a, const void *b) {\n    Guard *g1 = (Guard *)a;\n    Guard *g2 = (Guard *)b;\n    return g1->pattern_index - g2->pattern_index;\n}\n\nint main() {\n    int num_data_sets;\n    scanf(\"%d\", &num_data_sets);\n\n    for (int data_set = 0; data_set < num_data_sets; data_set++) {\n        int num_guards, duration;\n        scanf(\"%d %d\", &num_guards, &duration);\n\n        Guard guards[MAX_GUARDS];\n        for (int i = 0; i < num_guards; i++) {\n            scanf(\"%d\", &guards[i].id);\n            for (int j = 0; j < MAX_PATTERN * 2; j++) {\n                scanf(\"%d\", &guards[i].pattern[j]);\n                if (guards[i].pattern[j] == 0) {\n                    break;\n                }\n            }\n            guards[i].pattern_index = 0;\n            guards[i].charging_time = 0;\n            guards[i].waiting_time = 0;\n        }\n\n        int current_time = 0;\n        while (current_time < duration) {\n            for (int i = 0; i < num_guards; i++) {\n                if (guards[i].pattern_index < MAX_PATTERN * 2) {\n                    if (guards[i].pattern[guards[i].pattern_index] == 0) {\n                        guards[i].pattern_index++;\n                        continue;\n                    }\n\n                    if (guards[i].pattern[guards[i].pattern_index] > 0) {\n                        guards[i].charging_time = guards[i].pattern[guards[i].pattern_index];\n                        guards[i].pattern_index++;\n                    } else {\n                        guards[i].charging_time = guards[i].pattern[guards[i].pattern_index - 1];\n                        guards[i].pattern_index += 2;\n                    }\n\n                    if (current_time + guards[i].charging_time > duration) {\n                        guards[i].waiting_time += duration - current_time;\n                        current_time = duration;\n                    } else {\n                        current_time += guards[i].charging_time;\n                    }\n                }\n            }\n\n            qsort(guards, num_guards, sizeof(Guard), compare_guards);\n\n            int charger_available = 0;\n            for (int i = 0; i < num_guards; i++) {\n                if (guards[i].pattern_index < MAX_PATTERN * 2) {\n                    if (guards[i].pattern[guards[i].pattern_index] > 0) {\n                        guards[i].pattern_index++;\n                        charger_available = 1;\n                        break;\n                    }\n                }\n            }\n\n            if (charger_available) {\n                for (int i = 0; i < num_guards; i++) {\n                    if (guards[i].pattern_index < MAX_PATTERN * 2) {\n                        if (guards[i].pattern[guards[i].pattern_index] > 0) {\n                            guards[i].pattern_index++;\n                        } else {\n                            guards[i].pattern_index += 2;\n                        }\n                    }\n                }\n            } else {\n                for (int i = 0; i < num_guards; i++) {\n                    if (guards[i].pattern_index < MAX_PATTERN * 2) {\n                        if (guards[i].pattern[guards[i].pattern_index] > 0) {\n                            guards[i].waiting_time += current_time - guards[i].pattern[guards[i].pattern_index - 1];\n                            guards[i].pattern_index++;\n                        } else {\n                            guards[i].waiting_time += current_time - guards[i].pattern[guards[i].pattern_index - 1];\n                            guards[i].pattern_index += 2;\n                        }\n                    }\n                }\n            }\n        }\n\n        int total_waiting_time = 0;\n        for (int i = 0; i < num_guards; i++) {\n            total_waiting_time += guards[i].waiting_time;\n        }\n\n        printf(\"%d\\n\", total_waiting_time);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}