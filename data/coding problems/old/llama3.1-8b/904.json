{
    "solution_id": "llama3.1-8b-904",
    "problem_id": "p00763",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <limits.h>\n\n#define MAX_N 100\n#define MAX_M 10000\n#define MAX_C 20\n#define MAX_P 50\n\ntypedef struct {\n    int x, y, d, c;\n} Line;\n\ntypedef struct {\n    int p, q[MAX_P], r[MAX_P];\n} Company;\n\ntypedef struct {\n    int dist[MAX_N], prev[MAX_N];\n    Company fare[MAX_C];\n} Graph;\n\nvoid dijkstra(Graph *g, int s, int g) {\n    for (int i = 0; i < g->dist[0]; i++) {\n        g->dist[i] = INT_MAX;\n        g->prev[i] = -1;\n    }\n    g->dist[s] = 0;\n\n    int queue[MAX_N];\n    int front = 0, rear = 0;\n    queue[rear++] = s;\n\n    while (front < rear) {\n        int u = queue[front++];\n        for (int i = 0; i < g->dist[0]; i++) {\n            if (g->dist[i] == INT_MAX) continue;\n            if (g->fare[g->dist[i]].q[g->fare[g->dist[i]].p - 1] + 1 < g->fare[i].q[g->fare[i].p - 1]) {\n                g->dist[i] = INT_MAX;\n                g->prev[i] = -1;\n            } else if (g->fare[g->dist[i]].q[g->fare[g->dist[i]].p - 1] + 1 == g->fare[i].q[g->fare[i].p - 1]) {\n                if (g->dist[i] > g->dist[u] + g->fare[g->dist[u]].r[g->fare[g->dist[u]].p - 1]) {\n                    g->dist[i] = g->dist[u] + g->fare[g->dist[u]].r[g->fare[g->dist[u]].p - 1];\n                    g->prev[i] = u;\n                }\n            } else {\n                if (g->dist[i] > g->dist[u] + g->fare[g->dist[u]].r[g->fare[g->dist[u]].p - 1] + g->fare[i].r[0]) {\n                    g->dist[i] = g->dist[u] + g->fare[g->dist[u]].r[g->fare[g->dist[u]].p - 1] + g->fare[i].r[0];\n                    g->prev[i] = u;\n                }\n            }\n        }\n        for (int i = 0; i < g->dist[0]; i++) {\n            if (g->dist[i] != INT_MAX && g->prev[i] != -1) {\n                queue[rear++] = i;\n            }\n        }\n    }\n}\n\nint main() {\n    int n, m, c, s, g;\n    scanf(\"%d %d %d %d %d\", &n, &m, &c, &s, &g);\n    s--; g--;\n\n    Graph g;\n    g.dist[0] = n;\n    for (int i = 0; i < c; i++) {\n        g.fare[i].p = 0;\n        g.fare[i].q[0] = 0;\n        g.fare[i].r[0] = 0;\n    }\n\n    Line lines[MAX_M];\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d %d %d %d\", &lines[i].x, &lines[i].y, &lines[i].d, &lines[i].c);\n        lines[i].x--; lines[i].y--;\n    }\n\n    for (int i = 0; i < c; i++) {\n        int p;\n        scanf(\"%d\", &p);\n        for (int j = 0; j < p; j++) {\n            scanf(\"%d\", &g.fare[i].q[j]);\n        }\n        for (int j = 0; j < p; j++) {\n            scanf(\"%d\", &g.fare[i].r[j]);\n        }\n        g.fare[i].p = p;\n    }\n\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < c; j++) {\n            if (lines[i].c == j) {\n                for (int k = 0; k < g.fare[j].p; k++) {\n                    if (lines[i].d <= g.fare[j].q[k]) {\n                        g.fare[j].r[k] = g.fare[j].r[k];\n                        break;\n                    } else {\n                        g.fare[j].r[k] = g.fare[j].r[k] + (lines[i].d - g.fare[j].q[k]) / (g.fare[j].q[k] == 0 ? 1 : (g.fare[j].q[k] - g.fare[j].q[k - 1]));\n                    }\n                }\n            }\n        }\n    }\n\n    dijkstra(&g, s, g);\n\n    if (g.dist[g] == INT_MAX) {\n        printf(\"-1\\n\");\n    } else {\n        printf(\"%d\\n\", g.dist[g]);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}