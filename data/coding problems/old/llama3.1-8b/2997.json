{
    "solution_id": "llama3.1-8b-2997",
    "problem_id": "p01652",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Glyph {\n    char c;\n    vector<vector<char>> bitmap;\n};\n\nstruct Sequence {\n    vector<vector<char>> bitmap;\n    bool flipped;\n};\n\nbool isBlack(char c) {\n    return c == '*';\n}\n\nbool isSameBitmap(const vector<vector<char>>& bitmap1, const vector<vector<char>>& bitmap2) {\n    int n = bitmap1.size();\n    int m = bitmap1[0].size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (isBlack(bitmap1[i][j]) != isBlack(bitmap2[i][j])) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nbool isFlipped(const vector<vector<char>>& bitmap) {\n    int n = bitmap.size();\n    int m = bitmap[0].size();\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (isBlack(bitmap[i][j]) != isBlack(bitmap[n - 1 - i][m - 1 - j])) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\nbool isSameGlyph(const Glyph& glyph1, const Glyph& glyph2) {\n    return isSameBitmap(glyph1.bitmap, glyph2.bitmap);\n}\n\nbool isSameSequence(const Sequence& seq1, const Sequence& seq2) {\n    return isSameBitmap(seq1.bitmap, seq2.bitmap);\n}\n\nchar getGlyph(char c, const vector<Glyph>& glyphs) {\n    for (const auto& glyph : glyphs) {\n        if (glyph.c == c) {\n            return glyph.c;\n        }\n    }\n    return ' ';\n}\n\nchar getFlippedGlyph(char c, const vector<Glyph>& glyphs) {\n    for (const auto& glyph : glyphs) {\n        if (glyph.c == c) {\n            return glyph.c;\n        }\n    }\n    return ' ';\n}\n\nstring transliterate(const Sequence& seq, const vector<Glyph>& glyphs) {\n    string result;\n    for (int i = 0; i < seq.bitmap.size(); i++) {\n        for (int j = 0; j < seq.bitmap[0].size(); j++) {\n            if (isBlack(seq.bitmap[i][j])) {\n                if (i == 0 || i == seq.bitmap.size() - 1 || j == 0 || j == seq.bitmap[0].size() - 1) {\n                    result += '[';\n                }\n                if (seq.flipped) {\n                    result += getFlippedGlyph(seq.bitmap[i][j], glyphs);\n                } else {\n                    result += getGlyph(seq.bitmap[i][j], glyphs);\n                }\n                if (i == seq.bitmap.size() - 1 && j == seq.bitmap[0].size() - 1) {\n                    result += ']';\n                }\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<Glyph> glyphs(n);\n    for (int i = 0; i < n; i++) {\n        cin >> glyphs[i].c;\n        int h, w;\n        cin >> h >> w;\n        glyphs[i].bitmap.resize(h);\n        for (int j = 0; j < h; j++) {\n            glyphs[i].bitmap[j].resize(w);\n            for (int k = 0; k < w; k++) {\n                cin >> glyphs[i].bitmap[j][k];\n            }\n        }\n    }\n    vector<Sequence> sequences(m);\n    for (int i = 0; i < m; i++) {\n        int h, w;\n        cin >> h >> w;\n        sequences[i].bitmap.resize(h);\n        for (int j = 0; j < h; j++) {\n            sequences[i].bitmap[j].resize(w);\n            for (int k = 0; k < w; k++) {\n                cin >> sequences[i].bitmap[j][k];\n            }\n        }\n        sequences[i].flipped = isFlipped(sequences[i].bitmap);\n    }\n    for (int i = 0; i < m; i++) {\n        cout << transliterate(sequences[i], glyphs) << endl;\n    }\n    cout << \"#\" << endl;\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}