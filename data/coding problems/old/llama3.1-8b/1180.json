{
    "solution_id": "llama3.1-8b-1180",
    "problem_id": "p00832",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX 3\n#define MAXN 27\n\nint arr[MAXN][MAX][MAX];\nint top[MAX][MAX];\nint front[MAX][MAX];\nint right[MAX][MAX];\nint count = 0;\nint possible[MAXN][MAX][MAX];\n\nvoid dfs(int x, int y, int z) {\n    if (x == 3) {\n        int sum = 0;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                sum += right[i][j];\n            }\n        }\n        if (count == 0 || sum != right[0][0] + right[1][1] + right[2][2]) {\n            right[0][0] = right[1][1] = right[2][2] = sum;\n            count++;\n        }\n        return;\n    }\n    for (int i = 1; i <= 6; i++) {\n        if (possible[x][y][z] & (1 << (i - 1))) {\n            arr[x][y][z] = i;\n            if (x == 0) {\n                top[y][z] = i;\n            } else if (y == 0) {\n                front[x][z] = i;\n            }\n            possible[x][y][z] &= ~(1 << (i - 1));\n            if (x == 0) {\n                if (front[x + 1][z] != 0 && front[x + 1][z] + i != 7) {\n                    continue;\n                }\n                if (front[x + 1][z] == 0) {\n                    possible[x + 1][z][z] |= 1 << (front[x + 1][z] = 7 - i);\n                }\n            } else if (y == 0) {\n                if (top[x][z + 1] != 0 && top[x][z + 1] + i != 7) {\n                    continue;\n                }\n                if (top[x][z + 1] == 0) {\n                    possible[x][z + 1][z + 1] |= 1 << (top[x][z + 1] = 7 - i);\n                }\n            }\n            dfs(x + 1, y, z);\n            if (x == 0) {\n                if (front[x + 1][z] != 0 && front[x + 1][z] + i != 7) {\n                    continue;\n                }\n                if (front[x + 1][z] == 0) {\n                    possible[x + 1][z][z] &= ~(1 << (front[x + 1][z] = 7 - i));\n                }\n            } else if (y == 0) {\n                if (top[x][z + 1] != 0 && top[x][z + 1] + i != 7) {\n                    continue;\n                }\n                if (top[x][z + 1] == 0) {\n                    possible[x][z + 1][z + 1] &= ~(1 << (top[x][z + 1] = 7 - i));\n                }\n            }\n            arr[x][y][z] = 0;\n            if (x == 0) {\n                top[y][z] = 0;\n            } else if (y == 0) {\n                front[x][z] = 0;\n            }\n            if (x == 0) {\n                if (front[x + 1][z] == 0) {\n                    possible[x + 1][z][z] &= ~(1 << (front[x + 1][z] = 7 - i));\n                }\n            } else if (y == 0) {\n                if (top[x][z + 1] == 0) {\n                    possible[x][z + 1][z + 1] &= ~(1 << (top[x][z + 1] = 7 - i));\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    while (n--) {\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                scanf(\"%d\", &top[i][j]);\n                for (int k = 0; k < 3; k++) {\n                    scanf(\"%d\", &front[i][k]);\n                }\n            }\n        }\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                for (int k = 0; k < 3; k++) {\n                    possible[i][j][k] = 0x3f;\n                }\n            }\n        }\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (front[i][j] != 0) {\n                    possible[i][j][j] |= 1 << (front[i][j] - 1);\n                }\n            }\n        }\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (top[i][j] != 0) {\n                    possible[i][j][j] |= 1 << (top[i][j] - 1);\n                }\n            }\n        }\n        count = 0;\n        dfs(0, 0, 0);\n        if (count == 0) {\n            printf(\"0\\n\");\n        } else {\n            for (int i = 0; i < count; i++) {\n                for (int j = 0; j < 3; j++) {\n                    for (int k = 0; k < 3; k++) {\n                        right[j][k] = 0;\n                    }\n                }\n                for (int j = 0; j < 3; j++) {\n                    for (int k = 0; k < 3; k++) {\n                        if (arr[j][k][2] != 0) {\n                            right[j][k] = arr[j][k][2];\n                        }\n                    }\n                }\n                printf(\"%d \", right[0][0] + right[1][1] + right[2][2]);\n            }\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}