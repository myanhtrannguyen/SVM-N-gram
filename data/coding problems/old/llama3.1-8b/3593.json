{
    "solution_id": "llama3.1-8b-3593",
    "problem_id": "p02089",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Query {\n    int type, x, s, t;\n};\n\nstruct Node {\n    long long sum, add, mul;\n};\n\nconst int N = 2e5 + 5;\n\nint n, q, l, r;\nlong long a[N];\nNode tree[N * 4];\nQuery queries[N];\n\nvoid pushup(int u) {\n    tree[u].sum = tree[u * 2].sum + tree[u * 2 + 1].sum;\n}\n\nvoid pushdown(int u) {\n    if (tree[u].add) {\n        tree[u * 2].add += tree[u].add;\n        tree[u * 2 + 1].add += tree[u].add;\n        tree[u * 2].sum += (long long)tree[u * 2].mul * tree[u].add;\n        tree[u * 2 + 1].sum += (long long)tree[u * 2 + 1].mul * tree[u].add;\n        tree[u].add = 0;\n    }\n}\n\nvoid update(int u, int l, int r, int x, long long s, long long t) {\n    if (l == r) {\n        tree[u].sum = (long long)tree[u].mul * (a[x] + s);\n        tree[u].add = s;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    pushdown(u);\n    if (x <= mid) update(u * 2, l, mid, x, s, t);\n    else update(u * 2 + 1, mid + 1, r, x, s, t);\n    pushup(u);\n}\n\nvoid update(int x, long long s, long long t) {\n    update(1, 1, n, x, s, t);\n}\n\nlong long query(int u, int l, int r, int L, int R) {\n    if (L <= l && r <= R) return tree[u].sum;\n    int mid = (l + r) >> 1;\n    pushdown(u);\n    long long res = 0;\n    if (L <= mid) res += query(u * 2, l, mid, L, R);\n    if (R > mid) res += query(u * 2 + 1, mid + 1, r, L, R);\n    return res;\n}\n\nlong long query(int L, int R) {\n    return query(1, 1, n, L, R);\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cin >> n >> q >> l >> r;\n    for (int i = 1; i <= n; i++) cin >> a[i];\n    for (int i = 1; i <= q; i++) {\n        cin >> queries[i].type >> queries[i].x >> queries[i].s >> queries[i].t;\n        update(queries[i].x, queries[i].s, queries[i].t);\n    }\n    for (int i = 1; i <= n; i++) {\n        a[i] += (long long)tree[1].mul * tree[1].add;\n    }\n    sort(a + 1, a + n + 1);\n    int p = lower_bound(a + 1, a + n + 1, l) - a;\n    int q = upper_bound(a + 1, a + n + 1, r) - a;\n    long long ans = query(p, q);\n    cout << ans << endl;\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}