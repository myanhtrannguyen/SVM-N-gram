{
    "solution_id": "llama3.1-8b-3858",
    "problem_id": "p02285",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n    Node parent;\n\n    public Node(int key) {\n        this.key = key;\n        this.left = null;\n        this.right = null;\n        this.parent = null;\n    }\n}\n\nclass BinarySearchTree {\n    Node root;\n\n    public BinarySearchTree() {\n        this.root = null;\n    }\n\n    public void insert(int key) {\n        Node newNode = new Node(key);\n        if (root == null) {\n            root = newNode;\n        } else {\n            insertNode(root, newNode);\n        }\n    }\n\n    private void insertNode(Node current, Node newNode) {\n        if (newNode.key < current.key) {\n            if (current.left == null) {\n                current.left = newNode;\n                newNode.parent = current;\n            } else {\n                insertNode(current.left, newNode);\n            }\n        } else {\n            if (current.right == null) {\n                current.right = newNode;\n                newNode.parent = current;\n            } else {\n                insertNode(current.right, newNode);\n            }\n        }\n    }\n\n    public boolean find(int key) {\n        return findNode(root, key) != null;\n    }\n\n    private Node findNode(Node current, int key) {\n        if (current == null) {\n            return null;\n        }\n        if (current.key == key) {\n            return current;\n        }\n        if (key < current.key) {\n            return findNode(current.left, key);\n        } else {\n            return findNode(current.right, key);\n        }\n    }\n\n    public void delete(int key) {\n        deleteNode(root, key);\n    }\n\n    private Node deleteNode(Node current, int key) {\n        if (current == null) {\n            return null;\n        }\n        if (key < current.key) {\n            current.left = deleteNode(current.left, key);\n        } else if (key > current.key) {\n            current.right = deleteNode(current.right, key);\n        } else {\n            if (current.left == null) {\n                return current.right;\n            } else if (current.right == null) {\n                return current.left;\n            } else {\n                Node successor = findMin(current.right);\n                current.key = successor.key;\n                current.right = deleteNode(current.right, successor.key);\n            }\n        }\n        return current;\n    }\n\n    private Node findMin(Node current) {\n        while (current.left != null) {\n            current = current.left;\n        }\n        return current;\n    }\n\n    public void printInorder() {\n        printInorder(root);\n    }\n\n    private void printInorder(Node current) {\n        if (current != null) {\n            printInorder(current.left);\n            System.out.print(current.key + \" \");\n            printInorder(current.right);\n        }\n    }\n\n    public void printPreorder() {\n        printPreorder(root);\n    }\n\n    private void printPreorder(Node current) {\n        if (current != null) {\n            System.out.print(current.key + \" \");\n            printPreorder(current.left);\n            printPreorder(current.right);\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        BinarySearchTree bst = new BinarySearchTree();\n        for (int i = 0; i < m; i++) {\n            String operation = scanner.next();\n            if (operation.equals(\"insert\")) {\n                int key = scanner.nextInt();\n                bst.insert(key);\n            } else if (operation.equals(\"find\")) {\n                int key = scanner.nextInt();\n                if (bst.find(key)) {\n                    System.out.println(\"yes\");\n                } else {\n                    System.out.println(\"no\");\n                }\n            } else if (operation.equals(\"delete\")) {\n                int key = scanner.nextInt();\n                bst.delete(key);\n            } else if (operation.equals(\"print\")) {\n                System.out.print(\"inorder: \");\n                bst.printInorder();\n                System.out.println();\n                System.out.print(\"preorder: \");\n                bst.printPreorder();\n                System.out.println();\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}