{
    "solution_id": "llama3.1-8b-861",
    "problem_id": "p00752",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n};\n\nstruct Line {\n    Point p1, p2;\n};\n\ndouble distance(const Point& p1, const Point& p2) {\n    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));\n}\n\ndouble intersect(const Line& l1, const Line& l2) {\n    double x1 = l1.p1.x, y1 = l1.p1.y;\n    double x2 = l1.p2.x, y2 = l1.p2.y;\n    double x3 = l2.p1.x, y3 = l2.p1.y;\n    double x4 = l2.p2.x, y4 = l2.p2.y;\n\n    double denom = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (abs(denom) < 1e-6) return -1; // lines are parallel\n\n    double t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / denom;\n    double u = -((x1 - x2) * (y1 - y3) - (y1 - y2) * (x1 - x3)) / denom;\n\n    return t;\n}\n\nbool is_intersect(const Line& l1, const Line& l2) {\n    double t = intersect(l1, l2);\n    return t >= 0 && t <= 1;\n}\n\nbool is_reflect(const Line& l1, const Line& l2, const Point& p) {\n    double t = intersect(l1, l2);\n    if (t < 0 || t > 1) return false;\n\n    double x = l1.p1.x + t * (l1.p2.x - l1.p1.x);\n    double y = l1.p1.y + t * (l1.p2.y - l1.p1.y);\n\n    double dx = x - p.x;\n    double dy = y - p.y;\n    return abs(dx) < 1e-3 && abs(dy) < 1e-3;\n}\n\ndouble solve(int n, vector<Line>& mirrors, Point target, Point laser) {\n    vector<Point> points;\n    points.push_back(laser);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i != j) {\n                if (is_intersect(mirrors[i], mirrors[j])) {\n                    points.push_back({(mirrors[i].p1.x + mirrors[i].p2.x + mirrors[j].p1.x + mirrors[j].p2.x) / 4,\n                                        (mirrors[i].p1.y + mirrors[i].p2.y + mirrors[j].p1.y + mirrors[j].p2.y) / 4});\n                }\n            }\n        }\n    }\n\n    points.push_back(target);\n\n    double min_distance = 1e9;\n    for (int i = 0; i < points.size() - 1; i++) {\n        min_distance = min(min_distance, distance(points[i], points[i + 1]));\n    }\n\n    return min_distance;\n}\n\nint main() {\n    int n;\n    while (cin >> n) {\n        if (n == 0) break;\n\n        vector<Line> mirrors(n);\n        for (int i = 0; i < n; i++) {\n            cin >> mirrors[i].p1.x >> mirrors[i].p1.y >> mirrors[i].p2.x >> mirrors[i].p2.y;\n        }\n\n        Point target;\n        cin >> target.x >> target.y;\n\n        Point laser;\n        cin >> laser.x >> laser.y;\n\n        cout << fixed << setprecision(9) << solve(n, mirrors, target, laser) << endl;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}