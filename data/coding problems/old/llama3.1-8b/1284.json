{
    "solution_id": "llama3.1-8b-1284",
    "problem_id": "p00858",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAXN 200\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    Point p1, p2;\n} Line;\n\ntypedef struct {\n    int x, y;\n    int id;\n} Node;\n\ntypedef struct {\n    int x, y;\n} Edge;\n\ntypedef struct {\n    int n, m;\n    Line lines[MAXN];\n    Node nodes[MAXN];\n    Edge edges[MAXN];\n} Graph;\n\nvoid read_input(Graph *g) {\n    int n, i, j;\n    scanf(\"%d\", &n);\n    g->n = n;\n    for (i = 0; i < n; i++) {\n        scanf(\"%d %d\", &g->lines[i].p1.x, &g->lines[i].p1.y);\n        scanf(\"%d %d\", &g->lines[i].p2.x, &g->lines[i].p2.y);\n    }\n    scanf(\"%d %d\", &g->nodes[0].x, &g->nodes[0].y);\n    g->nodes[0].id = 0;\n    scanf(\"%d %d\", &g->nodes[1].x, &g->nodes[1].y);\n    g->nodes[1].id = 1;\n    for (i = 2; i <= n; i++) {\n        scanf(\"%d %d\", &g->nodes[i].x, &g->nodes[i].y);\n        g->nodes[i].id = i;\n    }\n    for (i = 0; i < n; i++) {\n        if (g->lines[i].p1.x == g->lines[i].p2.x) {\n            if (g->lines[i].p1.y < g->lines[i].p2.y) {\n                g->edges[i].x = g->lines[i].p1.x;\n                g->edges[i].y = g->lines[i].p1.y;\n            } else {\n                g->edges[i].x = g->lines[i].p1.x;\n                g->edges[i].y = g->lines[i].p2.y;\n            }\n        } else {\n            if (g->lines[i].p1.x < g->lines[i].p2.x) {\n                g->edges[i].x = g->lines[i].p1.x;\n                g->edges[i].y = g->lines[i].p1.y;\n            } else {\n                g->edges[i].x = g->lines[i].p2.x;\n                g->edges[i].y = g->lines[i].p2.y;\n            }\n        }\n    }\n}\n\nvoid dijkstra(Graph *g, int start, int goal) {\n    int i, j, k, n, m;\n    double dist[MAXN], prev[MAXN];\n    for (i = 0; i <= n; i++) {\n        dist[i] = 1e9;\n        prev[i] = -1;\n    }\n    dist[start] = 0;\n    for (i = 0; i < n; i++) {\n        int u = -1;\n        for (j = 0; j <= n; j++) {\n            if (dist[j] < 1e9 && (u == -1 || dist[j] < dist[u])) {\n                u = j;\n            }\n        }\n        if (u == -1) {\n            break;\n        }\n        for (k = 0; k < n; k++) {\n            if (g->edges[k].x == g->nodes[u].x && g->edges[k].y == g->nodes[u].y) {\n                int v = g->nodes[u].id;\n                double new_dist = dist[u] + sqrt(pow(g->nodes[v].x - g->nodes[u].x, 2) + pow(g->nodes[v].y - g->nodes[u].y, 2));\n                if (new_dist < dist[v]) {\n                    dist[v] = new_dist;\n                    prev[v] = u;\n                }\n            }\n        }\n        dist[u] = 1e9;\n    }\n    if (dist[goal] == 1e9) {\n        printf(\"-1\\n\");\n    } else {\n        int current = goal;\n        while (current != -1) {\n            int x = g->nodes[current].x;\n            int y = g->nodes[current].y;\n            printf(\"%d %d\\n\", x, y);\n            current = prev[current];\n        }\n        printf(\"0\\n\");\n    }\n}\n\nint main() {\n    int n, i;\n    Graph g;\n    while (scanf(\"%d\", &n) != EOF) {\n        read_input(&g);\n        dijkstra(&g, 0, 1);\n        for (i = 0; i < n; i++) {\n            g.nodes[i].id = 0;\n        }\n        g.n = 0;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}