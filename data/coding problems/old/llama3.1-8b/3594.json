{
    "solution_id": "llama3.1-8b-3594",
    "problem_id": "p02089",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class SegmentTree {\n        int n;\n        long[] tree;\n\n        public SegmentTree(int n) {\n            this.n = n;\n            tree = new long[4 * n];\n        }\n\n        public void update(int i, long val) {\n            update(0, 0, n - 1, i, val);\n        }\n\n        private void update(int v, int tl, int tr, int i, long val) {\n            if (tl == tr) {\n                tree[v] = val;\n            } else {\n                int tm = (tl + tr) / 2;\n                if (i <= tm) {\n                    update(2 * v + 1, tl, tm, i, val);\n                } else {\n                    update(2 * v + 2, tm + 1, tr, i, val);\n                }\n                tree[v] = Math.max(tree[2 * v + 1], tree[2 * v + 2]);\n            }\n        }\n\n        public long query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        private long query(int v, int tl, int tr, int l, int r) {\n            if (l > r) {\n                return Long.MIN_VALUE;\n            }\n            if (tl == l && tr == r) {\n                return tree[v];\n            }\n            int tm = (tl + tr) / 2;\n            return Math.max(query(2 * v + 1, tl, tm, l, Math.min(r, tm)),\n                    query(2 * v + 2, tm + 1, tr, Math.max(l, tm + 1), r));\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int q = Integer.parseInt(st.nextToken());\n        int l = Integer.parseInt(st.nextToken());\n        int r = Integer.parseInt(st.nextToken());\n        st = new StringTokenizer(br.readLine());\n        long[] a = new long[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = Long.parseLong(st.nextToken());\n        }\n        SegmentTree st1 = new SegmentTree(n);\n        SegmentTree st2 = new SegmentTree(n);\n        for (int i = 0; i < n; i++) {\n            st1.update(i, a[i]);\n            st2.update(i, a[i]);\n        }\n        for (int i = 0; i < q; i++) {\n            st = new StringTokenizer(br.readLine());\n            int q1 = Integer.parseInt(st.nextToken());\n            int x = Integer.parseInt(st.nextToken());\n            int s = Integer.parseInt(st.nextToken());\n            int t = Integer.parseInt(st.nextToken());\n            if (q1 == 1) {\n                st1.update(0, n - 1, x, t * (x + s));\n                st2.update(0, n - 1, x, t * (x + s) - s);\n            } else {\n                st1.update(0, n - 1, x, (x - s) / t);\n                st2.update(0, n - 1, x, (x - s) / t + s);\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            long v1 = st1.query(Math.max(0, (int) (l - 1)), i);\n            long v2 = st2.query(i, Math.min(n - 1, (int) (r - 1)));\n            if (v1 <= v2) {\n                ans++;\n            }\n        }\n        System.out.println(ans);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}