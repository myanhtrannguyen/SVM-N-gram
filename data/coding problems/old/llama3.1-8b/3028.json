{
    "solution_id": "llama3.1-8b-3028",
    "problem_id": "p01671",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define N 100000\n#define M 200000\n\ntypedef struct {\n    int u, v, w;\n} Edge;\n\nint parent[N];\n\nint find(int u) {\n    if (parent[u] != u) {\n        parent[u] = find(parent[u]);\n    }\n    return parent[u];\n}\n\nvoid union_set(int u, int v) {\n    int pu = find(u);\n    int pv = find(v);\n    if (pu != pv) {\n        parent[pu] = pv;\n    }\n}\n\nint kruskal(int n, Edge edges[], int m, int weights[]) {\n    for (int i = 0; i < n; i++) {\n        parent[i] = i;\n    }\n    int total_weight = 0;\n    for (int i = 0; i < m; i++) {\n        int u = edges[i].u;\n        int v = edges[i].v;\n        int w = edges[i].w;\n        if (find(u) != find(v)) {\n            total_weight += w;\n            union_set(u, v);\n        }\n    }\n    return total_weight;\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n    Edge edges[m];\n    for (int i = 0; i < m; i++) {\n        scanf(\"%d %d %d\", &edges[i].u, &edges[i].v, &edges[i].w);\n        edges[i].u--;\n        edges[i].v--;\n    }\n    int weights[m];\n    for (int i = 0; i < m; i++) {\n        weights[i] = edges[i].w;\n    }\n    int total_weight = kruskal(n, edges, m, weights);\n    for (int i = 0; i < m; i++) {\n        int new_weights[m];\n        for (int j = 0; j < m; j++) {\n            new_weights[j] = weights[j];\n        }\n        new_weights[i] = 0;\n        int new_total_weight = kruskal(n, edges, m, new_weights);\n        if (new_total_weight == INT_MAX) {\n            printf(\"-1\\n\");\n        } else {\n            printf(\"%d\\n\", total_weight - new_total_weight);\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}