{
    "solution_id": "llama3.1-8b-3732",
    "problem_id": "p02254",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n// Define a structure for a node in the Huffman tree\ntypedef struct Node {\n    char c;\n    int freq;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\n// Function to create a new node\nNode* createNode(char c, int freq) {\n    Node* newNode = (Node*) malloc(sizeof(Node));\n    newNode->c = c;\n    newNode->freq = freq;\n    newNode->left = newNode->right = NULL;\n    return newNode;\n}\n\n// Function to calculate the total frequency of all characters\nint calculateTotalFrequency(char* str) {\n    int total = 0;\n    for (int i = 0; str[i]; i++) {\n        total += 1;\n    }\n    return total;\n}\n\n// Function to build the Huffman tree\nNode* buildHuffmanTree(char* str, int* freq) {\n    int n = strlen(str);\n    Node** nodes = (Node**) malloc(n * sizeof(Node*));\n    for (int i = 0; i < n; i++) {\n        nodes[i] = createNode(str[i], freq[str[i] - 'a']);\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (nodes[i]->freq > nodes[j]->freq) {\n                Node* temp = nodes[i];\n                nodes[i] = nodes[j];\n                nodes[j] = temp;\n            }\n        }\n    }\n    while (n > 1) {\n        Node* node1 = nodes[0];\n        Node* node2 = nodes[1];\n        Node* newNode = createNode('\\0', node1->freq + node2->freq);\n        newNode->left = node1;\n        newNode->right = node2;\n        nodes[0] = newNode;\n        nodes[1] = nodes[2];\n        nodes[2] = NULL;\n        for (int i = 3; i < n; i++) {\n            nodes[i - 1] = nodes[i];\n        }\n        n--;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (nodes[i]->freq > nodes[j]->freq) {\n                    Node* temp = nodes[i];\n                    nodes[i] = nodes[j];\n                    nodes[j] = temp;\n                }\n            }\n        }\n    }\n    return nodes[0];\n}\n\n// Function to calculate the length of the Huffman encoded string\nint calculateHuffmanEncodedLength(char* str, Node* root) {\n    int length = 0;\n    for (int i = 0; str[i]; i++) {\n        Node* node = root;\n        while (node->left != NULL || node->right != NULL) {\n            if (node->left != NULL && node->left->c == str[i]) {\n                node = node->left;\n            } else if (node->right != NULL && node->right->c == str[i]) {\n                node = node->right;\n            } else {\n                if (node->left != NULL) {\n                    node = node->left;\n                } else {\n                    node = node->right;\n                }\n            }\n        }\n        length += node->freq;\n    }\n    return length;\n}\n\nint main() {\n    char str[100005];\n    scanf(\"%s\", str);\n    int freq[26];\n    for (int i = 0; i < 26; i++) {\n        freq[i] = 0;\n    }\n    for (int i = 0; str[i]; i++) {\n        freq[str[i] - 'a']++;\n    }\n    int total = calculateTotalFrequency(str);\n    Node* root = buildHuffmanTree(str, freq);\n    int length = calculateHuffmanEncodedLength(str, root);\n    printf(\"%d\\n\", length);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}