{
    "solution_id": "llama3.1-8b-1148",
    "problem_id": "p00824",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_LAYOUTS 100\n#define MAX_ROWS 4\n#define MAX_COLS 7\n\ntypedef struct {\n    int rows[MAX_ROWS][MAX_COLS];\n    int moves;\n} Layout;\n\nint is_valid_move(Layout *layout, int row, int col, int next_col) {\n    if (next_col >= MAX_COLS || layout->rows[row][next_col] == 0) {\n        return 0;\n    }\n    if (layout->rows[row][next_col] == 7) {\n        return 0;\n    }\n    return 1;\n}\n\nint find_successor(Layout *layout, int row, int col) {\n    int suit = layout->rows[row][col] / 10;\n    int value = layout->rows[row][col] % 10;\n    for (int i = col + 1; i < MAX_COLS; i++) {\n        if (layout->rows[row][i] / 10 == suit && layout->rows[row][i] % 10 == value + 1) {\n            return layout->rows[row][i];\n        }\n    }\n    return 0;\n}\n\nvoid fill_gap(Layout *layout, int row, int col) {\n    int successor = find_successor(layout, row, col);\n    if (successor != 0) {\n        layout->rows[row][col] = successor;\n        layout->rows[row][col + 1] = 0;\n    }\n}\n\nvoid print_layout(Layout *layout) {\n    for (int i = 0; i < MAX_ROWS; i++) {\n        for (int j = 0; j < MAX_COLS; j++) {\n            printf(\"%d \", layout->rows[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint solve_layout(Layout *layout) {\n    int moves = 0;\n    for (int i = 0; i < MAX_ROWS; i++) {\n        for (int j = 0; j < MAX_COLS; j++) {\n            if (layout->rows[i][j] == 0) {\n                for (int k = j + 1; k < MAX_COLS; k++) {\n                    if (layout->rows[i][k] != 0) {\n                        fill_gap(layout, i, j);\n                        moves++;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return moves;\n}\n\nint main() {\n    int num_layouts;\n    scanf(\"%d\", &num_layouts);\n    Layout layouts[MAX_LAYOUTS];\n    for (int i = 0; i < num_layouts; i++) {\n        for (int j = 0; j < MAX_ROWS; j++) {\n            for (int k = 0; k < MAX_COLS; k++) {\n                scanf(\"%d\", &layouts[i].rows[j][k]);\n            }\n        }\n        layouts[i].moves = solve_layout(&layouts[i]);\n        if (layouts[i].moves == 0) {\n            layouts[i].moves = 0;\n        } else {\n            layouts[i].moves -= 4;\n        }\n    }\n    for (int i = 0; i < num_layouts; i++) {\n        printf(\"%d\\n\", layouts[i].moves);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}