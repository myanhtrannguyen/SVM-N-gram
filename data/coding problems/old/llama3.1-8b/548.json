{
    "solution_id": "llama3.1-8b-548",
    "problem_id": "p00651",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <math.h>\n\ntypedef struct {\n    double x, y;\n} Point;\n\ndouble crossProduct(Point p1, Point p2, Point p3) {\n    return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n}\n\ndouble distance(Point p1, Point p2) {\n    return sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n}\n\ndouble dotProduct(Point p1, Point p2) {\n    return p1.x * p2.x + p1.y * p2.y;\n}\n\ndouble angle(Point p1, Point p2, Point p3) {\n    return acos(dotProduct((Point){p2.x - p1.x, p2.y - p1.y}, (Point){p3.x - p1.x, p3.y - p1.y}) / (distance(p1, p2) * distance(p1, p3)));\n}\n\ndouble rotatePoint(Point p, double angle, Point center) {\n    double new_x = center.x + (p.x - center.x) * cos(angle) - (p.y - center.y) * sin(angle);\n    double new_y = center.y + (p.x - center.x) * sin(angle) + (p.y - center.y) * cos(angle);\n    return (Point){new_x, new_y};\n}\n\nint main() {\n    int n, r, q;\n    Point points[30];\n    while (scanf(\"%d %d %d\", &n, &r, &q) == 3) {\n        for (int i = 0; i < n; i++) {\n            scanf(\"%lf %lf\", &points[i].x, &points[i].y);\n        }\n        Point prev_point = (Point){0, 0};\n        for (int i = 0; i < q; i++) {\n            double max_angle = 0;\n            int max_index = -1;\n            for (int j = 0; j < n; j++) {\n                double angle = angle((Point){0, 0}, points[j], prev_point);\n                if (angle > max_angle) {\n                    max_angle = angle;\n                    max_index = j;\n                }\n            }\n            prev_point = rotatePoint(points[max_index], max_angle, (Point){0, 0});\n            printf(\"%.10lf %.10lf\\n\", prev_point.x, prev_point.y);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}