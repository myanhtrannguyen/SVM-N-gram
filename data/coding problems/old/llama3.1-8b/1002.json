{
    "solution_id": "llama3.1-8b-1002",
    "problem_id": "p00787",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Line {\n        Point[] points;\n\n        public Line(Point[] points) {\n            this.points = points;\n        }\n    }\n\n    static class Record {\n        int sx, sy;\n        double lapTime;\n        int[] ax, ay;\n\n        public Record(int sx, int sy, double lapTime, int[] ax, int[] ay) {\n            this.sx = sx;\n            this.sy = sy;\n            this.lapTime = lapTime;\n            this.ax = ax;\n            this.ay = ay;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        Point[] inner = new Point[n + 1];\n        Point[] outer = new Point[m + 1];\n        for (int i = 1; i <= n; i++) {\n            st = new StringTokenizer(br.readLine());\n            inner[i] = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n        }\n        for (int i = 1; i <= m; i++) {\n            st = new StringTokenizer(br.readLine());\n            outer[i] = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n        }\n        while (true) {\n            st = new StringTokenizer(br.readLine());\n            if (st.nextToken().equals(\"99999\") && st.nextToken().equals(\"99999\")) break;\n            int sx = Integer.parseInt(st.nextToken());\n            int sy = Integer.parseInt(st.nextToken());\n            double lapTime = Double.parseDouble(st.nextToken());\n            int[] ax = new int[st.countTokens() - 2];\n            int[] ay = new int[st.countTokens() - 2];\n            st = new StringTokenizer(br.readLine());\n            for (int i = 0; i < ax.length; i++) {\n                ax[i] = Integer.parseInt(st.nextToken());\n                ay[i] = Integer.parseInt(st.nextToken());\n            }\n            Record record = new Record(sx, sy, lapTime, ax, ay);\n            System.out.println(check(record, inner, outer) ? \"OK\" : \"NG\");\n        }\n    }\n\n    static boolean check(Record record, Point[] inner, Point[] outer) {\n        if (record.sy != inner[1].y) return false;\n        if (record.ax.length != record.ay.length) return false;\n        if (record.ax.length > (int) (record.lapTime * 1000 + 0.5)) return false;\n        int x = record.sx, y = record.sy;\n        int vx = 0, vy = 0;\n        for (int i = 0; i < record.ax.length; i++) {\n            int ax = record.ax[i], ay = record.ay[i];\n            if (Math.abs(vx + ax) > 1 || Math.abs(vy + ay) > 1) return false;\n            vx += ax;\n            vy += ay;\n            if (i == record.ax.length - 1) {\n                if (x == outer[1].x && y == outer[1].y) return true;\n                if (x == inner[1].x && y == inner[1].y) return true;\n                return false;\n            }\n            if (checkLine(x, y, vx, vy, inner) || checkLine(x, y, vx, vy, outer)) return false;\n            x += vx;\n            y += vy;\n        }\n        return false;\n    }\n\n    static boolean checkLine(int x, int y, int vx, int vy, Point[] line) {\n        for (int i = 1; i < line.length; i++) {\n            if (line[i - 1].y == line[i].y) {\n                if (y == line[i - 1].y && x >= Math.min(line[i - 1].x, line[i].x) && x <= Math.max(line[i - 1].x, line[i].x)) return true;\n                if (y == line[i].y && x >= Math.min(line[i - 1].x, line[i].x) && x <= Math.max(line[i - 1].x, line[i].x)) return true;\n            } else {\n                if (x == line[i - 1].x && y >= Math.min(line[i - 1].y, line[i].y) && y <= Math.max(line[i - 1].y, line[i].y)) return true;\n                if (x == line[i].x && y >= Math.min(line[i - 1].y, line[i].y) && y <= Math.max(line[i - 1].y, line[i].y)) return true;\n            }\n        }\n        return false;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}