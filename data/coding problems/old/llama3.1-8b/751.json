{
    "solution_id": "llama3.1-8b-751",
    "problem_id": "p00724",
    "language": "Python",
    "solution": "```python\nimport sys\nimport heapq\n\ndef get_neighbors(x, y):\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1), (x-1, y-1), (x+1, y+1), (x-1, y+1), (x+1, y-1)]\n\ndef heuristic(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef astar(grid, start, goal):\n    open_list = []\n    heapq.heappush(open_list, (0, start))\n    came_from = {start: None}\n    cost_so_far = {start: 0}\n    while open_list:\n        _, current = heapq.heappop(open_list)\n        if current == goal:\n            break\n        for neighbor in get_neighbors(*current):\n            if 0 <= neighbor[0] < len(grid) and 0 <= neighbor[1] < len(grid[0]) and grid[neighbor[0]][neighbor[1]] != 1:\n                new_cost = cost_so_far[current] + 1\n                if neighbor not in cost_so_far or new_cost < cost_so_far[neighbor]:\n                    cost_so_far[neighbor] = new_cost\n                    priority = new_cost + heuristic(neighbor, goal)\n                    heapq.heappush(open_list, (priority, neighbor))\n                    came_from[neighbor] = current\n    return came_from, cost_so_far\n\ndef reconstruct_path(came_from, start, goal):\n    current = goal\n    path = []\n    while current != start:\n        path.append(current)\n        current = came_from[current]\n    path.append(start)\n    return path[::-1]\n\ndef main():\n    for _ in range(int(sys.stdin.readline())):\n        n = int(sys.stdin.readline())\n        serpent = [tuple(map(int, sys.stdin.readline().split())) for _ in range(n)]\n        k = int(sys.stdin.readline())\n        rocks = [tuple(map(int, sys.stdin.readline().split())) for _ in range(k)]\n        goal = tuple(map(int, sys.stdin.readline().split()))\n        grid = [[0]*1000000 for _ in range(1000000)]\n        for x, y in serpent:\n            grid[x][y] = 1\n        for x, y in rocks:\n            grid[x][y] = 1\n        came_from, cost_so_far = astar(grid, serpent[0], goal)\n        if goal in cost_so_far:\n            path = reconstruct_path(came_from, serpent[0], goal)\n            print(len(path) - 1)\n        else:\n            print(-1)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}