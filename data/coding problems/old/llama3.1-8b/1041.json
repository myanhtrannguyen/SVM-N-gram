{
    "solution_id": "llama3.1-8b-1041",
    "problem_id": "p00797",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nstruct Person {\n    std::string name;\n    std::string parent;\n    std::vector<std::string> children;\n    std::vector<std::string> siblings;\n    std::vector<std::string> descendants;\n    std::vector<std::string> ancestors;\n};\n\nbool isAncestor(const std::string& name, const std::string& ancestor, const std::vector<Person>& familyTree) {\n    for (const auto& person : familyTree) {\n        if (person.name == name && person.ancestors.size() > 0 && std::find(person.ancestors.begin(), person.ancestors.end(), ancestor) != person.ancestors.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isDescendant(const std::string& name, const std::string& descendant, const std::vector<Person>& familyTree) {\n    for (const auto& person : familyTree) {\n        if (person.name == name && person.descendants.size() > 0 && std::find(person.descendants.begin(), person.descendants.end(), descendant) != person.descendants.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isSibling(const std::string& name, const std::string& sibling, const std::vector<Person>& familyTree) {\n    for (const auto& person : familyTree) {\n        if (person.name == name && person.siblings.size() > 0 && std::find(person.siblings.begin(), person.siblings.end(), sibling) != person.siblings.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isParent(const std::string& name, const std::string& parent, const std::vector<Person>& familyTree) {\n    for (const auto& person : familyTree) {\n        if (person.name == name && person.children.size() > 0 && std::find(person.children.begin(), person.children.end(), parent) != person.children.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isChild(const std::string& name, const std::string& child, const std::vector<Person>& familyTree) {\n    for (const auto& person : familyTree) {\n        if (person.name == name && person.children.size() > 0 && std::find(person.children.begin(), person.children.end(), child) != person.children.end()) {\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    std::vector<std::string> lines;\n    std::string line;\n    while (std::getline(std::cin, line)) {\n        if (line == \"0 0\") break;\n        lines.push_back(line);\n    }\n\n    int index = 0;\n    while (index < lines.size()) {\n        std::istringstream iss(lines[index]);\n        int n, m;\n        iss >> n >> m;\n        index++;\n\n        std::vector<Person> familyTree;\n        for (int i = 0; i < n; i++) {\n            std::string name;\n            std::getline(std::cin, name);\n            name.erase(0, name.find_first_not_of(\" \"));\n            name.erase(name.find_last_not_of(\" \") + 1);\n            Person person;\n            person.name = name;\n            familyTree.push_back(person);\n        }\n\n        for (int i = 0; i < n; i++) {\n            std::string name = familyTree[i].name;\n            int level = name.length() - name.find_first_not_of(\" \");\n            for (int j = i + 1; j < n; j++) {\n                std::string otherName = familyTree[j].name;\n                int otherLevel = otherName.length() - otherName.find_first_not_of(\" \");\n                if (otherLevel == level + 1) {\n                    familyTree[i].children.push_back(otherName);\n                    familyTree[j].parent = name;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            std::string name = familyTree[i].name;\n            if (familyTree[i].parent != \"\") {\n                familyTree[i].ancestors.push_back(familyTree[i].parent);\n            }\n            for (const auto& child : familyTree[i].children) {\n                familyTree[i].descendants.push_back(child);\n            }\n            for (const auto& sibling : familyTree) {\n                if (sibling.name != name && sibling.parent == familyTree[i].parent) {\n                    familyTree[i].siblings.push_back(sibling.name);\n                }\n            }\n        }\n\n        for (int i = 0; i < m; i++) {\n            std::string statement;\n            std::getline(std::cin, statement);\n            std::istringstream iss(statement);\n            std::string subject, relation, object;\n            iss >> subject >> relation >> object;\n            if (relation == \"is a child of\") {\n                std::cout << (isChild(object, subject, familyTree) ? \"True\" : \"False\") << std::endl;\n            } else if (relation == \"is the parent of\") {\n                std::cout << (isParent(object, subject, familyTree) ? \"True\" : \"False\") << std::endl;\n            } else if (relation == \"is a sibling of\") {\n                std::cout << (isSibling(object, subject, familyTree) ? \"True\" : \"False\") << std::endl;\n            } else if (relation == \"is a descendant of\") {\n                std::cout << (isDescendant(object, subject, familyTree) ? \"True\" : \"False\") << std::endl;\n            } else if (relation == \"is an ancestor of\") {\n                std::cout << (isAncestor(object, subject, familyTree) ? \"True\" : \"False\") << std::endl;\n            }\n        }\n        std::cout << std::endl;\n        index++;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}