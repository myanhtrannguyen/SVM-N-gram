{
    "solution_id": "llama3.1-8b-914",
    "problem_id": "p00765",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Card {\n        int rank;\n        int count;\n\n        public Card(int rank, int count) {\n            this.rank = rank;\n            this.count = count;\n        }\n    }\n\n    static class Pattern {\n        List<Card> cards;\n\n        public Pattern(List<Card> cards) {\n            this.cards = cards;\n        }\n    }\n\n    static class Hand {\n        List<Card> cards;\n\n        public Hand(List<Card> cards) {\n            this.cards = cards;\n        }\n    }\n\n    static double calculateProbability(int N, int M, int L, Pattern pattern) {\n        List<Card> cards = new ArrayList<>();\n        for (int i = 1; i <= M; i++) {\n            cards.add(new Card(i, N));\n        }\n\n        long totalHands = 1;\n        for (int i = 0; i < L; i++) {\n            totalHands *= (long) cards.size();\n        }\n\n        long matchingHands = 0;\n\n        for (int i = 0; i < cards.size(); i++) {\n            List<Card> newCards = new ArrayList<>(cards);\n            newCards.remove(i);\n            matchingHands += calculateMatchingHands(newCards, pattern, i);\n        }\n\n        return (double) matchingHands / totalHands;\n    }\n\n    static long calculateMatchingHands(List<Card> cards, Pattern pattern, int start) {\n        if (pattern.cards.isEmpty()) {\n            return 1;\n        }\n\n        long matchingHands = 0;\n\n        for (int i = start; i < cards.size(); i++) {\n            Card card = cards.get(i);\n            List<Card> newCards = new ArrayList<>(cards);\n            newCards.remove(i);\n\n            if (pattern.cards.get(0).rank == '*' || pattern.cards.get(0).rank == card.rank) {\n                matchingHands += calculateMatchingHands(newCards, new Pattern(pattern.cards.subList(1, pattern.cards.size())), i);\n            }\n        }\n\n        return matchingHands;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        String[] line;\n        while ((line = br.readLine().trim().split(\"\\\\s+\")) != null && line.length > 0) {\n            int N = Integer.parseInt(line[0]);\n            int M = Integer.parseInt(line[1]);\n            int L = Integer.parseInt(line[2]);\n\n            Pattern pattern = new Pattern(parsePattern(br.readLine().trim()));\n\n            double probability = calculateProbability(N, M, L, pattern);\n\n            pw.printf(\"%.12f\\n\", probability);\n        }\n\n        pw.flush();\n    }\n\n    static List<Card> parsePattern(String pattern) {\n        List<Card> cards = new ArrayList<>();\n\n        int i = 0;\n        while (i < pattern.length()) {\n            if (pattern.charAt(i) == '*') {\n                cards.add(new Card('*', 0));\n                i++;\n            } else if (pattern.charAt(i) == '+') {\n                int j = i + 1;\n                while (j < pattern.length() && pattern.charAt(j) == '+') {\n                    j++;\n                }\n                int count = j - i;\n                cards.add(new Card(pattern.charAt(i - 1) - 'a', count));\n                i = j;\n            } else {\n                int j = i + 1;\n                while (j < pattern.length() && pattern.charAt(j) >= 'a' && pattern.charAt(j) <= 'z') {\n                    j++;\n                }\n                int count = j - i;\n                cards.add(new Card(pattern.charAt(i - 1) - 'a', count));\n                i = j;\n            }\n        }\n\n        return cards;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}