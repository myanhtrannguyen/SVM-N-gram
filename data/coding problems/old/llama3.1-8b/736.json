{
    "solution_id": "llama3.1-8b-736",
    "problem_id": "p00721",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_SIZE 21\n#define MAX_DIR 4\n\ntypedef struct {\n    int x, y;\n} point;\n\ntypedef struct {\n    int x, y;\n    char type;\n} tile;\n\ntypedef struct {\n    int x, y;\n    int dir;\n} move;\n\nint bfs(int w, int h, tile map[MAX_SIZE][MAX_SIZE], point start, point end) {\n    int queue[MAX_SIZE * MAX_SIZE * 2];\n    int front = 0, rear = 1;\n    int visited[MAX_SIZE][MAX_SIZE] = {{0}};\n    int dist[MAX_SIZE][MAX_SIZE] = {{-1}};\n    dist[start.x][start.y] = 0;\n    queue[rear++] = start.x + start.y * w;\n    visited[start.x][start.y] = 1;\n\n    while (front < rear) {\n        int u = queue[front++];\n        int x = u % w;\n        int y = u / w;\n        if (x == end.x && y == end.y) return dist[x][y];\n\n        for (int i = 0; i < MAX_DIR; i++) {\n            int nx = x + (i == 0) - (i == 2);\n            int ny = y + (i == 1) - (i == 3);\n            if (nx >= 0 && nx < w && ny >= 0 && ny < h && map[nx][ny] != 'x' && !visited[nx][ny]) {\n                queue[rear++] = nx + ny * w;\n                visited[nx][ny] = 1;\n                dist[nx][ny] = dist[x][y] + 1;\n            }\n        }\n    }\n\n    return -1;\n}\n\nint main() {\n    int w, h;\n    while (scanf(\"%d %d\", &w, &h) == 2) {\n        if (w == 0 && h == 0) break;\n        tile map[MAX_SIZE][MAX_SIZE];\n        for (int i = 0; i < w; i++) {\n            for (int j = 0; j < h; j++) {\n                char c;\n                scanf(\" %c\", &c);\n                map[i][j].x = i;\n                map[i][j].y = j;\n                map[i][j].type = c;\n            }\n        }\n\n        int dirty = 0;\n        for (int i = 0; i < w; i++) {\n            for (int j = 0; j < h; j++) {\n                if (map[i][j].type == '*') dirty++;\n            }\n        }\n\n        point start;\n        for (int i = 0; i < w; i++) {\n            for (int j = 0; j < h; j++) {\n                if (map[i][j].type == 'o') {\n                    start.x = i;\n                    start.y = j;\n                    break;\n                }\n            }\n        }\n\n        int min = 0;\n        for (int i = 0; i < w; i++) {\n            for (int j = 0; j < h; j++) {\n                if (map[i][j].type == '*') {\n                    int dist = bfs(w, h, map, start, (point){i, j});\n                    if (dist == -1) {\n                        printf(\"-1\\n\");\n                        goto next_map;\n                    }\n                    min += dist;\n                }\n            }\n        }\n\n        printf(\"%d\\n\", min);\n        next_map:;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}