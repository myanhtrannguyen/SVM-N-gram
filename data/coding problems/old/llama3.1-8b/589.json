{
    "solution_id": "llama3.1-8b-589",
    "problem_id": "p00684",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <string>\n#include <cctype>\n\n// Structure to represent complex numbers\nstruct Complex {\n    long long real;\n    long long imag;\n};\n\n// Function to calculate the result of an expression\nComplex calculate(const std::string& expression) {\n    Complex result = {0, 0};\n    int i = 0;\n    while (i < expression.size()) {\n        if (expression[i] == '(') {\n            // Recursively calculate the subexpression\n            Complex subresult = calculate(expression.substr(i + 1));\n            if (subresult.real > 10000 || subresult.real < -10000 ||\n                subresult.imag > 10000 || subresult.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            result.real += subresult.real;\n            result.imag += subresult.imag;\n            i += 2; // Skip ')'\n        } else if (expression[i] == '+') {\n            // Calculate the left operand\n            Complex left = calculate(expression.substr(0, i));\n            if (left.real > 10000 || left.real < -10000 ||\n                left.imag > 10000 || left.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            // Calculate the right operand\n            Complex right = calculate(expression.substr(i + 1));\n            if (right.real > 10000 || right.real < -10000 ||\n                right.imag > 10000 || right.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            result.real = left.real + right.real;\n            result.imag = left.imag + right.imag;\n            i += 1; // Skip '+'\n        } else if (expression[i] == '-') {\n            // Calculate the left operand\n            Complex left = calculate(expression.substr(0, i));\n            if (left.real > 10000 || left.real < -10000 ||\n                left.imag > 10000 || left.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            // Calculate the right operand\n            Complex right = calculate(expression.substr(i + 1));\n            if (right.real > 10000 || right.real < -10000 ||\n                right.imag > 10000 || right.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            result.real = left.real - right.real;\n            result.imag = left.imag - right.imag;\n            i += 1; // Skip '-'\n        } else if (expression[i] == '*') {\n            // Calculate the left operand\n            Complex left = calculate(expression.substr(0, i));\n            if (left.real > 10000 || left.real < -10000 ||\n                left.imag > 10000 || left.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            // Calculate the right operand\n            Complex right = calculate(expression.substr(i + 1));\n            if (right.real > 10000 || right.real < -10000 ||\n                right.imag > 10000 || right.imag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            // Multiply complex numbers\n            long long newreal = left.real * right.real - left.imag * right.imag;\n            long long newimag = left.real * right.imag + left.imag * right.real;\n            if (newreal > 10000 || newreal < -10000 ||\n                newimag > 10000 || newimag < -10000) {\n                return {0, 0}; // Overflow\n            }\n            result.real = newreal;\n            result.imag = newimag;\n            i += 1; // Skip '*'\n        } else if (std::isdigit(expression[i])) {\n            // Parse the number\n            long long num = 0;\n            while (i < expression.size() && std::isdigit(expression[i])) {\n                num = num * 10 + (expression[i++] - '0');\n            }\n            if (expression[i] == 'i') {\n                result.imag += num;\n                i += 1; // Skip 'i'\n            } else {\n                result.real += num;\n            }\n        } else if (expression[i] == 'i') {\n            result.imag += 1;\n            i += 1; // Skip 'i'\n        }\n    }\n    return result;\n}\n\nint main() {\n    std::string expression;\n    while (std::getline(std::cin, expression)) {\n        Complex result = calculate(expression);\n        if (result.real == 0 && result.imag == 0) {\n            std::cout << \"0\" << std::endl;\n        } else if (result.real < 0) {\n            std::cout << -result.real;\n            if (result.imag > 0) {\n                std::cout << \"+\" << result.imag;\n            } else {\n                std::cout << result.imag;\n            }\n            std::cout << \"i\" << std::endl;\n        } else {\n            std::cout << result.real;\n            if (result.imag > 0) {\n                std::cout << \"+\" << result.imag;\n            } else {\n                std::cout << result.imag;\n            }\n            std::cout << \"i\" << std::endl;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}