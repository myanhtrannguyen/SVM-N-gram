{
    "solution_id": "llama3.1-8b-3555",
    "problem_id": "p02069",
    "language": "Python",
    "solution": "```python\nimport sys\nimport bisect\n\nN = int(2e5 + 5)\ninf = float('inf')\n\nclass Node:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n        self.max = 0\n        self.add = 0\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [Node(0, 0) for _ in range(4 * n)]\n\n    def push_up(self, u):\n        self.tree[u].max = max(self.tree[u << 1].max, self.tree[u << 1 | 1].max)\n\n    def push_down(self, u):\n        self.tree[u << 1].max += self.tree[u].add\n        self.tree[u << 1 | 1].max += self.tree[u].add\n        self.tree[u << 1].add += self.tree[u].add\n        self.tree[u << 1 | 1].add += self.tree[u].add\n        self.tree[u].add = 0\n\n    def build(self, u, l, r):\n        self.tree[u] = Node(l, r)\n        if l == r:\n            return\n        mid = (l + r) >> 1\n        self.build(u << 1, l, mid)\n        self.build(u << 1 | 1, mid + 1, r)\n        self.push_up(u)\n\n    def update(self, u, l, r, val):\n        if self.tree[u].l >= l and self.tree[u].r <= r:\n            self.tree[u].max += val\n            self.tree[u].add += val\n            return\n        self.push_down(u)\n        mid = (self.tree[u].l + self.tree[u].r) >> 1\n        if l <= mid:\n            self.update(u << 1, l, r, val)\n        if r > mid:\n            self.update(u << 1 | 1, l, r, val)\n        self.push_up(u)\n\n    def query(self, u, l, r):\n        if self.tree[u].l >= l and self.tree[u].r <= r:\n            return self.tree[u].max\n        self.push_down(u)\n        mid = (self.tree[u].l + self.tree[u].r) >> 1\n        res = -inf\n        if l <= mid:\n            res = max(res, self.query(u << 1, l, r))\n        if r > mid:\n            res = max(res, self.query(u << 1 | 1, l, r))\n        return res\n\ndef main():\n    n, L = map(int, input().split())\n    intervals = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        intervals.append((l, r))\n\n    intervals.sort(key=lambda x: x[1])\n    st = SegmentTree(n)\n    st.build(1, 0, n - 1)\n    for i in range(n):\n        st.update(1, i, i, intervals[i][1] - intervals[i][0])\n\n    ans1 = 0\n    ans2 = 0\n    for i in range(n):\n        l, r = intervals[i]\n        if st.query(1, 0, i) >= L:\n            ans1 = i + 1\n            break\n        st.update(1, i, i, -1)\n        if st.query(1, 0, n - 1) >= L:\n            ans2 = n\n            break\n        st.update(1, i, i, 1)\n\n    print(ans1, ans2)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}