{
    "solution_id": "llama3.1-8b-962",
    "problem_id": "p00777",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, weight;\n\n        public Edge(int to, int weight) {\n            this.to = to;\n            this.weight = weight;\n        }\n    }\n\n    static class DisjointSet {\n        int[] parent;\n        int[] rank;\n\n        public DisjointSet(int n) {\n            parent = new int[n];\n            rank = new int[n];\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n            }\n        }\n\n        public int find(int x) {\n            if (parent[x] != x) {\n                parent[x] = find(parent[x]);\n            }\n            return parent[x];\n        }\n\n        public void union(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX != rootY) {\n                if (rank[rootX] > rank[rootY]) {\n                    parent[rootY] = rootX;\n                } else {\n                    parent[rootX] = rootY;\n                    if (rank[rootX] == rank[rootY]) {\n                        rank[rootY]++;\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = 1;\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            int[] p = new int[n];\n            int[] d = new int[n - 1];\n            String[] line = br.readLine().split(\" \");\n            for (int i = 0; i < n - 1; i++) {\n                p[i] = Integer.parseInt(line[i]) - 1;\n            }\n            line = br.readLine().split(\" \");\n            for (int i = 0; i < n - 1; i++) {\n                d[i] = Integer.parseInt(line[i]);\n            }\n            DisjointSet ds = new DisjointSet(n);\n            for (int i = 0; i < n - 1; i++) {\n                ds.union(p[i], i + 1);\n            }\n            Map<Integer, List<Edge>> graph = new HashMap<>();\n            for (int i = 0; i < n - 1; i++) {\n                graph.computeIfAbsent(ds.find(p[i]), k -> new ArrayList<>()).add(new Edge(ds.find(i + 1), d[i]));\n            }\n            long ans = 0;\n            for (int i = 0; i < n - 1; i++) {\n                ans += d[i];\n            }\n            long[] dp = new long[n];\n            Arrays.fill(dp, Long.MAX_VALUE / 2);\n            dp[ds.find(0)] = 0;\n            PriorityQueue<long[]> pq = new PriorityQueue<>((a, b) -> Long.compare(a[0], b[0]));\n            pq.offer(new long[]{0, ds.find(0)});\n            while (!pq.isEmpty()) {\n                long[] cur = pq.poll();\n                long dist = cur[0];\n                int u = cur[1];\n                for (Edge e : graph.get(u)) {\n                    int v = e.to;\n                    long newDist = dist + e.weight;\n                    if (dp[v] > newDist) {\n                        dp[v] = newDist;\n                        pq.offer(new long[]{newDist, v});\n                    }\n                }\n            }\n            long min = Long.MAX_VALUE;\n            for (int i = 0; i < n; i++) {\n                min = Math.min(min, dp[i]);\n            }\n            System.out.println(ans - min);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}