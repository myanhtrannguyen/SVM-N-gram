{
    "solution_id": "llama3.1-8b-3274",
    "problem_id": "p01822",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Point {\n        int x, y, id;\n\n        public Point(int x, int y, int id) {\n            this.x = x;\n            this.y = y;\n            this.id = id;\n        }\n    }\n\n    static class Segment {\n        int x1, y1, x2, y2;\n\n        public Segment(int x1, int y1, int x2, int y2) {\n            this.x1 = x1;\n            this.y1 = y1;\n            this.x2 = x2;\n            this.y2 = y2;\n        }\n    }\n\n    static class Event implements Comparable<Event> {\n        int type, id;\n        int x;\n\n        public Event(int type, int id, int x) {\n            this.type = type;\n            this.id = id;\n            this.x = x;\n        }\n\n        @Override\n        public int compareTo(Event o) {\n            return Integer.compare(x, o.x);\n        }\n    }\n\n    static int n, m, q;\n    static Point[] p;\n    static Segment[] s;\n    static Event[] e;\n    static int[] fa;\n    static int[] dep;\n    static int[] ans;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n\n        StringTokenizer st = new StringTokenizer(in.readLine());\n        n = Integer.parseInt(st.nextToken());\n        m = Integer.parseInt(st.nextToken());\n        q = Integer.parseInt(st.nextToken());\n\n        p = new Point[n + 1];\n        s = new Segment[m + 1];\n        e = new Event[2 * m + q];\n        fa = new int[n + 1];\n        dep = new int[n + 1];\n        ans = new int[q + 1];\n\n        for (int i = 1; i <= n; i++) {\n            st = new StringTokenizer(in.readLine());\n            p[i] = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), i);\n        }\n\n        for (int i = 1; i <= m; i++) {\n            st = new StringTokenizer(in.readLine());\n            s[i] = new Segment(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n        }\n\n        for (int i = 1; i <= m; i++) {\n            e[2 * i - 1] = new Event(0, s[i].x1, s[i].x1);\n            e[2 * i - 1 + m] = new Event(1, s[i].x2, s[i].x2);\n            e[2 * i - 1 + m + q] = new Event(2, i, s[i].x1);\n            e[2 * i - 1 + m + q + 1] = new Event(2, i, s[i].x2);\n        }\n\n        for (int i = 1; i <= q; i++) {\n            st = new StringTokenizer(in.readLine());\n            e[2 * m + 2 * i - 1] = new Event(3, i, Integer.parseInt(st.nextToken()));\n            e[2 * m + 2 * i] = new Event(3, i, Integer.parseInt(st.nextToken()));\n        }\n\n        Arrays.sort(e, 1, 2 * m + q + 1);\n\n        for (int i = 1; i <= n; i++) {\n            fa[i] = i;\n            dep[i] = 0;\n        }\n\n        for (int i = 1; i <= 2 * m + q; i++) {\n            int x = e[i].x;\n            if (e[i].type == 0) {\n                int l = find(p[e[i].id].id);\n                int r = find(p[e[i].id + 1].id);\n                if (l != r) {\n                    fa[r] = l;\n                    dep[l] = Math.max(dep[l], dep[r] + 1);\n                }\n            } else if (e[i].type == 1) {\n                int l = find(p[e[i].id].id);\n                int r = find(p[e[i].id + 1].id);\n                if (l != r) {\n                    fa[l] = r;\n                    dep[r] = Math.max(dep[r], dep[l] + 1);\n                }\n            } else {\n                int l = find(e[i].id);\n                if (dep[l] & 1 == 1) {\n                    ans[e[i].id] = 1;\n                }\n            }\n        }\n\n        for (int i = 1; i <= q; i++) {\n            out.println(ans[i] == 1 ? \"Yes\" : \"No\");\n        }\n\n        out.close();\n    }\n\n    static int find(int x) {\n        if (fa[x] == x) {\n            return x;\n        }\n        return fa[x] = find(fa[x]);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}