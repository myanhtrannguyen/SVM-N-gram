{
    "solution_id": "llama3.1-8b-2958",
    "problem_id": "p01597",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Line {\n        Point p1, p2;\n\n        public Line(Point p1, Point p2) {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n\n    static class Event implements Comparable<Event> {\n        int x, type;\n\n        public Event(int x, int type) {\n            this.x = x;\n            this.type = type;\n        }\n\n        @Override\n        public int compareTo(Event o) {\n            return Integer.compare(x, o.x);\n        }\n    }\n\n    static int orientation(Point p, Point q, Point r) {\n        int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n        if (val == 0) return 0;\n        return val > 0 ? 1 : -1;\n    }\n\n    static boolean onSegment(Point p, Point q, Point r) {\n        if (q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) &&\n                q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y))\n            return true;\n        return false;\n    }\n\n    static boolean doIntersect(Point p1, Point q1, Point p2, Point q2) {\n        int o1 = orientation(p1, q1, p2);\n        int o2 = orientation(p1, q1, q2);\n        int o3 = orientation(p2, q2, p1);\n        int o4 = orientation(p2, q2, q1);\n\n        if (o1 != o2 && o3 != o4)\n            return true;\n\n        if (o1 == 0 && onSegment(p1, p2, q1))\n            return true;\n\n        if (o2 == 0 && onSegment(p1, q2, q1))\n            return true;\n\n        if (o3 == 0 && onSegment(p2, p1, q2))\n            return true;\n\n        if (o4 == 0 && onSegment(p2, q1, q2))\n            return true;\n\n        return false;\n    }\n\n    static void addEvent(List<Event> events, int x, int type) {\n        events.add(new Event(x, type));\n    }\n\n    static void addLine(List<Event> events, Line line) {\n        addEvent(events, line.p1.x, 1);\n        addEvent(events, line.p1.x, -1);\n        addEvent(events, line.p2.x, 1);\n        addEvent(events, line.p2.x, -1);\n    }\n\n    static void addPoint(List<Event> events, Point p) {\n        addEvent(events, p.x, 2);\n    }\n\n    static int countHidingPoints(List<Line> lines) {\n        List<Event> events = new ArrayList<>();\n        for (Line line : lines) {\n            addLine(events, line);\n        }\n        Collections.sort(events);\n\n        int x = 0, y = 0, prevX = 0, prevY = 0, count = 0;\n        for (Event event : events) {\n            if (event.type == 1) {\n                x = event.x;\n                y = 0;\n            } else if (event.type == 2) {\n                x = event.x;\n                y = 1;\n            } else {\n                if (prevX == x) {\n                    if (prevY == 0) {\n                        if (y == 1) {\n                            count++;\n                        }\n                    } else if (prevY == 1) {\n                        if (y == 0) {\n                            count++;\n                        }\n                    }\n                }\n                prevX = x;\n                prevY = y;\n            }\n        }\n        return count;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        List<Line> lines = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            String[] line = br.readLine().split(\" \");\n            Point p1 = new Point(Integer.parseInt(line[0]), Integer.parseInt(line[1]));\n            Point p2 = new Point(Integer.parseInt(line[2]), Integer.parseInt(line[3]));\n            lines.add(new Line(p1, p2));\n        }\n        System.out.println(countHidingPoints(lines));\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}