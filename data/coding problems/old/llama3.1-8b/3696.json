{
    "solution_id": "llama3.1-8b-3696",
    "problem_id": "p02245",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define N 3\n#define INF 1000000\n\n// Define the structure for the puzzle state\ntypedef struct {\n    int board[N][N];\n    int steps;\n} state;\n\n// Define the function to print the puzzle state\nvoid print_state(state *s) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            printf(\"%d \", s->board[i][j]);\n        }\n        printf(\"\\n\");\n    }\n    printf(\"Steps: %d\\n\", s->steps);\n}\n\n// Define the function to check if the puzzle state is the goal state\nint is_goal(state *s) {\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            if (s->board[i][j] != (i * N + j + 1) % 9) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n\n// Define the function to check if a move is valid\nint is_valid(state *s, int i, int j, int ni, int nj) {\n    if (ni < 0 || ni >= N || nj < 0 || nj >= N) {\n        return 0;\n    }\n    if (s->board[ni][nj] != 0) {\n        return 0;\n    }\n    return 1;\n}\n\n// Define the function to perform a move\nvoid move(state *s, int i, int j, int ni, int nj) {\n    int temp = s->board[ni][nj];\n    s->board[ni][nj] = s->board[i][j];\n    s->board[i][j] = temp;\n    s->steps++;\n}\n\n// Define the function to solve the puzzle using BFS\nvoid bfs(state *s) {\n    int i, j, ni, nj;\n    state q[1000];\n    int front = 0, rear = 0;\n    q[rear++] = *s;\n    while (front < rear) {\n        state curr = q[front++];\n        if (is_goal(&curr)) {\n            printf(\"%d\\n\", curr.steps);\n            return;\n        }\n        for (i = 0; i < N; i++) {\n            for (j = 0; j < N; j++) {\n                if (curr.board[i][j] == 0) {\n                    for (ni = i - 1; ni <= i + 1; ni++) {\n                        for (nj = j - 1; nj <= j + 1; nj++) {\n                            if (is_valid(&curr, i, j, ni, nj)) {\n                                move(&curr, i, j, ni, nj);\n                                q[rear++] = curr;\n                                move(&curr, i, j, ni, nj);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"-1\\n\");\n}\n\nint main() {\n    state s;\n    for (int i = 0; i < N; i++) {\n        for (int j = 0; j < N; j++) {\n            scanf(\"%d\", &s.board[i][j]);\n        }\n    }\n    bfs(&s);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}