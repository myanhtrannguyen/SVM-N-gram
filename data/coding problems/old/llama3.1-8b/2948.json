{
    "solution_id": "llama3.1-8b-2948",
    "problem_id": "p01595",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_W 8\n#define MAX_H 8\n#define MAX_MAP 8\n\ntypedef struct {\n    int w, h;\n    char map[MAX_H][MAX_W];\n    int pillars[MAX_H][MAX_W];\n    int statues[MAX_H][MAX_W];\n    int mirrors[MAX_H][MAX_W];\n    int crystals[MAX_H][MAX_W];\n    int laser[MAX_H][MAX_W];\n    int door;\n    int john;\n} Room;\n\nvoid read_input(Room *room) {\n    int i, j;\n    scanf(\"%d %d\", &room->w, &room->h);\n    for (i = 0; i < room->h; i++) {\n        scanf(\"%s\", room->map[i]);\n        for (j = 0; j < room->w; j++) {\n            switch (room->map[i][j]) {\n                case '#':\n                    room->pillars[i][j] = 1;\n                    break;\n                case '*':\n                    room->pillars[i][j] = 1;\n                    break;\n                case 'S':\n                    room->statues[i][j] = 1;\n                    break;\n                case '/':\n                    room->mirrors[i][j] = 1;\n                    break;\n                case '\\\\':\n                    room->mirrors[i][j] = 2;\n                    break;\n                case '-':\n                    room->mirrors[i][j] = 3;\n                    break;\n                case '|':\n                    room->mirrors[i][j] = 4;\n                    break;\n                case 'O':\n                    room->crystals[i][j] = 1;\n                    break;\n                case 'L':\n                    room->laser[i][j] = 1;\n                    break;\n                case 'D':\n                    room->door = j;\n                    break;\n                case '@':\n                    room->john = j;\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\n\nint is_valid(Room *room, int x, int y) {\n    if (x < 0 || x >= room->w || y < 0 || y >= room->h) return 0;\n    if (room->pillars[y][x]) return 0;\n    return 1;\n}\n\nint is_valid_laser(Room *room, int x, int y) {\n    if (x < 0 || x >= room->w || y < 0 || y >= room->h) return 0;\n    if (room->pillars[y][x]) return 0;\n    if (room->statues[y][x]) return 0;\n    return 1;\n}\n\nvoid print_map(Room *room) {\n    int i, j;\n    for (i = 0; i < room->h; i++) {\n        for (j = 0; j < room->w; j++) {\n            switch (room->map[i][j]) {\n                case '#':\n                    printf(\"#\");\n                    break;\n                case '*':\n                    printf(\"*\");\n                    break;\n                case 'S':\n                    printf(\"S\");\n                    break;\n                case '/':\n                    printf(\"/\");\n                    break;\n                case '\\\\':\n                    printf(\"\\\\\");\n                    break;\n                case '-':\n                    printf(\"-\");\n                    break;\n                case '|':\n                    printf(\"|\");\n                    break;\n                case 'O':\n                    printf(\"O\");\n                    break;\n                case 'L':\n                    printf(\"L\");\n                    break;\n                case 'D':\n                    printf(\"D\");\n                    break;\n                case '@':\n                    printf(\"@\");\n                    break;\n                default:\n                    printf(\".\");\n                    break;\n            }\n        }\n        printf(\"\\n\");\n    }\n}\n\nint solve(Room *room) {\n    int i, j, k, l;\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, -1, 0, 1};\n    int queue[MAX_H * MAX_W];\n    int front = 0, rear = 0;\n    int visited[MAX_H][MAX_W];\n    int laser[MAX_H][MAX_W];\n    int mirrors[MAX_H][MAX_W];\n    int crystals[MAX_H][MAX_W];\n    int statues[MAX_H][MAX_W];\n    int pillars[MAX_H][MAX_W];\n    int door;\n    int john;\n\n    for (i = 0; i < room->h; i++) {\n        for (j = 0; j < room->w; j++) {\n            visited[i][j] = 0;\n            laser[i][j] = 0;\n            mirrors[i][j] = 0;\n            crystals[i][j] = 0;\n            statues[i][j] = 0;\n            pillars[i][j] = 0;\n        }\n    }\n\n    for (i = 0; i < room->h; i++) {\n        for (j = 0; j < room->w; j++) {\n            if (room->pillars[i][j]) {\n                pillars[i][j] = 1;\n            }\n            if (room->statues[i][j]) {\n                statues[i][j] = 1;\n            }\n            if (room->mirrors[i][j]) {\n                mirrors[i][j] = 1;\n            }\n            if (room->crystals[i][j]) {\n                crystals[i][j] = 1;\n            }\n            if (room->laser[i][j]) {\n                laser[i][j] = 1;\n            }\n        }\n    }\n\n    door = room->door;\n    john = room->john;\n\n    queue[rear++] = john;\n    visited[john / room->w][john % room->w] = 1;\n\n    while (front < rear) {\n        int x = queue[front] / room->w;\n        int y = queue[front] % room->w;\n        front++;\n\n        for (k = 0; k < 4; k++) {\n            int nx = x + dx[k];\n            int ny = y + dy[k];\n\n            if (is_valid(room, nx, ny)) {\n                if (!visited[nx][ny]) {\n                    queue[rear++] = nx * room->w + ny;\n                    visited[nx][ny] = 1;\n                }\n\n                if (laser[x][y] && is_valid_laser(room, nx, ny)) {\n                    laser[nx][ny] = 1;\n                    queue[rear++] = nx * room->w + ny;\n                    visited[nx][ny] = 1;\n                }\n            }\n        }\n\n        if (laser[x][y]) {\n            for (k = 0; k < 4; k++) {\n                int nx = x + dx[k];\n                int ny = y + dy[k];\n\n                if (is_valid(room, nx, ny)) {\n                    if (mirrors[x][y] == 1 && mirrors[nx][ny] == 0) {\n                        mirrors[nx][ny] = 1;\n                        laser[nx][ny] = 1;\n                        queue[rear++] = nx * room->w + ny;\n                        visited[nx][ny] = 1;\n                    } else if (mirrors[x][y] == 2 && mirrors[nx][ny] == 0) {\n                        mirrors[nx][ny] = 2;\n                        laser[nx][ny] = 1;\n                        queue[rear++] = nx * room->w + ny;\n                        visited[nx][ny] = 1;\n                    } else if (mirrors[x][y] == 3 && mirrors[nx][ny] == 0) {\n                        mirrors[nx][ny] = 3;\n                        laser[nx][ny] = 1;\n                        queue[rear++] = nx * room->w + ny;\n                        visited[nx][ny] = 1;\n                    } else if (mirrors[x][y] == 4 && mirrors[nx][ny] == 0) {\n                        mirrors[nx][ny] = 4;\n                        laser[nx][ny] = 1;\n                        queue[rear++] = nx * room->w + ny;\n                        visited[nx][ny] = 1;\n                    } else if (crystals[x][y] == 1 && crystals[nx][ny] == 0) {\n                        crystals[nx][ny] = 1;\n                        laser[nx][ny] = 1;\n                        queue[rear++] = nx * room->w + ny;\n                        visited[nx][ny] = 1;\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < room->h; i++) {\n        for (j = 0; j < room->w; j++) {\n            if (laser[i][j] && room->statues[i][j]) {\n                return 0;\n            }\n        }\n    }\n\n    return 1;\n}\n\nint main() {\n    Room room;\n    read_input(&room);\n    printf(\"%s\\n\", solve(&room) ? \"Yes\" : \"No\");\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}