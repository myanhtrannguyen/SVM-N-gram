{
    "solution_id": "llama3.1-8b-1328",
    "problem_id": "p00869",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_W 30\n#define MAX_D 30\n#define MAX_V 6\n\ntypedef struct {\n    int w, d;\n    char grid[MAX_W][MAX_D];\n    char v[MAX_V];\n} Bed;\n\nint is_valid_move(Bed *bed, int x, int y, int dx, int dy) {\n    if (x < 0 || x >= bed->w || y < 0 || y >= bed->d) return 0;\n    if (bed->grid[x][y] == 'k') return 0;\n    return 1;\n}\n\nint bfs(Bed *bed, int x, int y, int v_idx) {\n    int queue[MAX_W * MAX_D * 2];\n    int front = 0, rear = 0;\n    queue[rear++] = (x * MAX_D + y) * 2;\n    queue[rear++] = v_idx;\n\n    int visited[MAX_W * MAX_D * 2];\n    memset(visited, 0, sizeof(visited));\n    visited[front++] = (x * MAX_D + y) * 2;\n\n    int steps = 0;\n    while (front <= rear) {\n        int pos = queue[front++] / 2;\n        int v = queue[front++] % MAX_V;\n\n        if (v == MAX_V - 1) return steps;\n\n        int dx[] = {0, 0, 1, -1};\n        int dy[] = {1, -1, 0, 0};\n        for (int i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n            if (is_valid_move(bed, nx, ny, dx[i], dy[i])) {\n                int npos = (nx * MAX_D + ny) * 2;\n                if (!visited[npos]) {\n                    visited[npos] = 1;\n                    queue[rear++] = npos;\n                    queue[rear++] = v + 1;\n                }\n            }\n        }\n\n        steps++;\n    }\n\n    return -1;\n}\n\nint main() {\n    int w, d;\n    while (scanf(\"%d %d\", &w, &d) == 2) {\n        Bed bed;\n        bed.w = w;\n        bed.d = d;\n        for (int i = 0; i < d; i++) {\n            scanf(\"%s\", bed.grid[i]);\n        }\n        scanf(\"%s\", bed.v);\n\n        int v_idx = 0;\n        for (int i = 0; i < MAX_V; i++) {\n            if (bed.v[i] == 'r') bed.v[i] = 0;\n            else if (bed.v[i] == 'g') bed.v[i] = 1;\n            else if (bed.v[i] == 'b') bed.v[i] = 2;\n            else if (bed.v[i] == 'c') bed.v[i] = 3;\n            else if (bed.v[i] == 'm') bed.v[i] = 4;\n            else if (bed.v[i] == 'y') bed.v[i] = 5;\n            v_idx = bed.v[i];\n        }\n\n        int x, y;\n        for (int i = 0; i < d; i++) {\n            for (int j = 0; j < w; j++) {\n                if (bed.grid[i][j] == '#') {\n                    x = j;\n                    y = i;\n                    break;\n                }\n            }\n        }\n\n        int res = bfs(&bed, x, y, v_idx);\n        if (res == -1) printf(\"unreachable\\n\");\n        else printf(\"%d\\n\", res);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}