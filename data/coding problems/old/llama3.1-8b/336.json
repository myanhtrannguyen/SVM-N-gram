{
    "solution_id": "llama3.1-8b-336",
    "problem_id": "p00395",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define MAX_W 1000\n#define MAX_H 1000\n#define MAX_S 10\n\ntypedef struct {\n    int x, y;\n} point;\n\ntypedef struct {\n    int x, y, item;\n} item;\n\nint dx[] = {-1, 1, 0, 0};\nint dy[] = {0, 0, -1, 1};\n\nint w, h;\nchar grid[MAX_H][MAX_W + 1];\nint score[MAX_S][MAX_S];\nint visited[MAX_H][MAX_W][1 << MAX_S];\nint dist[MAX_H][MAX_W][1 << MAX_S];\n\nint bfs(int sx, int sy, int mask) {\n    int i, j, k, x, y, d;\n    point q[MAX_H * MAX_W];\n    int front = 0, rear = 0;\n    int found = 0;\n\n    memset(visited, 0, sizeof(visited));\n    memset(dist, INT_MAX / 2, sizeof(dist));\n    dist[sx][sy][mask] = 0;\n    q[rear++] = (point){sx, sy};\n\n    while (front < rear) {\n        x = q[front].x;\n        y = q[front].y;\n        d = dist[x][y][mask];\n        front++;\n\n        for (i = 0; i < 4; i++) {\n            int nx = x + dx[i];\n            int ny = y + dy[i];\n\n            if (nx >= 0 && nx < h && ny >= 0 && ny < w && grid[nx][ny] != '#' && !visited[nx][ny][mask]) {\n                int nmask = mask;\n                if (grid[nx][ny] >= 'A' && grid[nx][ny] <= 'J' && (mask & (1 << (grid[nx][ny] - 'A'))) == 0) {\n                    nmask |= 1 << (grid[nx][ny] - 'A');\n                } else if (grid[nx][ny] >= 'a' && grid[nx][ny] <= 'j' && (mask & (1 << (grid[nx][ny] - 'a' + 10))) == 0) {\n                    nmask |= 1 << (grid[nx][ny] - 'a' + 10);\n                }\n\n                if (dist[nx][ny][nmask] == INT_MAX / 2) {\n                    dist[nx][ny][nmask] = d + 1;\n                    q[rear++] = (point){nx, ny};\n                    visited[nx][ny][nmask] = 1;\n                }\n            }\n        }\n\n        if (dist[x][y][mask] == INT_MAX / 2) {\n            found = 1;\n            break;\n        }\n    }\n\n    return found;\n}\n\nint main() {\n    int i, j, k, x, y, d, sx, sy, mask, found;\n    item items[MAX_S];\n    int item_count = 0;\n\n    scanf(\"%d %d\", &w, &h);\n    for (i = 0; i < h; i++) {\n        scanf(\"%s\", grid[i]);\n    }\n\n    for (i = 0; i < 10; i++) {\n        for (j = 0; j < 10; j++) {\n            scanf(\"%d\", &score[i][j]);\n        }\n    }\n\n    for (i = 0; i < h; i++) {\n        for (j = 0; j < w; j++) {\n            if (grid[i][j] == 'S') {\n                sx = i;\n                sy = j;\n            } else if (grid[i][j] >= '0' && grid[i][j] <= '9') {\n                items[item_count].x = i;\n                items[item_count].y = j;\n                items[item_count].item = grid[i][j] - '0';\n                item_count++;\n            } else if (grid[i][j] == 'T') {\n                x = i;\n                y = j;\n            }\n        }\n    }\n\n    found = 0;\n    mask = 0;\n    for (i = 0; i < item_count; i++) {\n        if (bfs(sx, sy, mask)) {\n            found = 1;\n            break;\n        }\n        mask |= 1 << items[i].item;\n    }\n\n    if (!found) {\n        printf(\"-1\\n\");\n        return 0;\n    }\n\n    d = dist[x][y][mask];\n    int max_score = 0;\n    for (i = 0; i < item_count; i++) {\n        int score_i = 0;\n        for (j = 0; j < item_count; j++) {\n            if (items[j].item != items[i].item) {\n                score_i += score[items[j].item][items[i].item];\n            }\n        }\n        max_score = std::max(max_score, score_i);\n    }\n\n    printf(\"%d %d\\n\", d, max_score);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}