{
    "solution_id": "llama3.1-8b-579",
    "problem_id": "p00658",
    "language": "Python",
    "solution": "```python\nfrom collections import deque\n\ndef is_valid(x, y, grid):\n    return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y] != '#'\n\ndef is_fragile(x, y, grid):\n    return 0 <= x < len(grid) and 0 <= y < len(grid[0]) and grid[x][y].isdigit()\n\ndef push(x, y, dx, grid):\n    if grid[x][y] == 'I':\n        while is_valid(x, y, grid) and grid[x][y] == 'I':\n            x += dx\n            y += dx\n    elif grid[x][y] != '#':\n        while is_valid(x, y, grid) and grid[x][y] != '#':\n            x += dx\n            y += dx\n\ndef pull(x, y, dx, grid):\n    if is_valid(x, y, grid) and grid[x][y] != '#':\n        grid[x][y] = '.'\n        grid[x][y + dx] = grid[x][y]\n\ndef get_down(x, y, dx, grid):\n    if is_valid(x, y, grid) and grid[x][y] != '#':\n        grid[x][y] = '.'\n        grid[x + dx][y] = grid[x][y]\n\ndef climb(x, y, dx, grid):\n    if is_valid(x, y, grid) and grid[x][y] != '#':\n        grid[x][y] = '.'\n        grid[x - 1][y + dx] = grid[x][y]\n\ndef fall(x, y, grid):\n    if not is_valid(x + 1, y, grid):\n        return\n    if grid[x + 1][y] == '.':\n        grid[x + 1][y] = grid[x][y]\n        grid[x][y] = '.'\n        fall(x + 1, y, grid)\n\ndef fall_blocks(x, y, grid):\n    if not is_valid(x + 1, y, grid):\n        return\n    if grid[x + 1][y] == '.':\n        fall(x + 1, y, grid)\n        fall_blocks(x + 1, y, grid)\n\ndef countdown(x, y, grid):\n    if is_fragile(x, y, grid):\n        grid[x][y] = str(int(grid[x][y]) - 1)\n\ndef check_game_over(x, y, grid):\n    if grid[x][y] == 'G':\n        return 'Game Over : Cleared'\n    elif grid[x][y] == 'B':\n        return 'Game Over : Death by Hole'\n    elif grid[x][y] == '.':\n        return 'Game Over : Death by Walking Goal'\n    elif grid[x][y] == 'S':\n        return 'Game Over : Death by Block'\n    return 'Game Over : Gave Up'\n\ndef main():\n    while True:\n        n, m = map(int, input().split())\n        if n == 0 and m == 0:\n            break\n        grid = [list(input()) for _ in range(n)]\n        x, y = 0, 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'S':\n                    x, y = i, j\n        queue = deque()\n        queue.append((x, y))\n        visited = [[False] * m for _ in range(n)]\n        visited[x][y] = True\n        while queue:\n            x, y = queue.popleft()\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nx, ny = x + dx, y + dy\n                if is_valid(nx, ny, grid) and not visited[nx][ny]:\n                    visited[nx][ny] = True\n                    queue.append((nx, ny))\n        commands = []\n        for _ in range(int(input())):\n            commands.append(input().split())\n        for command in commands:\n            if command[0] == 'MOVETO':\n                dx = int(command[1]) - y\n                if dx != 0:\n                    for i in range(n):\n                        if is_valid(i, y, grid):\n                            grid[i][y] = '.'\n                            grid[i][y + dx] = grid[i][y]\n                            x, y = i, y + dx\n                            break\n            elif command[0] == 'PUSH':\n                dx = 1 if command[1] == 'RIGHT' else -1\n                push(x, y, dx, grid)\n            elif command[0] == 'PULL':\n                dx = 1 if command[1] == 'RIGHT' else -1\n                pull(x, y, dx, grid)\n            elif command[0] == 'GETDOWN':\n                dx = 1 if command[1] == 'RIGHT' else -1\n                get_down(x, y, dx, grid)\n            elif command[0] == 'CLIMB':\n                dx = 1 if command[1] == 'RIGHT' else -1\n                climb(x, y, dx, grid)\n            for i in range(n):\n                for j in range(m):\n                    countdown(i, j, grid)\n            for i in range(n - 1, -1, -1):\n                for j in range(m):\n                    fall(i, j, grid)\n            for i in range(n - 1, -1, -1):\n                for j in range(m):\n                    fall_blocks(i, j, grid)\n            result = check_game_over(x, y, grid)\n            if result != 'Game Over : Gave Up':\n                print(result)\n                break\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}