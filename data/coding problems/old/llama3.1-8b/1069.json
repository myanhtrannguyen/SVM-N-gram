{
    "solution_id": "llama3.1-8b-1069",
    "problem_id": "p00804",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Order {\n    string name;\n    string type;\n    char commodity;\n    int price;\n    int index;\n};\n\nbool compareOrders(const Order& a, const Order& b) {\n    if (a.price != b.price) return a.price > b.price;\n    return a.index < b.index;\n}\n\nint main() {\n    int testCases;\n    cin >> testCases;\n\n    while (testCases--) {\n        int n;\n        cin >> n;\n\n        vector<Order> orders;\n        map<char, vector<Order>> commodityOrders;\n        map<string, pair<int, int>> dealerInfo;\n\n        for (int i = 0; i < n; i++) {\n            string name, type;\n            char commodity;\n            int price;\n            cin >> name >> type >> commodity >> price;\n\n            Order order;\n            order.name = name;\n            order.type = type;\n            order.commodity = commodity;\n            order.price = price;\n            order.index = i;\n\n            orders.push_back(order);\n            commodityOrders[commodity].push_back(order);\n        }\n\n        sort(orders.begin(), orders.end(), compareOrders);\n\n        map<char, pair<int, int>> commodityInfo;\n        for (auto& commodity : commodityOrders) {\n            vector<Order>& orders = commodity.commodityOrders;\n\n            int lowestPrice = orders[0].price;\n            int highestPrice = orders[0].price;\n            int totalPrice = 0;\n            int count = 0;\n\n            for (int i = 0; i < orders.size(); i++) {\n                Order& order = orders[i];\n\n                if (order.type == \"BUY\") {\n                    if (order.price <= lowestPrice) {\n                        lowestPrice = order.price;\n                        totalPrice = order.price;\n                        count = 1;\n                    } else if (order.price < highestPrice) {\n                        totalPrice += order.price;\n                        count++;\n                        highestPrice = order.price;\n                    }\n                } else {\n                    if (order.price >= highestPrice) {\n                        highestPrice = order.price;\n                        totalPrice = order.price;\n                        count = 1;\n                    } else if (order.price > lowestPrice) {\n                        totalPrice += order.price;\n                        count++;\n                        lowestPrice = order.price;\n                    }\n                }\n            }\n\n            if (count > 0) {\n                int averagePrice = (totalPrice + count - 1) / count;\n                commodityInfo[commodity.first] = {lowestPrice, averagePrice};\n            }\n        }\n\n        map<string, pair<int, int>> dealerInfo;\n        for (auto& order : orders) {\n            if (dealerInfo.find(order.name) == dealerInfo.end()) {\n                dealerInfo[order.name] = {0, 0};\n            }\n\n            if (order.type == \"BUY\") {\n                dealerInfo[order.name].first += order.price;\n            } else {\n                dealerInfo[order.name].second += order.price;\n            }\n        }\n\n        cout << \"Commodity Info:\" << endl;\n        for (auto& commodity : commodityInfo) {\n            cout << commodity.first << \" \" << commodity.second.first << \" \" << commodity.second.second << endl;\n        }\n        cout << \"-\\n\";\n\n        cout << \"Dealer Info:\" << endl;\n        for (auto& dealer : dealerInfo) {\n            cout << dealer.first << \" \" << dealer.second.first << \" \" << dealer.second.second << endl;\n        }\n        cout << \"-\\n\";\n        cout << \"-\\n\";\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}