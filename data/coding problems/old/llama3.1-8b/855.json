{
    "solution_id": "llama3.1-8b-855",
    "problem_id": "p00750",
    "language": "Python",
    "solution": "```python\nfrom collections import deque\nimport sys\n\ndef dfs(node, path, adj, s, g):\n    if node == g:\n        return path\n    for neighbor, label in adj[node]:\n        if neighbor not in path:\n            new_path = dfs(neighbor, path + [node] + [label], adj, s, g)\n            if new_path:\n                return new_path\n    return None\n\ndef find_spell(adj, s, g):\n    queue = deque([(s, [])])\n    visited = set()\n    while queue:\n        node, path = queue.popleft()\n        if node == g:\n            return path\n        if node not in visited:\n            visited.add(node)\n            for neighbor, label in adj[node]:\n                if neighbor not in visited:\n                    queue.append((neighbor, path + [node] + [label]))\n    return None\n\ndef find_most_powerful_spell(adj, s, g):\n    spell = find_spell(adj, s, g)\n    if not spell:\n        return \"NO\"\n    most_powerful = spell[0]\n    for i in range(1, len(spell)):\n        if spell[i] < most_powerful:\n            most_powerful = spell[i]\n    return \"\".join(most_powerful)\n\ndef main():\n    input_lines = sys.stdin.readlines()\n    i = 0\n    while i < len(input_lines):\n        n, a, s, g = map(int, input_lines[i].split())\n        i += 1\n        adj = {}\n        for _ in range(n):\n            adj[_] = []\n        for _ in range(a):\n            x, y, label = input_lines[i].split()\n            x, y = int(x), int(y)\n            adj[x].append((y, label))\n            i += 1\n        print(find_most_powerful_spell(adj, s, g))\n    return\n\nmain()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}