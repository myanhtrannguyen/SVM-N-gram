{
    "solution_id": "llama3.1-8b-1003",
    "problem_id": "p00787",
    "language": "Python",
    "solution": "```python\nimport math\n\ndef read_course():\n    inner = []\n    outer = []\n    while True:\n        line = input().split()\n        if line[0] == '99999':\n            break\n        for i in range(0, len(line), 2):\n            inner.append((int(line[i]), int(line[i+1])))\n        line = input().split()\n    while True:\n        line = input().split()\n        if line[0] == '99999':\n            break\n        for i in range(0, len(line), 2):\n            outer.append((int(line[i]), int(line[i+1])))\n    return inner, outer\n\ndef read_record():\n    sx, sy = map(int, input().split())\n    lap_time = float(input())\n    ax = []\n    ay = []\n    while True:\n        line = input().split()\n        if line[0] == '99999':\n            break\n        for i in range(0, len(line), 2):\n            ax.append(int(line[i]))\n            ay.append(int(line[i+1]))\n    return sx, sy, lap_time, ax, ay\n\ndef check_record(inner, outer, sx, sy, lap_time, ax, ay):\n    if not (0 <= sx <= 255 and 0 <= sy <= 255):\n        return False\n    if not (0 <= ax[i] <= 1 and 0 <= ay[i] <= 1 for i in range(len(ax))):\n        return False\n    if len(ax) != int(lap_time * 100):\n        return False\n    if not check_path(inner, outer, sx, sy, ax, ay):\n        return False\n    return True\n\ndef check_path(inner, outer, sx, sy, ax, ay):\n    x, y = sx, sy\n    for i in range(len(ax)):\n        x += ax[i]\n        y += ay[i]\n        if not (0 <= x <= 255 and 0 <= y <= 255):\n            return False\n        if not is_on_path(inner, outer, x, y):\n            return False\n    return True\n\ndef is_on_path(inner, outer, x, y):\n    for i in range(len(inner)):\n        if (inner[i][0] <= x <= inner[(i+1)%len(inner)][0] and\n            inner[i][1] <= y <= inner[(i+1)%len(inner)][1]):\n            return True\n        if (outer[i][0] <= x <= outer[(i+1)%len(outer)][0] and\n            outer[i][1] <= y <= outer[(i+1)%len(outer)][1]):\n            return True\n    return False\n\ndef main():\n    inner, outer = read_course()\n    while True:\n        sx, sy, lap_time, ax, ay = read_record()\n        if check_record(inner, outer, sx, sy, lap_time, ax, ay):\n            print('OK')\n        else:\n            print('NG')\n        if input() == '99999':\n            break\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}