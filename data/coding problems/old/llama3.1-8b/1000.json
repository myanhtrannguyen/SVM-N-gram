{
    "solution_id": "llama3.1-8b-1000",
    "problem_id": "p00787",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAX_N 100\n#define MAX_M 100\n#define MAX_L 500\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    int x, y;\n    int ax, ay;\n} Acceleration;\n\nint compare_points(const void *a, const void *b) {\n    Point *p1 = (Point *)a;\n    Point *p2 = (Point *)b;\n    return (p1->x - p2->x) || (p1->y - p2->y);\n}\n\nint compare_accelerations(const void *a, const void *b) {\n    Acceleration *p1 = (Acceleration *)a;\n    Acceleration *p2 = (Acceleration *)b;\n    return (p1->x - p2->x) || (p1->y - p2->y) || (p1->ax - p2->ax) || (p1->ay - p2->ay);\n}\n\nint is_clockwise(Point p1, Point p2, Point p3) {\n    return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;\n}\n\nint is_inside(Point p, Point *wall, int n) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (is_clockwise(p, wall[i], wall[(i + 1) % n])) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint is_valid_acceleration(Acceleration a) {\n    return a.ax == -1 || a.ax == 0 || a.ax == 1 || a.ay == -1 || a.ay == 0 || a.ay == 1;\n}\n\nint main() {\n    int n, m, l, i, j, k, sx, sy, lap_time, t, x, y, ax, ay;\n    Point wall_in[MAX_N * 2], wall_out[MAX_M * 2];\n    Acceleration acc[MAX_L];\n    FILE *fp;\n\n    while (1) {\n        scanf(\"%d\", &n);\n        for (i = 0; i < n; i++) {\n            scanf(\"%d\", &x);\n            wall_in[i].x = x;\n            scanf(\"%d\", &y);\n            wall_in[i].y = y;\n        }\n        scanf(\"%d\", &m);\n        for (i = 0; i < m; i++) {\n            scanf(\"%d\", &x);\n            wall_out[i].x = x;\n            scanf(\"%d\", &y);\n            wall_out[i].y = y;\n        }\n        qsort(wall_in, n, sizeof(Point), compare_points);\n        qsort(wall_out, m, sizeof(Point), compare_points);\n\n        while (1) {\n            scanf(\"%d %d\", &sx, &sy);\n            if (sx == 99999 && sy == 99999) {\n                break;\n            }\n            scanf(\"%f\", &lap_time);\n            l = 0;\n            while (1) {\n                scanf(\"%d %d\", &ax, &ay);\n                if (ax == 99999 && ay == 99999) {\n                    break;\n                }\n                acc[l].x = ax;\n                acc[l].y = ay;\n                l++;\n            }\n\n            if (is_inside((Point){sx, sy}, wall_in, n) && is_inside((Point){sx, sy}, wall_out, m)) {\n                if (l != (int)lap_time * 1000 + 1) {\n                    printf(\"NG\\n\");\n                    continue;\n                }\n                for (i = 0; i < l; i++) {\n                    if (!is_valid_acceleration(acc[i])) {\n                        printf(\"NG\\n\");\n                        goto next_record;\n                    }\n                }\n                x = sx;\n                y = sy;\n                t = 0;\n                for (i = 0; i < l; i++) {\n                    ax = acc[i].ax;\n                    ay = acc[i].ay;\n                    x += ax;\n                    y += ay;\n                    t++;\n                    if (is_inside((Point){x, y}, wall_in, n) || is_inside((Point){x, y}, wall_out, m)) {\n                        printf(\"NG\\n\");\n                        goto next_record;\n                    }\n                }\n                if (is_inside((Point){x, y}, wall_in, n) || is_inside((Point){x, y}, wall_out, m)) {\n                    printf(\"NG\\n\");\n                    goto next_record;\n                }\n                double time = (double)t / 1000;\n                if (fabs(time - lap_time) > 0.01) {\n                    printf(\"NG\\n\");\n                    goto next_record;\n                }\n                printf(\"OK\\n\");\n            } else {\n                printf(\"NG\\n\");\n            }\n            next_record:;\n        }\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}