{
    "solution_id": "llama3.1-8b-3857",
    "problem_id": "p02285",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Node {\n    int key;\n    Node* left;\n    Node* right;\n    Node* parent;\n};\n\nclass BinarySearchTree {\npublic:\n    Node* root;\n\n    BinarySearchTree() : root(nullptr) {}\n\n    void insert(int key) {\n        Node* node = new Node{key, nullptr, nullptr, nullptr};\n        if (root == nullptr) {\n            root = node;\n        } else {\n            Node* current = root;\n            while (true) {\n                if (key < current->key) {\n                    if (current->left == nullptr) {\n                        current->left = node;\n                        node->parent = current;\n                        break;\n                    }\n                    current = current->left;\n                } else {\n                    if (current->right == nullptr) {\n                        current->right = node;\n                        node->parent = current;\n                        break;\n                    }\n                    current = current->right;\n                }\n            }\n        }\n    }\n\n    bool find(int key) {\n        Node* current = root;\n        while (current != nullptr) {\n            if (key == current->key) {\n                return true;\n            } else if (key < current->key) {\n                current = current->left;\n            } else {\n                current = current->right;\n            }\n        }\n        return false;\n    }\n\n    void deleteNode(int key) {\n        Node* node = findNode(key);\n        if (node == nullptr) {\n            return;\n        }\n        Node* replacement;\n        if (node->left == nullptr) {\n            replacement = node->right;\n            if (replacement != nullptr) {\n                replacement->parent = node->parent;\n            }\n        } else if (node->right == nullptr) {\n            replacement = node->left;\n            if (replacement != nullptr) {\n                replacement->parent = node->parent;\n            }\n        } else {\n            Node* successor = node->right;\n            while (successor->left != nullptr) {\n                successor = successor->left;\n            }\n            replacement = successor;\n            if (replacement->parent != node) {\n                replacement->parent->left = replacement->right;\n                if (replacement->right != nullptr) {\n                    replacement->right->parent = replacement->parent;\n                }\n                replacement->parent = node->parent;\n                replacement->left = node->left;\n                if (replacement->left != nullptr) {\n                    replacement->left->parent = replacement;\n                }\n                replacement->right = node->right;\n                if (replacement->right != nullptr) {\n                    replacement->right->parent = replacement;\n                }\n            } else {\n                replacement->parent = node->parent;\n                replacement->left = node->left;\n                if (replacement->left != nullptr) {\n                    replacement->left->parent = replacement;\n                }\n                replacement->right = node->right;\n                if (replacement->right != nullptr) {\n                    replacement->right->parent = replacement;\n                }\n            }\n        }\n        if (node->parent == nullptr) {\n            root = replacement;\n        } else if (node == node->parent->left) {\n            node->parent->left = replacement;\n        } else {\n            node->parent->right = replacement;\n        }\n        if (replacement != nullptr) {\n            replacement->parent = node->parent;\n        }\n        delete node;\n    }\n\n    void printInorder() {\n        vector<int> keys;\n        printInorder(root, keys);\n        for (int key : keys) {\n            cout << key << \" \";\n        }\n        cout << endl;\n    }\n\n    void printPreorder() {\n        vector<int> keys;\n        printPreorder(root, keys);\n        for (int key : keys) {\n            cout << key << \" \";\n        }\n        cout << endl;\n    }\n\nprivate:\n    void printInorder(Node* node, vector<int>& keys) {\n        if (node != nullptr) {\n            printInorder(node->left, keys);\n            keys.push_back(node->key);\n            printInorder(node->right, keys);\n        }\n    }\n\n    void printPreorder(Node* node, vector<int>& keys) {\n        if (node != nullptr) {\n            keys.push_back(node->key);\n            printPreorder(node->left, keys);\n            printPreorder(node->right, keys);\n        }\n    }\n\n    Node* findNode(int key) {\n        Node* current = root;\n        while (current != nullptr) {\n            if (key == current->key) {\n                return current;\n            } else if (key < current->key) {\n                current = current->left;\n            } else {\n                current = current->right;\n            }\n        }\n        return nullptr;\n    }\n};\n\nint main() {\n    int m;\n    cin >> m;\n    BinarySearchTree bst;\n    while (m--) {\n        string op;\n        int key;\n        cin >> op;\n        if (op == \"insert\") {\n            cin >> key;\n            bst.insert(key);\n        } else if (op == \"find\") {\n            cin >> key;\n            cout << (bst.find(key) ? \"yes\" : \"no\") << endl;\n        } else if (op == \"delete\") {\n            cin >> key;\n            bst.deleteNode(key);\n        } else if (op == \"print\") {\n            bst.printInorder();\n            bst.printPreorder();\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}