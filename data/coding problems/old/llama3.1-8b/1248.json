{
    "solution_id": "llama3.1-8b-1248",
    "problem_id": "p00849",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAXN 10\n#define MAXM 10\n\nint n, m;\nint grid[MAXN][MAXM];\nint dist[MAXN][MAXM];\nint dist2[MAXN][MAXM];\nint dist3[MAXN][MAXM];\nint dist2i[MAXN][MAXM];\nint dist3i[MAXN][MAXM];\n\nint bfs(int *dist, int *disti, int x, int y, int target) {\n    int i, j, k, x1, y1, x2, y2;\n    int queue[MAXN * MAXM], front, rear;\n    front = 0;\n    rear = 0;\n    queue[rear++] = x * m + y;\n    dist[x][y] = 0;\n    disti[x][y] = -1;\n    while (front < rear) {\n        i = queue[front] / m;\n        j = queue[front] % m;\n        front++;\n        if (grid[i][j] == target) return 1;\n        for (k = 0; k < 4; k++) {\n            x1 = i + dx[k];\n            y1 = j + dy[k];\n            if (x1 >= 0 && x1 < n && y1 >= 0 && y1 < m && grid[x1][y1] == 0 && dist[x1][y1] == -1) {\n                dist[x1][y1] = dist[i][j] + 1;\n                disti[x1][y1] = k;\n                queue[rear++] = x1 * m + y1;\n            }\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int i, j, k, x, y, x1, y1, x2, y2, len, len2, len3, len2i, len3i, ans;\n    int dx[] = {1, 0, -1, 0};\n    int dy[] = {0, 1, 0, -1};\n    char c;\n    while (scanf(\"%d %d\", &n, &m) == 2) {\n        if (n == 0 && m == 0) break;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                scanf(\" %c\", &c);\n                grid[i][j] = c - '0';\n            }\n        }\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                dist[i][j] = -1;\n                dist2[i][j] = -1;\n                dist3[i][j] = -1;\n                dist2i[i][j] = -1;\n                dist3i[i][j] = -1;\n            }\n        }\n        ans = 0;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < m; j++) {\n                if (grid[i][j] == 2) {\n                    if (bfs(dist2, dist2i, i, j, 2)) {\n                        len2 = 0;\n                        x = i;\n                        y = j;\n                        while (x >= 0 && x < n && y >= 0 && y < m) {\n                            len2++;\n                            x += dx[dist2i[x][y]];\n                            y += dy[dist2i[x][y]];\n                        }\n                        for (k = 0; k < 4; k++) {\n                            x1 = i + dx[k];\n                            y1 = j + dy[k];\n                            if (x1 >= 0 && x1 < n && y1 >= 0 && y1 < m && grid[x1][y1] == 0 && dist2[x1][y1] == -1) {\n                                if (bfs(dist2, dist2i, x1, y1, 2)) {\n                                    len2i = 0;\n                                    x = x1;\n                                    y = y1;\n                                    while (x >= 0 && x < n && y >= 0 && y < m) {\n                                        len2i++;\n                                        x += dx[dist2i[x][y]];\n                                        y += dy[dist2i[x][y]];\n                                    }\n                                    ans = max(ans, len2 + len2i);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (grid[i][j] == 3) {\n                    if (bfs(dist3, dist3i, i, j, 3)) {\n                        len3 = 0;\n                        x = i;\n                        y = j;\n                        while (x >= 0 && x < n && y >= 0 && y < m) {\n                            len3++;\n                            x += dx[dist3i[x][y]];\n                            y += dy[dist3i[x][y]];\n                        }\n                        for (k = 0; k < 4; k++) {\n                            x1 = i + dx[k];\n                            y1 = j + dy[k];\n                            if (x1 >= 0 && x1 < n && y1 >= 0 && y1 < m && grid[x1][y1] == 0 && dist3[x1][y1] == -1) {\n                                if (bfs(dist3, dist3i, x1, y1, 3)) {\n                                    len3i = 0;\n                                    x = x1;\n                                    y = y1;\n                                    while (x >= 0 && x < n && y >= 0 && y < m) {\n                                        len3i++;\n                                        x += dx[dist3i[x][y]];\n                                        y += dy[dist3i[x][y]];\n                                    }\n                                    ans = max(ans, len3 + len3i);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%d\\n\", ans);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}