{
    "solution_id": "llama3.1-8b-1070",
    "problem_id": "p00804",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Order implements Comparable<Order> {\n        String name;\n        String type;\n        char commodity;\n        int price;\n        int time;\n\n        public Order(String name, String type, char commodity, int price, int time) {\n            this.name = name;\n            this.type = type;\n            this.commodity = commodity;\n            this.price = price;\n            this.time = time;\n        }\n\n        @Override\n        public int compareTo(Order o) {\n            if (this.time != o.time) {\n                return this.time - o.time;\n            } else if (this.price != o.price) {\n                return this.price - o.price;\n            } else {\n                return this.name.compareTo(o.name);\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            List<Order> orders = new ArrayList<>();\n            Map<Character, List<Order>> commodityMap = new HashMap<>();\n            Map<String, List<Order>> dealerMap = new HashMap<>();\n            Map<String, Integer> paid = new HashMap<>();\n            Map<String, Integer> received = new HashMap<>();\n\n            for (int i = 0; i < n; i++) {\n                String[] line = br.readLine().split(\" \");\n                String name = line[0];\n                String type = line[1];\n                char commodity = line[2].charAt(0);\n                int price = Integer.parseInt(line[3]);\n                int time = 7 + i;\n                orders.add(new Order(name, type, commodity, price, time));\n                if (!commodityMap.containsKey(commodity)) {\n                    commodityMap.put(commodity, new ArrayList<>());\n                }\n                commodityMap.get(commodity).add(orders.get(i));\n                if (!dealerMap.containsKey(name)) {\n                    dealerMap.put(name, new ArrayList<>());\n                }\n                dealerMap.get(name).add(orders.get(i));\n            }\n\n            Collections.sort(orders);\n\n            for (int i = 0; i < n; i++) {\n                Order order = orders.get(i);\n                if (order.type.equals(\"BUY\")) {\n                    if (commodityMap.containsKey(order.commodity)) {\n                        List<Order> commodityOrders = commodityMap.get(order.commodity);\n                        Collections.sort(commodityOrders);\n                        for (int j = 0; j < commodityOrders.size(); j++) {\n                            Order commodityOrder = commodityOrders.get(j);\n                            if (commodityOrder.type.equals(\"SELL\") && commodityOrder.price <= order.price && commodityOrder.name.equals(order.name)) {\n                                continue;\n                            } else if (commodityOrder.type.equals(\"SELL\") && commodityOrder.price <= order.price) {\n                                int dealPrice = (commodityOrder.price + order.price) / 2;\n                                commodityOrder.price = 0;\n                                order.price = 0;\n                                commodityMap.put(commodityOrder.commodity, commodityOrders.subList(0, j));\n                                commodityMap.put(order.commodity, commodityOrders.subList(j + 1, commodityOrders.size()));\n                                commodityOrders.remove(j);\n                                commodityOrders.remove(j);\n                                commodityMap.put(commodityOrder.commodity, commodityOrders);\n                                commodityMap.put(order.commodity, commodityOrders);\n                                commodityOrders.add(new Order(order.name, \"BUY\", order.commodity, dealPrice, order.time));\n                                commodityOrders.add(new Order(commodityOrder.name, \"SELL\", commodityOrder.commodity, dealPrice, commodityOrder.time));\n                                commodityMap.put(commodityOrder.commodity, commodityOrders);\n                                commodityMap.put(order.commodity, commodityOrders);\n                                paid.put(order.name, paid.getOrDefault(order.name, 0) + dealPrice);\n                                received.put(commodityOrder.name, received.getOrDefault(commodityOrder.name, 0) + dealPrice);\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    if (commodityMap.containsKey(order.commodity)) {\n                        List<Order> commodityOrders = commodityMap.get(order.commodity);\n                        Collections.sort(commodityOrders);\n                        for (int j = 0; j < commodityOrders.size(); j++) {\n                            Order commodityOrder = commodityOrders.get(j);\n                            if (commodityOrder.type.equals(\"BUY\") && commodityOrder.price >= order.price && commodityOrder.name.equals(order.name)) {\n                                continue;\n                            } else if (commodityOrder.type.equals(\"BUY\") && commodityOrder.price >= order.price) {\n                                int dealPrice = (commodityOrder.price + order.price) / 2;\n                                commodityOrder.price = 0;\n                                order.price = 0;\n                                commodityMap.put(commodityOrder.commodity, commodityOrders.subList(0, j));\n                                commodityMap.put(order.commodity, commodityOrders.subList(j + 1, commodityOrders.size()));\n                                commodityOrders.remove(j);\n                                commodityOrders.remove(j);\n                                commodityMap.put(commodityOrder.commodity, commodityOrders);\n                                commodityMap.put(order.commodity, commodityOrders);\n                                commodityOrders.add(new Order(order.name, \"SELL\", order.commodity, dealPrice, order.time));\n                                commodityOrders.add(new Order(commodityOrder.name, \"BUY\", commodityOrder.commodity, dealPrice, commodityOrder.time));\n                                commodityMap.put(commodityOrder.commodity, commodityOrders);\n                                commodityMap.put(order.commodity, commodityOrders);\n                                received.put(order.name, received.getOrDefault(order.name, 0) + dealPrice);\n                                paid.put(commodityOrder.name, paid.getOrDefault(commodityOrder.name, 0) + dealPrice);\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            for (char commodity : commodityMap.keySet()) {\n                List<Order> commodityOrders = commodityMap.get(commodity);\n                Collections.sort(commodityOrders);\n                int minPrice = Integer.MAX_VALUE;\n                int maxPrice = Integer.MIN_VALUE;\n                int sumPrice = 0;\n                for (Order order : commodityOrders) {\n                    if (order.price != 0) {\n                        minPrice = Math.min(minPrice, order.price);\n                        maxPrice = Math.max(maxPrice, order.price);\n                        sumPrice += order.price;\n                    }\n                }\n                if (minPrice != Integer.MAX_VALUE) {\n                    System.out.println(commodity + \" \" + minPrice + \" \" + (sumPrice / (commodityOrders.size() - commodityOrders.stream().filter(order -> order.price == 0).count())) + \" \" + maxPrice);\n                }\n            }\n            System.out.println(\"--\");\n            for (String dealer : dealerMap.keySet()) {\n                List<Order> dealerOrders = dealerMap.get(dealer);\n                int paidAmount = 0;\n                int receivedAmount = 0;\n                for (Order order : dealerOrders) {\n                    if (order.price != 0) {\n                        if (order.type.equals(\"BUY\")) {\n                            receivedAmount += order.price;\n                        } else {\n                            paidAmount += order.price;\n                        }\n                    }\n                }\n                System.out.println(dealer + \" \" + paidAmount + \" \" + receivedAmount);\n            }\n            System.out.println(\"----------\");\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}