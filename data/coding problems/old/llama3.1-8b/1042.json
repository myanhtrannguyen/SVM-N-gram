{
    "solution_id": "llama3.1-8b-1042",
    "problem_id": "p00797",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Node {\n        String name;\n        int level;\n        Node parent;\n        List<Node> children = new ArrayList<>();\n        List<Node> siblings = new ArrayList<>();\n\n        public Node(String name, int level) {\n            this.name = name;\n            this.level = level;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        String[] input;\n        while ((input = br.readLine().split(\" \")) != null && input.length == 2) {\n            int n = Integer.parseInt(input[0]);\n            int m = Integer.parseInt(input[1]);\n\n            Node root = null;\n            Node current = null;\n            int level = 0;\n            for (int i = 0; i < n; i++) {\n                String name = br.readLine().trim();\n                if (name.length() == 0) continue;\n                int newLevel = name.length() - name.replaceAll(\" \", \"\").length();\n                if (newLevel > level) {\n                    level = newLevel;\n                    if (current != null) {\n                        current.siblings.add(new Node(name, level));\n                        current = null;\n                    } else {\n                        root = new Node(name, level);\n                    }\n                } else {\n                    if (current == null) {\n                        current = root;\n                    }\n                    current.children.add(new Node(name, level));\n                    current = current.children.get(current.children.size() - 1);\n                }\n            }\n\n            for (int i = 0; i < m; i++) {\n                String statement = br.readLine().trim();\n                String[] parts = statement.split(\" \");\n                String person1 = parts[0] + \" \" + parts[1];\n                String person2 = parts[2] + \" \" + parts[3];\n                boolean isTrue = checkStatement(root, person1, person2);\n                pw.println(isTrue ? \"True\" : \"False\");\n            }\n            pw.println();\n        }\n\n        pw.close();\n    }\n\n    static boolean checkStatement(Node root, String person1, String person2) {\n        String[] parts1 = person1.split(\" \");\n        String[] parts2 = person2.split(\" \");\n        String name1 = parts1[0];\n        String name2 = parts2[0];\n\n        if (name1.equals(name2)) return false;\n\n        Node node1 = findNode(root, name1);\n        Node node2 = findNode(root, name2);\n\n        if (node1 == null || node2 == null) return false;\n\n        if (node1.equals(node2)) return false;\n\n        if (parts1[1].equals(\"is a child of\")) {\n            return node1.parent != null && node1.parent.equals(node2);\n        } else if (parts1[1].equals(\"is the parent of\")) {\n            return node1.children.contains(node2);\n        } else if (parts1[1].equals(\"is a sibling of\")) {\n            return node1.siblings.contains(node2);\n        } else if (parts1[1].equals(\"is a descendant of\")) {\n            return isDescendant(node1, node2);\n        } else if (parts1[1].equals(\"is an ancestor of\")) {\n            return isAncestor(node1, node2);\n        }\n\n        return false;\n    }\n\n    static Node findNode(Node root, String name) {\n        if (root == null) return null;\n        if (root.name.equals(name)) return root;\n        for (Node child : root.children) {\n            Node node = findNode(child, name);\n            if (node != null) return node;\n        }\n        for (Node sibling : root.siblings) {\n            Node node = findNode(sibling, name);\n            if (node != null) return node;\n        }\n        return null;\n    }\n\n    static boolean isDescendant(Node node, Node ancestor) {\n        if (node == null) return false;\n        if (node.equals(ancestor)) return true;\n        for (Node child : node.children) {\n            if (isDescendant(child, ancestor)) return true;\n        }\n        return false;\n    }\n\n    static boolean isAncestor(Node node, Node descendant) {\n        if (node == null) return false;\n        if (node.equals(descendant)) return true;\n        for (Node child : node.children) {\n            if (isAncestor(child, descendant)) return true;\n        }\n        return false;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}