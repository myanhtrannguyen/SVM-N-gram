{
    "solution_id": "llama3.1-8b-760",
    "problem_id": "p00727",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <math.h>\n\n#define EPS 1e-10\n\nint n;\ndouble x[100], y[100];\n\ndouble cross(double x1, double y1, double x2, double y2) {\n    return x1 * y2 - x2 * y1;\n}\n\ndouble dot(double x1, double y1, double x2, double y2) {\n    return x1 * x2 + y1 * y2;\n}\n\ndouble dist(double x1, double y1, double x2, double y2) {\n    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\ndouble angle(double x1, double y1, double x2, double y2) {\n    return atan2(y2 - y1, x2 - x1);\n}\n\ndouble min_angle, max_angle;\n\nvoid update(double theta) {\n    double min_width = 0, max_width = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            double x1 = x[i], y1 = y[i];\n            double x2 = x[j], y2 = y[j];\n            double x3 = x1 + cos(theta), y3 = y1 + sin(theta);\n            double x4 = x2 + cos(theta), y4 = y2 + sin(theta);\n            double width = dist(x3, y3, x4, y4);\n            if (width < min_width) min_width = width;\n            if (width > max_width) max_width = width;\n        }\n    }\n    if (min_width < EPS) min_angle = theta;\n    if (max_width > EPS) max_angle = theta;\n}\n\nint main() {\n    while (scanf(\"%d\", &n) == 1) {\n        if (n == 0) break;\n        for (int i = 0; i < n; i++) {\n            scanf(\"%lf %lf\", &x[i], &y[i]);\n        }\n        min_angle = max_angle = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(0), y3 = y1 + sin(0);\n                double x4 = x2 + cos(0), y4 = y2 + sin(0);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 0;\n                if (width > EPS) max_angle = 0;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(M_PI), y3 = y1 + sin(M_PI);\n                double x4 = x2 + cos(M_PI), y4 = y2 + sin(M_PI);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = M_PI;\n                if (width > EPS) max_angle = M_PI;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(M_PI / 2), y3 = y1 + sin(M_PI / 2);\n                double x4 = x2 + cos(M_PI / 2), y4 = y2 + sin(M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = M_PI / 2;\n                if (width > EPS) max_angle = M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(3 * M_PI / 2), y3 = y1 + sin(3 * M_PI / 2);\n                double x4 = x2 + cos(3 * M_PI / 2), y4 = y2 + sin(3 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 3 * M_PI / 2;\n                if (width > EPS) max_angle = 3 * M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(5 * M_PI / 2), y3 = y1 + sin(5 * M_PI / 2);\n                double x4 = x2 + cos(5 * M_PI / 2), y4 = y2 + sin(5 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 5 * M_PI / 2;\n                if (width > EPS) max_angle = 5 * M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(7 * M_PI / 2), y3 = y1 + sin(7 * M_PI / 2);\n                double x4 = x2 + cos(7 * M_PI / 2), y4 = y2 + sin(7 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 7 * M_PI / 2;\n                if (width > EPS) max_angle = 7 * M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(9 * M_PI / 2), y3 = y1 + sin(9 * M_PI / 2);\n                double x4 = x2 + cos(9 * M_PI / 2), y4 = y2 + sin(9 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 9 * M_PI / 2;\n                if (width > EPS) max_angle = 9 * M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(11 * M_PI / 2), y3 = y1 + sin(11 * M_PI / 2);\n                double x4 = x2 + cos(11 * M_PI / 2), y4 = y2 + sin(11 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 11 * M_PI / 2;\n                if (width > EPS) max_angle = 11 * M_PI / 2;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                double x1 = x[i], y1 = y[i];\n                double x2 = x[j], y2 = y[j];\n                double x3 = x1 + cos(13 * M_PI / 2), y3 = y1 + sin(13 * M_PI / 2);\n                double x4 = x2 + cos(13 * M_PI / 2), y4 = y2 + sin(13 * M_PI / 2);\n                double width = dist(x3, y3, x4, y4);\n                if (width < EPS) min_angle = 13 *",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}