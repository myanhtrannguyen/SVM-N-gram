{
    "solution_id": "llama3.1-8b-750",
    "problem_id": "p00724",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Point point = (Point) o;\n            return x == point.x && y == point.y;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n\n    static class State implements Comparable<State> {\n        int dist, moves;\n        Point head, tail;\n\n        public State(int dist, int moves, Point head, Point tail) {\n            this.dist = dist;\n            this.moves = moves;\n            this.head = head;\n            this.tail = tail;\n        }\n\n        @Override\n        public int compareTo(State other) {\n            return Integer.compare(this.dist, other.dist);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            Point[] s = new Point[n];\n            for (int i = 0; i < n; i++) {\n                st = new StringTokenizer(br.readLine());\n                s[i] = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n            }\n            int k = Integer.parseInt(br.readLine());\n            Point[] r = new Point[k];\n            for (int i = 0; i < k; i++) {\n                st = new StringTokenizer(br.readLine());\n                r[i] = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n            }\n            st = new StringTokenizer(br.readLine());\n            Point goal = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n            Set<Point> rocks = new HashSet<>();\n            for (Point p : r) {\n                rocks.add(p);\n            }\n            int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n            Queue<State> q = new LinkedList<>();\n            Set<Point> visited = new HashSet<>();\n            q.add(new State(0, 0, s[0], s[n - 1]));\n            visited.add(s[0]);\n            while (!q.isEmpty()) {\n                State state = q.poll();\n                if (state.head.equals(goal)) {\n                    System.out.println(state.moves);\n                    break;\n                }\n                for (int[] dir : dirs) {\n                    Point newHead = new Point(state.head.x + dir[0], state.head.y + dir[1]);\n                    if (!visited.contains(newHead) && !rocks.contains(newHead)) {\n                        q.add(new State(state.dist + 1, state.moves + 1, newHead, state.tail));\n                        visited.add(newHead);\n                    }\n                }\n                for (int i = 0; i < n - 1; i++) {\n                    Point newTail = new Point(state.tail.x + dirs[(i + 1) % 4][0], state.tail.y + dirs[(i + 1) % 4][1]);\n                    if (!visited.contains(newTail) && !rocks.contains(newTail)) {\n                        q.add(new State(state.dist + 1, state.moves + 1, state.head, newTail));\n                        visited.add(newTail);\n                    }\n                }\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}