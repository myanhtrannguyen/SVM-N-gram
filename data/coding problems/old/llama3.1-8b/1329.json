{
    "solution_id": "llama3.1-8b-1329",
    "problem_id": "p00869",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <queue>\n#include <limits>\n\nusing namespace std;\n\nconst int INF = numeric_limits<int>::max();\n\nstruct State {\n    int x, y, dir;\n    int color;\n    int steps;\n    int visited[7];\n};\n\nint main() {\n    int w, d;\n    while (cin >> w >> d) {\n        if (w == 0 && d == 0) break;\n\n        vector<string> grid(d);\n        for (int i = 0; i < d; i++) {\n            cin >> grid[i];\n        }\n\n        string order;\n        cin >> order;\n\n        int colors[7] = {0};\n        for (int i = 0; i < 6; i++) {\n            colors[order[i] - 'a'] = i;\n        }\n\n        vector<vector<int>> dist(d, vector<int>(w, INF));\n        vector<vector<int>> prev(d, vector<int>(w, -1));\n\n        queue<pair<int, int>> q;\n        for (int i = 0; i < d; i++) {\n            for (int j = 0; j < w; j++) {\n                if (grid[i][j] == '#') {\n                    q.push({i, j});\n                    dist[i][j] = 0;\n                }\n            }\n        }\n\n        int dx[] = {0, 0, -1, 1};\n        int dy[] = {-1, 1, 0, 0};\n\n        while (!q.empty()) {\n            int x = q.front().first;\n            int y = q.front().second;\n            q.pop();\n\n            for (int i = 0; i < 4; i++) {\n                int nx = x + dx[i];\n                int ny = y + dy[i];\n\n                if (nx >= 0 && nx < d && ny >= 0 && ny < w && grid[nx][ny] != 'k') {\n                    int color = colors[grid[nx][ny] - 'a'];\n                    if (dist[nx][ny] == INF) {\n                        dist[nx][ny] = dist[x][y] + 1;\n                        prev[nx][ny] = x;\n                        q.push({nx, ny});\n                    }\n                }\n            }\n        }\n\n        int ans = INF;\n        for (int i = 0; i < d; i++) {\n            for (int j = 0; j < w; j++) {\n                if (grid[i][j] == '#') {\n                    int color = colors[grid[i][j] - 'a'];\n                    int steps = dist[i][j];\n                    int x = i;\n                    int y = j;\n                    int dir = 0;\n                    int visited[7] = {0};\n\n                    while (true) {\n                        visited[color] = 1;\n                        color = colors[grid[x][y] - 'a'];\n                        if (color == 6) break;\n\n                        int nx = x + dx[dir];\n                        int ny = y + dy[dir];\n\n                        if (nx >= 0 && nx < d && ny >= 0 && ny < w && grid[nx][ny] != 'k') {\n                            if (visited[colors[grid[nx][ny] - 'a']] == 1) {\n                                ans = INF;\n                                goto end;\n                            }\n                            x = nx;\n                            y = ny;\n                        } else {\n                            dir = (dir + 1) % 4;\n                            x += dx[dir];\n                            y += dy[dir];\n                        }\n\n                        steps++;\n                    }\n\n                    ans = min(ans, steps);\n                end:;\n                }\n            }\n        }\n\n        if (ans == INF) {\n            cout << \"unreachable\" << endl;\n        } else {\n            cout << ans << endl;\n        }\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}