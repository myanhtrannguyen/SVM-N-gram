{
    "solution_id": "llama3.1-8b-3348",
    "problem_id": "p01882",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define N 50000\n#define M 20000\n#define N_ 0.2\n\ntypedef struct {\n    char name[21];\n    int motivation;\n    int work;\n} member;\n\nint cmp(const void *a, const void *b) {\n    member *m1 = (member *)a;\n    member *m2 = (member *)b;\n    if (m1->motivation != m2->motivation) return m1->motivation - m2->motivation;\n    return m1->work - m2->work;\n}\n\nint main() {\n    member m[N + M];\n    int n, m_, i, j, k, l, top, rank;\n\n    scanf(\"%d\", &n);\n    for (i = 0; i < n; i++) {\n        scanf(\"%s %d\", m[i].name, &m[i].motivation);\n        m[i].work = 0;\n    }\n\n    scanf(\"%d\", &m_);\n    for (i = 0; i < m_; i++) {\n        char op[3];\n        scanf(\"%s\", op);\n        if (op[0] == '+') {\n            scanf(\"%s %d\", m[i + n].name, &m[i + n].motivation);\n            m[i + n].work = 0;\n        } else {\n            scanf(\"%s\", m[i + n].name);\n            m[i + n].motivation = 0;\n            m[i + n].work = 0;\n        }\n    }\n\n    qsort(m, n + m, sizeof(member), cmp);\n\n    for (i = 0; i < n + m; i++) {\n        for (j = 0; j < n; j++) {\n            if (strcmp(m[i].name, m[j].name) == 0) {\n                m[i].work = m[j].work;\n                break;\n            }\n        }\n    }\n\n    top = (int)(n * N_);\n    for (i = 0; i < n + m; i++) {\n        if (i < top) m[i].work = 1;\n        else m[i].work = 0;\n    }\n\n    qsort(m, n + m, sizeof(member), cmp);\n\n    for (i = 0; i < n + m; i++) {\n        for (j = 0; j < n; j++) {\n            if (strcmp(m[i].name, m[j].name) == 0) {\n                m[i].work = m[j].work;\n                break;\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        for (j = 0; j < n; j++) {\n            if (strcmp(m[i].name, m[j].name) == 0) {\n                m[i].work = m[j].work;\n                break;\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0; j < n; j++) {\n                if (strcmp(m[i].name, m[j].name) == 0) {\n                    m[i].work = m[j].work;\n                    break;\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < n + m; i++) {\n        if (m[i].motivation != 0) {\n            for (j = 0",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}