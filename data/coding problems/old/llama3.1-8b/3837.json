{
    "solution_id": "llama3.1-8b-3837",
    "problem_id": "p02280",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstruct Node {\n    int id;\n    int parent;\n    int left;\n    int right;\n    int degree;\n    int depth;\n    int height;\n    string type;\n};\n\nvoid dfs(vector<Node>& nodes, int node, int parent, int depth) {\n    nodes[node].parent = parent;\n    nodes[node].depth = depth;\n    if (parent == -1) {\n        nodes[node].type = \"root\";\n    } else if (nodes[parent].left == node || nodes[parent].right == node) {\n        nodes[node].type = \"internal node\";\n    } else {\n        nodes[node].type = \"leaf\";\n    }\n    if (nodes[node].left != -1) {\n        nodes[node].degree++;\n        nodes[node].height = max(nodes[node].height, nodes[node].depth + 1);\n    }\n    if (nodes[node].right != -1) {\n        nodes[node].degree++;\n        nodes[node].height = max(nodes[node].height, nodes[node].depth + 1);\n    }\n    if (nodes[node].left != -1) {\n        nodes[node].left = nodes[node].left;\n        nodes[node].right = nodes[node].right;\n        dfs(nodes, nodes[node].left, node, depth + 1);\n    }\n    if (nodes[node].right != -1) {\n        nodes[node].left = nodes[node].left;\n        nodes[node].right = nodes[node].right;\n        dfs(nodes, nodes[node].right, node, depth + 1);\n    }\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<Node> nodes(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nodes[i].id >> nodes[i].left >> nodes[i].right;\n        nodes[i].left = (nodes[i].left == -1 ? -1 : nodes[i].left);\n        nodes[i].right = (nodes[i].right == -1 ? -1 : nodes[i].right);\n        nodes[i].degree = 0;\n        nodes[i].depth = 0;\n        nodes[i].height = 0;\n    }\n    dfs(nodes, 0, -1, 0);\n    for (int i = 0; i < n; i++) {\n        int parent = nodes[i].parent;\n        int sibling = (parent != -1 && nodes[parent].left != i && nodes[parent].right != i ? nodes[parent].left : -1);\n        cout << \"node \" << nodes[i].id << \": parent = \" << parent << \", sibling = \" << sibling << \", degree = \" << nodes[i].degree << \", depth = \" << nodes[i].depth << \", height = \" << nodes[i].height << \", \" << nodes[i].type << endl;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}