{
    "solution_id": "llama3.1-8b-877",
    "problem_id": "p00756",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_map>\n#include <unordered_set>\n#include <cmath>\n\nusing namespace std;\n\nstruct Disc {\n    int x, y, r, c;\n};\n\nstruct Pair {\n    int x, y;\n};\n\nstruct Compare {\n    bool operator()(const Pair& a, const Pair& b) {\n        return a.x > b.x;\n    }\n};\n\nint getNeighbors(int x, int y, int n) {\n    int neighbors[4][2] = {{x - 1, y}, {x + 1, y}, {x, y - 1}, {x, y + 1}};\n    vector<Pair> validNeighbors;\n    for (int i = 0; i < 4; i++) {\n        int nx = neighbors[i][0];\n        int ny = neighbors[i][1];\n        if (0 <= nx && nx < n && 0 <= ny && ny < n) {\n            validNeighbors.push_back({nx, ny});\n        }\n    }\n    return validNeighbors.size();\n}\n\nint getDiscs(vector<Disc>& discs, int x, int y) {\n    int count = 0;\n    for (int i = 0; i < discs.size(); i++) {\n        if (discs[i].x == x && discs[i].y == y) {\n            count++;\n        }\n    }\n    return count;\n}\n\nint getRemovable(vector<Disc>& discs, int n) {\n    unordered_map<int, vector<int>> colorDiscs;\n    for (int i = 0; i < n; i++) {\n        colorDiscs[discs[i].c].push_back(i);\n    }\n\n    int removable = 0;\n    for (auto& pair : colorDiscs) {\n        int color = pair.first;\n        vector<int> discIndices = pair.second;\n        unordered_set<int> visited;\n        queue<int> q;\n        for (int i = 0; i < discIndices.size(); i++) {\n            int index = discIndices[i];\n            if (visited.find(index) == visited.end()) {\n                q.push(index);\n                visited.insert(index);\n                int count = 0;\n                while (!q.empty()) {\n                    int discIndex = q.front();\n                    q.pop();\n                    count++;\n                    int x = discs[discIndex].x;\n                    int y = discs[discIndex].y;\n                    int neighbors = getNeighbors(x, y, n);\n                    for (int j = 0; j < neighbors; j++) {\n                        int nx = discs[discIndex].x + (j % 2 == 0 ? -1 : 1);\n                        int ny = discs[discIndex].y;\n                        int index2 = getDiscs(discs, nx, ny);\n                        if (index2 > 0 && color == discs[nx + 100 * ny].c && visited.find(nx + 100 * ny) == visited.end()) {\n                            q.push(nx + 100 * ny);\n                            visited.insert(nx + 100 * ny);\n                        }\n                    }\n                }\n                removable += count - 1;\n            }\n        }\n    }\n    return removable;\n}\n\nint main() {\n    int n;\n    while (cin >> n && n != 0) {\n        vector<Disc> discs(n);\n        for (int i = 0; i < n; i++) {\n            cin >> discs[i].x >> discs[i].y >> discs[i].r >> discs[i].c;\n        }\n        cout << getRemovable(discs, n) << endl;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}