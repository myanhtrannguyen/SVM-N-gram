{
    "solution_id": "llama3.1-8b-1423",
    "problem_id": "p02763",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class SegmentTree {\n        int n;\n        int[] tree;\n        int[] lazy;\n\n        public SegmentTree(int n) {\n            this.n = n;\n            tree = new int[4 * n];\n            lazy = new int[4 * n];\n        }\n\n        void push(int v, int tl, int tr) {\n            if (lazy[v] != 0) {\n                tree[v] = (tr - tl + 1) * lazy[v];\n                if (tl != tr) {\n                    lazy[2 * v] = lazy[v];\n                    lazy[2 * v + 1] = lazy[v];\n                }\n                lazy[v] = 0;\n            }\n        }\n\n        void update(int v, int tl, int tr, int l, int r, int val) {\n            push(v, tl, tr);\n            if (l > r) return;\n            if (l == tl && tr == r) {\n                lazy[v] = val;\n                push(v, tl, tr);\n                return;\n            }\n            int tm = (tl + tr) / 2;\n            update(2 * v, tl, tm, l, Math.min(r, tm), val);\n            update(2 * v + 1, tm + 1, tr, Math.max(l, tm + 1), r, val);\n            tree[v] = tree[2 * v] + tree[2 * v + 1];\n        }\n\n        int query(int v, int tl, int tr, int l, int r) {\n            push(v, tl, tr);\n            if (l > r) return 0;\n            if (l == tl && tr == r) return tree[v];\n            int tm = (tl + tr) / 2;\n            return query(2 * v, tl, tm, l, Math.min(r, tm)) +\n                    query(2 * v + 1, tm + 1, tr, Math.max(l, tm + 1), r);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int n = Integer.parseInt(br.readLine());\n        String s = br.readLine();\n        int q = Integer.parseInt(br.readLine());\n        SegmentTree st = new SegmentTree(n);\n        for (int i = 0; i < n; i++) {\n            st.update(1, 0, n - 1, i, i, 1);\n        }\n        for (int i = 0; i < q; i++) {\n            String[] query = br.readLine().split(\" \");\n            if (query[0].equals(\"1\")) {\n                int idx = Integer.parseInt(query[1]) - 1;\n                char c = query[2].charAt(0);\n                st.update(1, 0, n - 1, idx, idx, c == s.charAt(idx) ? 1 : 2);\n                s = s.substring(0, idx) + c + s.substring(idx + 1);\n            } else {\n                int l = Integer.parseInt(query[1]) - 1;\n                int r = Integer.parseInt(query[2]) - 1;\n                pw.println(st.query(1, 0, n - 1, l, r));\n            }\n        }\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}