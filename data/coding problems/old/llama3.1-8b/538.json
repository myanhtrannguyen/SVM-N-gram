{
    "solution_id": "llama3.1-8b-538",
    "problem_id": "p00648",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Program {\n        String name;\n        int weekday;\n        int start;\n\n        public Program(String name, int weekday, int start) {\n            this.name = name;\n            this.weekday = weekday;\n            this.start = start;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            List<Program> programs = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                String[] parts = br.readLine().split(\" \");\n                programs.add(new Program(parts[0], Integer.parseInt(parts[1]), Integer.parseInt(parts[2])));\n            }\n            int p = Integer.parseInt(br.readLine());\n            Set<String> f = new HashSet<>();\n            for (int i = 0; i < p; i++) {\n                f.add(br.readLine());\n            }\n            if (f.size() > programs.size()) {\n                System.out.println(-1);\n                continue;\n            }\n            Map<String, List<Integer>> graph = new HashMap<>();\n            for (Program program : programs) {\n                graph.put(program.name, new ArrayList<>());\n            }\n            for (Program program1 : programs) {\n                for (Program program2 : programs) {\n                    if (program1.name.equals(program2.name)) continue;\n                    if (program1.weekday == program2.weekday && program1.start / 100 == program2.start / 100 && (program1.start % 100 >= program2.start % 100 || program2.start % 100 >= program1.start % 100)) {\n                        graph.get(program1.name).add(program2.name);\n                        graph.get(program2.name).add(program1.name);\n                    }\n                }\n            }\n            int[] dp = new int[programs.size()];\n            Arrays.fill(dp, -1);\n            for (int i = 0; i < programs.size(); i++) {\n                if (f.contains(programs.get(i).name)) {\n                    dp[i] = 1;\n                }\n            }\n            for (int i = 0; i < programs.size(); i++) {\n                if (dp[i] == -1) continue;\n                for (String neighbor : graph.get(programs.get(i).name)) {\n                    int j = Arrays.asList(programs.stream().map(Program::name).toArray(String[]::new)).indexOf(neighbor);\n                    if (dp[j] == -1) {\n                        dp[j] = dp[i] + 1;\n                    } else {\n                        dp[j] = Math.max(dp[j], dp[i] + 1);\n                    }\n                }\n            }\n            int max = 0;\n            for (int i = 0; i < programs.size(); i++) {\n                if (dp[i] > max) max = dp[i];\n            }\n            System.out.println(max);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}