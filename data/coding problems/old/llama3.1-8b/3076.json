{
    "solution_id": "llama3.1-8b-3076",
    "problem_id": "p01683",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAXN 4005\n\ntypedef struct {\n    int p, d;\n} Island;\n\nint cmp(const void *a, const void *b) {\n    Island *x = (Island *)a;\n    Island *y = (Island *)b;\n    return x->p - y->p;\n}\n\nint find(int *p, int i) {\n    if (p[i] != i) p[i] = find(p, p[i]);\n    return p[i];\n}\n\nint main() {\n    int T;\n    scanf(\"%d\", &T);\n    while (T--) {\n        int n;\n        scanf(\"%d\", &n);\n        if (n == 0) break;\n        Island a[MAXN];\n        int p[MAXN], d[MAXN];\n        for (int i = 1; i <= n; i++) {\n            scanf(\"%d %d\", &a[i].p, &a[i].d);\n            p[i] = a[i].p;\n            d[i] = a[i].d;\n        }\n        qsort(p + 1, n, sizeof(int), cmp);\n        int cnt = 0;\n        for (int i = 1; i <= n; i++) {\n            if (p[i] != p[i - 1]) p[++cnt] = p[i];\n        }\n        n = cnt;\n        int *p2 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p2[i] = p[i];\n        int *d2 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d2[i] = d[i];\n        int *p3 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p3[i] = p[i];\n        int *d3 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d3[i] = d[i];\n        int *p4 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p4[i] = p[i];\n        int *d4 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d4[i] = d[i];\n        int *p5 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p5[i] = p[i];\n        int *d5 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d5[i] = d[i];\n        int *p6 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p6[i] = p[i];\n        int *d6 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d6[i] = d[i];\n        int *p7 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p7[i] = p[i];\n        int *d7 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d7[i] = d[i];\n        int *p8 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p8[i] = p[i];\n        int *d8 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d8[i] = d[i];\n        int *p9 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p9[i] = p[i];\n        int *d9 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d9[i] = d[i];\n        int *p10 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p10[i] = p[i];\n        int *d10 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d10[i] = d[i];\n        int *p11 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p11[i] = p[i];\n        int *d11 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d11[i] = d[i];\n        int *p12 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p12[i] = p[i];\n        int *d12 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d12[i] = d[i];\n        int *p13 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p13[i] = p[i];\n        int *d13 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d13[i] = d[i];\n        int *p14 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p14[i] = p[i];\n        int *d14 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d14[i] = d[i];\n        int *p15 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p15[i] = p[i];\n        int *d15 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d15[i] = d[i];\n        int *p16 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p16[i] = p[i];\n        int *d16 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d16[i] = d[i];\n        int *p17 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p17[i] = p[i];\n        int *d17 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d17[i] = d[i];\n        int *p18 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p18[i] = p[i];\n        int *d18 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d18[i] = d[i];\n        int *p19 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p19[i] = p[i];\n        int *d19 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d19[i] = d[i];\n        int *p20 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p20[i] = p[i];\n        int *d20 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d20[i] = d[i];\n        int *p21 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p21[i] = p[i];\n        int *d21 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d21[i] = d[i];\n        int *p22 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p22[i] = p[i];\n        int *d22 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d22[i] = d[i];\n        int *p23 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p23[i] = p[i];\n        int *d23 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d23[i] = d[i];\n        int *p24 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) p24[i] = p[i];\n        int *d24 = (int *)malloc(n * sizeof(int));\n        for (int i = 1; i <= n; i++) d24[i] =",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}