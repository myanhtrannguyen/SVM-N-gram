{
    "solution_id": "llama3.1-8b-3734",
    "problem_id": "p02254",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Node implements Comparable<Node> {\n        char c;\n        int freq;\n        Node left, right;\n\n        public Node(char c, int freq) {\n            this.c = c;\n            this.freq = freq;\n        }\n\n        @Override\n        public int compareTo(Node other) {\n            return Integer.compare(this.freq, other.freq);\n        }\n    }\n\n    static class PriorityQueue {\n        private Node[] heap;\n        private int size;\n\n        public PriorityQueue(int capacity) {\n            heap = new Node[capacity];\n        }\n\n        public void push(Node node) {\n            if (size == heap.length) {\n                throw new RuntimeException(\"Priority queue is full\");\n            }\n            heap[size++] = node;\n            heapifyUp(size - 1);\n        }\n\n        public Node pop() {\n            if (size == 0) {\n                throw new RuntimeException(\"Priority queue is empty\");\n            }\n            Node node = heap[0];\n            heap[0] = heap[--size];\n            heapifyDown(0);\n            return node;\n        }\n\n        private void heapifyUp(int index) {\n            while (index > 0) {\n                int parentIndex = (index - 1) / 2;\n                if (heap[parentIndex].freq <= heap[index].freq) {\n                    break;\n                }\n                Node temp = heap[parentIndex];\n                heap[parentIndex] = heap[index];\n                heap[index] = temp;\n                index = parentIndex;\n            }\n        }\n\n        private void heapifyDown(int index) {\n            while (true) {\n                int leftChildIndex = 2 * index + 1;\n                int rightChildIndex = 2 * index + 2;\n                int smallest = index;\n\n                if (leftChildIndex < size && heap[leftChildIndex].freq < heap[smallest].freq) {\n                    smallest = leftChildIndex;\n                }\n\n                if (rightChildIndex < size && heap[rightChildIndex].freq < heap[smallest].freq) {\n                    smallest = rightChildIndex;\n                }\n\n                if (smallest == index) {\n                    break;\n                }\n\n                Node temp = heap[smallest];\n                heap[smallest] = heap[index];\n                heap[index] = temp;\n                index = smallest;\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        Scanner scanner = new Scanner(System.in);\n        String S = scanner.next();\n        int n = S.length();\n        Map<Character, Integer> freq = new HashMap<>();\n        for (char c : S.toCharArray()) {\n            freq.put(c, freq.getOrDefault(c, 0) + 1);\n        }\n\n        PriorityQueue pq = new PriorityQueue(freq.size());\n        for (Map.Entry<Character, Integer> entry : freq.entrySet()) {\n            pq.push(new Node(entry.getKey(), entry.getValue()));\n        }\n\n        while (pq.size() > 1) {\n            Node x = pq.pop();\n            Node y = pq.pop();\n            Node parent = new Node('\\0', x.freq + y.freq);\n            parent.left = x;\n            parent.right = y;\n            pq.push(parent);\n        }\n\n        StringBuilder sb = new StringBuilder();\n        Node root = pq.heap[0];\n        dfs(root, sb);\n        System.out.println(sb.length());\n    }\n\n    private static void dfs(Node node, StringBuilder sb) {\n        if (node.left == null && node.right == null) {\n            sb.append(node.c);\n            return;\n        }\n        dfs(node.left, sb.append('0'));\n        dfs(node.right, sb.append('1'));\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}