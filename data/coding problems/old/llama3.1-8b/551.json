{
    "solution_id": "llama3.1-8b-551",
    "problem_id": "p00651",
    "language": "Python",
    "solution": "```python\nimport math\n\ndef ccw(A, B, C):\n    return (C[1] - A[1]) * (B[0] - A[0]) > (B[1] - A[1]) * (C[0] - A[0])\n\ndef convex_hull(points):\n    n = len(points)\n    if n < 3:\n        return points\n\n    leftmost = min(points, key=lambda p: (p[0], p[1]))\n    hull = []\n    p = leftmost\n\n    while True:\n        hull.append(p)\n        q = None\n        for r in points:\n            if r == p:\n                continue\n            if q is None or ccw(p, r, q):\n                q = r\n        p = q\n        if p == leftmost:\n            break\n\n    return hull\n\ndef get_tangent_points(points, radius):\n    hull = convex_hull(points)\n    tangent_points = []\n    for i in range(len(hull)):\n        p1 = hull[i]\n        p2 = hull[(i + 1) % len(hull)]\n        if math.hypot(p1[0], p1[1]) <= radius:\n            tangent_points.append(p1)\n        else:\n            angle = math.atan2(p2[1] - p1[1], p2[0] - p1[0])\n            x = radius * math.cos(angle)\n            y = radius * math.sin(angle)\n            tangent_points.append((x, y))\n    return tangent_points\n\ndef get_next_tangent_point(points, current_point, radius):\n    for point in points:\n        if point == current_point:\n            continue\n        if math.hypot(point[0] - current_point[0], point[1] - current_point[1]) > math.hypot(radius, 0):\n            return point\n    return None\n\ndef get_tangent_points_sequence(points, radius, q):\n    tangent_points = [points[0]]\n    current_point = points[0]\n    for _ in range(q - 1):\n        next_point = get_next_tangent_point(points, current_point, radius)\n        if next_point is None:\n            break\n        tangent_points.append(next_point)\n        current_point = next_point\n    return tangent_points\n\ndef main():\n    while True:\n        n, r, q = map(int, input().split())\n        if n == 0 and r == 0 and q == 0:\n            break\n        points = [tuple(map(int, input().split())) for _ in range(n)]\n        tangent_points = get_tangent_points_sequence(points, r, q)\n        for i in range(len(tangent_points)):\n            print(f\"{tangent_points[i][0]:.6f} {tangent_points[i][1]:.6f}\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}