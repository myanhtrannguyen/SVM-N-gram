{
    "solution_id": "llama3.1-8b-2494",
    "problem_id": "p03619",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n#include <queue>\n#include <set>\n#include <map>\n#include <string>\n#include <iomanip>\n\nusing namespace std;\n\nconst int N = 200005;\nconst double INF = 1e18;\n\nstruct Node {\n    int x, y;\n    double dist;\n    Node(int _x = 0, int _y = 0, double _dist = 0) : x(_x), y(_y), dist(_dist) {}\n};\n\nstruct Edge {\n    int to;\n    double w;\n    Edge(int _to = 0, double _w = 0) : to(_to), w(_w) {}\n};\n\nstruct Graph {\n    vector<vector<Edge>> adj;\n    Graph(int n = 0) : adj(n) {}\n    void addEdge(int u, int v, double w) {\n        adj[u].push_back(Edge(v, w));\n        adj[v].push_back(Edge(u, w));\n    }\n};\n\ndouble dijkstra(int n, vector<Node>& nodes, Graph& g, int s, int t) {\n    vector<double> dist(n, INF);\n    priority_queue<pair<double, int>, vector<pair<double, int>>, greater<pair<double, int>>> pq;\n    pq.push({ 0, s });\n    dist[s] = 0;\n    while (!pq.empty()) {\n        auto [d, u] = pq.top();\n        pq.pop();\n        if (d > dist[u]) continue;\n        for (auto& e : g.adj[u]) {\n            int v = e.to;\n            double w = e.w;\n            if (dist[v] > dist[u] + w) {\n                dist[v] = dist[u] + w;\n                pq.push({ dist[v], v });\n            }\n        }\n    }\n    return dist[t];\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    cout << fixed << setprecision(15);\n\n    int x1, y1, x2, y2;\n    cin >> x1 >> y1 >> x2 >> y2;\n    int n;\n    cin >> n;\n    vector<pair<int, int>> fountains(n);\n    for (int i = 0; i < n; i++) {\n        cin >> fountains[i].first >> fountains[i].second;\n    }\n\n    Graph g(2 * n + 2);\n    for (int i = 0; i < n; i++) {\n        g.addEdge(i, n + i, 100 * sqrt(2));\n        g.addEdge(i, 2 * n, 100 * fountains[i].first);\n        g.addEdge(n + i, 2 * n + 1, 100 * fountains[i].second);\n    }\n    for (int i = 0; i < n; i++) {\n        g.addEdge(2 * n, 2 * n + 1, 100 * sqrt(2));\n    }\n\n    vector<Node> nodes;\n    for (int i = 0; i < n; i++) {\n        nodes.push_back(Node(fountains[i].first, fountains[i].second));\n    }\n    nodes.push_back(Node(x1, y1));\n    nodes.push_back(Node(x2, y2));\n    for (int i = 0; i < n; i++) {\n        nodes.push_back(Node(fountains[i].first, fountains[i].second));\n    }\n\n    double ans = dijkstra(2 * n + 2, nodes, g, 2 * n, 2 * n + 1);\n    cout << ans << '\\n';\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}