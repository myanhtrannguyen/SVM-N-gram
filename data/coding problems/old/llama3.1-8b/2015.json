{
    "solution_id": "llama3.1-8b-2015",
    "problem_id": "p03376",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, cap, flow, cost;\n        Edge rev;\n\n        public Edge(int to, int cap, int flow, int cost, Edge rev) {\n            this.to = to;\n            this.cap = cap;\n            this.flow = flow;\n            this.cost = cost;\n            this.rev = rev;\n        }\n    }\n\n    static class MCMF {\n        int s, t;\n        List<Edge>[] edges;\n        int[] dist, preV, preE;\n        int INF = Integer.MAX_VALUE / 2;\n\n        public MCMF(int n) {\n            edges = new List[n];\n            for (int i = 0; i < n; i++) {\n                edges[i] = new ArrayList<>();\n            }\n        }\n\n        public void addEdge(int u, int v, int cap, int cost) {\n            Edge a = new Edge(v, cap, 0, cost, null);\n            Edge b = new Edge(u, 0, 0, -cost, null);\n            a.rev = b;\n            b.rev = a;\n            edges[u].add(a);\n            edges[v].add(b);\n        }\n\n        public int spfa() {\n            dist = new int[s + t + 1];\n            Arrays.fill(dist, INF);\n            dist[s] = 0;\n            Queue<Integer> q = new LinkedList<>();\n            q.add(s);\n            while (!q.isEmpty()) {\n                int u = q.poll();\n                for (Edge e : edges[u]) {\n                    if (e.cap - e.flow > 0 && dist[e.to] > dist[u] + e.cost) {\n                        dist[e.to] = dist[u] + e.cost;\n                        preV[e.to] = u;\n                        preE[e.to] = e;\n                        q.add(e.to);\n                    }\n                }\n            }\n            return dist[t] != INF ? t : -1;\n        }\n\n        public int dfs(int u, int flow) {\n            if (u == t) return flow;\n            int res = 0;\n            for (Edge e = preE[u]; e != null; e = preE[u] = e.rev) {\n                if (e.cap - e.flow > 0 && dist[e.to] == dist[u] + e.cost) {\n                    int tmp = dfs(e.to, Math.min(flow - res, e.cap - e.flow));\n                    e.flow += tmp;\n                    e.rev.flow -= tmp;\n                    res += tmp;\n                    if (res == flow) break;\n                }\n            }\n            return res;\n        }\n\n        public int mcmf() {\n            int res = 0;\n            while (true) {\n                int d = spfa();\n                if (d == -1) break;\n                int flow = dfs(s, INF);\n                res += flow;\n            }\n            return res;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int x = Integer.parseInt(st.nextToken());\n        int d = Integer.parseInt(st.nextToken());\n        int[] m = new int[n + 1];\n        int[] p = new int[n + 1];\n        st = new StringTokenizer(br.readLine());\n        for (int i = 1; i <= n; i++) {\n            m[i] = Integer.parseInt(st.nextToken());\n        }\n        for (int i = 2; i <= n; i++) {\n            st = new StringTokenizer(br.readLine());\n            p[i] = Integer.parseInt(st.nextToken());\n        }\n        MCMF mcmf = new MCMF(n + 2);\n        mcmf.s = 0;\n        mcmf.t = n + 1;\n        for (int i = 1; i <= n; i++) {\n            mcmf.addEdge(mcmf.s, i, 1, 0);\n            mcmf.addEdge(i, mcmf.t, 1, 0);\n        }\n        for (int i = 1; i <= n; i++) {\n            mcmf.addEdge(i, p[i], 1, 0);\n            mcmf.addEdge(p[i], i, 1, d);\n        }\n        for (int i = 1; i <= n; i++) {\n            mcmf.addEdge(i, i + n, x / m[i], 0);\n        }\n        int res = mcmf.mcmf();\n        System.out.println(res);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}