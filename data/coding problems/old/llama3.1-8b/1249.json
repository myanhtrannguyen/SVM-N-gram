{
    "solution_id": "llama3.1-8b-1249",
    "problem_id": "p00849",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <utility>\n\nusing namespace std;\n\nconst int MAXN = 10;\nconst int MAXM = 10;\n\nint n, m;\nint grid[MAXN][MAXM];\nint dist[MAXN][MAXM];\nint dist2[MAXN][MAXM];\nint dist3[MAXN][MAXM];\nint dist2i[MAXN][MAXM];\nint dist3i[MAXN][MAXM];\n\nvoid bfs(int x, int y, int dist[][MAXM]) {\n    queue<pair<int, int>> q;\n    q.push({x, y});\n    dist[x][y] = 0;\n    while (!q.empty()) {\n        int x = q.front().first;\n        int y = q.front().second;\n        q.pop();\n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                if (abs(dx) + abs(dy) == 1 && 0 <= x + dx && x + dx < n && 0 <= y + dy && y + dy < m && grid[x + dx][y + dy] == 0 && dist[x + dx][y + dy] == -1) {\n                    dist[x + dx][y + dy] = dist[x][y] + 1;\n                    q.push({x + dx, y + dy});\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    while (true) {\n        cin >> n >> m;\n        if (n == 0 && m == 0) break;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cin >> grid[i][j];\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                dist[i][j] = -1;\n                dist2[i][j] = -1;\n                dist3[i][j] = -1;\n                dist2i[i][j] = -1;\n                dist3i[i][j] = -1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 2) {\n                    bfs(i, j, dist2);\n                } else if (grid[i][j] == 3) {\n                    bfs(i, j, dist3);\n                }\n            }\n        }\n        int min_dist = 1e9;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 2) {\n                    bfs(i, j, dist2i);\n                    for (int x = 0; x < n; x++) {\n                        for (int y = 0; y < m; y++) {\n                            if (dist2i[x][y] != -1 && dist3[x][y] != -1) {\n                                min_dist = min(min_dist, dist2i[x][y] + dist3[x][y]);\n                            }\n                        }\n                    }\n                } else if (grid[i][j] == 3) {\n                    bfs(i, j, dist3i);\n                    for (int x = 0; x < n; x++) {\n                        for (int y = 0; y < m; y++) {\n                            if (dist2[x][y] != -1 && dist3i[x][y] != -1) {\n                                min_dist = min(min_dist, dist2[x][y] + dist3i[x][y]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (min_dist == 1e9) {\n            cout << 0 << endl;\n        } else {\n            cout << min_dist << endl;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}