{
    "solution_id": "llama3.1-8b-3112",
    "problem_id": "p01706",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define N 1000\n#define M 10000\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nint dfs(int u, int p, int *d, int *f, int *g, int *e, int *c, int n, int m, int s, int t, int *a, int *b) {\n    if (u == t) {\n        for (int i = 0; i <= m; i++) {\n            d[i] = 0;\n            f[i] = 0;\n            g[i] = 0;\n            e[i] = 0;\n        }\n        d[0] = 1;\n        f[0] = 1;\n        int i = 0;\n        for (int j = 0; j < n; j++) {\n            if (c[j] == 0) {\n                int k = 0;\n                while (k < m && d[k] == 0) {\n                    k++;\n                }\n                if (k == m) {\n                    break;\n                }\n                d[k] = 1;\n                f[k] = 1;\n                for (int l = 0; l < n; l++) {\n                    if (c[l] == 0 && a[l] == j + 1 && b[l] != u + 1) {\n                        int k1 = 0;\n                        while (k1 < m && d[k1] == 0) {\n                            k1++;\n                        }\n                        if (k1 == m) {\n                            break;\n                        }\n                        d[k1] = 1;\n                        f[k1] = 0;\n                        g[k1] = 1;\n                        e[k1] = l + 1;\n                    } else if (c[l] == 0 && a[l] != j + 1 && b[l] == u + 1) {\n                        int k1 = 0;\n                        while (k1 < m && d[k1] == 0) {\n                            k1++;\n                        }\n                        if (k1 == m) {\n                            break;\n                        }\n                        d[k1] = 1;\n                        f[k1] = 0;\n                        g[k1] = 0;\n                        e[k1] = l + 1;\n                    }\n                }\n                int k1 = 0;\n                while (k1 < m && d[k1] == 0) {\n                    k1++;\n                }\n                if (k1 == m) {\n                    break;\n                }\n                int k2 = 0;\n                while (k2 < m && f[k2] == 0) {\n                    k2++;\n                }\n                if (k2 == m) {\n                    break;\n                }\n                f[k1] = f[k2] + 1;\n                g[k1] = g[k2];\n                e[k1] = e[k2];\n                for (int l = 0; l < n; l++) {\n                    if (c[l] == 0 && a[l] == j + 1 && b[l] != u + 1) {\n                        int k3 = 0;\n                        while (k3 < m && d[k3] == 0) {\n                            k3++;\n                        }\n                        if (k3 == m) {\n                            break;\n                        }\n                        d[k3] = 1;\n                        f[k3] = f[k1];\n                        g[k3] = g[k1] + 1;\n                        e[k3] = e[k1];\n                    } else if (c[l] == 0 && a[l] != j + 1 && b[l] == u + 1) {\n                        int k3 = 0;\n                        while (k3 < m && d[k3] == 0) {\n                            k3++;\n                        }\n                        if (k3 == m) {\n                            break;\n                        }\n                        d[k3] = 1;\n                        f[k3] = f[k1];\n                        g[k3] = g[k1];\n                        e[k3] = e[k1];\n                    }\n                }\n                i = k1;\n            }\n        }\n        int ans = 0;\n        for (int k = 0; k < m; k++) {\n            if (f[k] > ans) {\n                ans = f[k];\n            }\n        }\n        return ans;\n    }\n    for (int i = 0; i < n; i++) {\n        if (c[i] == 0 && (a[i] == u + 1 || b[i] == u + 1)) {\n            c[i] = 1;\n            int ans = dfs(i, u, d, f, g, e, c, n, m, s, t, a, b);\n            c[i] = 0;\n            if (ans > 0) {\n                return ans;\n            }\n        }\n    }\n    return 0;\n}\n\nint main() {\n    int n, m, s, t;\n    int a[M], b[M];\n    int c[N];\n    int d[M], f[M], g[M], e[M];\n    while (scanf(\"%d%d%d%d\", &n, &m, &s, &t) == 4) {\n        if (n == 0 && m == 0 && s == 0 && t == 0) {\n            break;\n        }\n        for (int i = 0; i < n; i++) {\n            c[i] = 0;\n        }\n        for (int i = 0; i < m; i++) {\n            scanf(\"%d%d\", &a[i], &b[i]);\n        }\n        int ans = dfs(s - 1, -1, d, f, g, e, c, n, m, s - 1, t - 1, a, b);\n        int ans1 = dfs(t - 1, -1, d, f, g, e, c, n, m, s - 1, t - 1, a, b);\n        if (ans > ans1) {\n            printf(\"%d %d\\n\", ans, 1);\n        } else {\n            printf(\"%d %d\\n\", ans1, 0);\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}