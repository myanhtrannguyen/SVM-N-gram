{
    "solution_id": "llama3.1-8b-906",
    "problem_id": "p00763",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Station {\n        int id;\n        List<Line> lines = new ArrayList<>();\n\n        public Station(int id) {\n            this.id = id;\n        }\n    }\n\n    static class Line {\n        int to;\n        int distance;\n        int company;\n        int fare;\n\n        public Line(int to, int distance, int company) {\n            this.to = to;\n            this.distance = distance;\n            this.company = company;\n        }\n    }\n\n    static class Company {\n        int id;\n        List<Integer> fare = new ArrayList<>();\n\n        public Company(int id) {\n            this.id = id;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] line;\n        while ((line = br.readLine().split(\" \")) != null && line.length > 0) {\n            int n = Integer.parseInt(line[0]);\n            int m = Integer.parseInt(line[1]);\n            int c = Integer.parseInt(line[2]);\n            int s = Integer.parseInt(line[3]);\n            int g = Integer.parseInt(line[4]);\n\n            List<Station> stations = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                stations.add(new Station(i));\n            }\n\n            for (int i = 0; i < m; i++) {\n                line = br.readLine().split(\" \");\n                int x = Integer.parseInt(line[0]) - 1;\n                int y = Integer.parseInt(line[1]) - 1;\n                int d = Integer.parseInt(line[2]);\n                int company = Integer.parseInt(line[3]);\n                stations.get(x).lines.add(new Line(y, d, company));\n                stations.get(y).lines.add(new Line(x, d, company));\n            }\n\n            for (int i = 0; i < c; i++) {\n                line = br.readLine().split(\" \");\n                int p = Integer.parseInt(line[0]);\n                for (int j = 1; j < p; j++) {\n                    int q = Integer.parseInt(line[j]);\n                    int r = Integer.parseInt(line[j + 1]);\n                    ((Company) stations.get(i).lines.get(0).company).fare.add(r);\n                    j++;\n                }\n            }\n\n            for (int i = 0; i < n; i++) {\n                Collections.sort(stations.get(i).lines, Comparator.comparingInt(line -> line.distance));\n            }\n\n            int[] dist = new int[n];\n            int[] prev = new int[n];\n            Arrays.fill(dist, Integer.MAX_VALUE);\n            dist[s - 1] = 0;\n\n            PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(node -> node.fare));\n            pq.add(new Node(s - 1, 0));\n\n            while (!pq.isEmpty()) {\n                Node node = pq.poll();\n                if (node.id == g - 1) break;\n                if (node.fare > dist[node.id]) continue;\n                for (Line line : stations.get(node.id).lines) {\n                    int fare = 0;\n                    int distance = 0;\n                    int company = line.company;\n                    int index = 0;\n                    for (int i = 0; i < ((Company) company).fare.size(); i++) {\n                        if (distance + ((Company) company).fare.get(i) >= line.distance) {\n                            fare += (line.distance - distance) * ((Company) company).fare.get(i);\n                            distance = line.distance;\n                            index = i;\n                        }\n                    }\n                    fare += ((Company) company).fare.get(index);\n                    if (dist[line.to] > fare + dist[node.id]) {\n                        dist[line.to] = fare + dist[node.id];\n                        prev[line.to] = node.id;\n                        pq.add(new Node(line.to, fare + dist[node.id]));\n                    }\n                }\n            }\n\n            if (dist[g - 1] == Integer.MAX_VALUE) System.out.println(\"-1\");\n            else {\n                int id = g - 1;\n                StringBuilder sb = new StringBuilder();\n                while (id != s - 1) {\n                    sb.append(id + 1);\n                    id = prev[id];\n                }\n                sb.append(s);\n                System.out.println(dist[g - 1]);\n            }\n        }\n    }\n\n    static class Node {\n        int id;\n        int fare;\n\n        public Node(int id, int fare) {\n            this.id = id;\n            this.fare = fare;\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}