{
    "solution_id": "llama3.1-8b-2130",
    "problem_id": "p03405",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n#include <cstdio>\n\nusing namespace std;\n\nconst int N = 1005, M = 2005, P = 1e9 + 7;\n\nint n, m, X, fa[N], siz[N], dep[N], dfn[N], low[N], scc, stk[N], top;\nint head[N], to[M], nxt[M], w[M], tot, cnt;\nlong long f[N][N], g[N][N], h[N][N], ans;\nbool vis[N];\n\nvoid add(int u, int v, int c) {\n    to[++tot] = v;\n    w[tot] = c;\n    nxt[tot] = head[u];\n    head[u] = tot;\n}\n\nvoid dfs(int u) {\n    dfn[u] = ++cnt;\n    low[u] = cnt;\n    stk[++top] = u;\n    vis[u] = true;\n    for (int i = head[u]; i; i = nxt[i]) {\n        int v = to[i];\n        if (!dfn[v]) {\n            dep[v] = dep[u] + 1;\n            dfs(v);\n            low[u] = min(low[u], low[v]);\n        } else if (vis[v]) {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u]) {\n        ++scc;\n        while (1) {\n            int v = stk[top--];\n            vis[v] = false;\n            siz[scc] += 1;\n            if (u == v) break;\n        }\n    }\n}\n\nint find(int x) {\n    return x == fa[x] ? x : fa[x] = find(fa[x]);\n}\n\nvoid merge(int u, int v) {\n    u = find(u);\n    v = find(v);\n    if (u == v) return;\n    if (siz[u] < siz[v]) swap(u, v);\n    fa[v] = u;\n    siz[u] += siz[v];\n}\n\nint main() {\n    scanf(\"%d%d%lld\", &n, &m, &X);\n    for (int i = 1; i <= n; i++) fa[i] = i, siz[i] = 1;\n    for (int i = 1; i <= m; i++) {\n        int u, v, c;\n        scanf(\"%d%d%d\", &u, &v, &c);\n        add(u, v, c);\n        add(v, u, c);\n    }\n    dfs(1);\n    for (int i = 1; i <= n; i++) {\n        for (int j = head[i]; j; j = nxt[j]) {\n            int v = to[j];\n            if (dep[i] < dep[v]) swap(i, v);\n            g[i][v] = w[j];\n        }\n    }\n    for (int k = 1; k <= n; k++) {\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (i == j) continue;\n                h[i][j] = (h[i][j] + g[i][k] * g[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            f[i][j] = h[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                f[i][j] = (f[i][j] + f[i][k] * f[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            g[i][j] = f[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                g[i][j] = (g[i][j] + g[i][k] * g[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            h[i][j] = g[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                h[i][j] = (h[i][j] + h[i][k] * g[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            f[i][j] = h[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                f[i][j] = (f[i][j] + f[i][k] * h[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            g[i][j] = f[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                g[i][j] = (g[i][j] + g[i][k] * f[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            h[i][j] = g[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                h[i][j] = (h[i][j] + h[i][k] * g[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            f[i][j] = h[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                f[i][j] = (f[i][j] + f[i][k] * h[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            g[i][j] = f[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                g[i][j] = (g[i][j] + g[i][k] * f[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            h[i][j] = g[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                h[i][j] = (h[i][j] + h[i][k] * g[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            f[i][j] = h[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                f[i][j] = (f[i][j] + f[i][k] * h[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            g[i][j] = f[i][j];\n            for (int k = 1; k <= n; k++) {\n                if (i == k || j == k) continue;\n                g[i][j] = (g[i][j] + g[i][k] * f[k][j]) % P;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (i == j) continue;\n            h[i][j] = g[i][j];\n            for (int k = 1;",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}