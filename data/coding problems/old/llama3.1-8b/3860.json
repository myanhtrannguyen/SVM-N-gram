{
    "solution_id": "llama3.1-8b-3860",
    "problem_id": "p02286",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\ntypedef struct Node {\n    int key;\n    int priority;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\nNode* createNode(int key, int priority) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    newNode->key = key;\n    newNode->priority = priority;\n    newNode->left = newNode->right = NULL;\n    return newNode;\n}\n\nNode* rightRotate(Node* t) {\n    Node* s = t->left;\n    t->left = s->right;\n    s->right = t;\n    return s;\n}\n\nNode* leftRotate(Node* t) {\n    Node* s = t->right;\n    t->right = s->left;\n    s->left = t;\n    return s;\n}\n\nNode* insert(Node* t, int key, int priority) {\n    if (t == NULL) return createNode(key, priority);\n    if (key == t->key) return t;\n    if (key < t->key) {\n        t->left = insert(t->left, key, priority);\n        if (t->priority < t->left->priority) t = rightRotate(t);\n    } else {\n        t->right = insert(t->right, key, priority);\n        if (t->priority < t->right->priority) t = leftRotate(t);\n    }\n    return t;\n}\n\nNode* delete(Node* t, int key) {\n    if (t == NULL) return NULL;\n    if (key < t->key) t->left = delete(t->left, key);\n    else if (key > t->key) t->right = delete(t->right, key);\n    else {\n        if (t->left == NULL) return t->right;\n        else if (t->right == NULL) return t->left;\n        else if (t->left->priority > t->right->priority) {\n            t = rightRotate(t);\n            t->right = delete(t->right, key);\n        } else {\n            t = leftRotate(t);\n            t->left = delete(t->left, key);\n        }\n    }\n    return t;\n}\n\nvoid inorder(Node* t, int* keys, int* index) {\n    if (t != NULL) {\n        inorder(t->left, keys, index);\n        keys[*index] = t->key;\n        (*index)++;\n        inorder(t->right, keys, index);\n    }\n}\n\nvoid preorder(Node* t, int* keys, int* index) {\n    if (t != NULL) {\n        keys[*index] = t->key;\n        (*index)++;\n        preorder(t->left, keys, index);\n        preorder(t->right, keys, index);\n    }\n}\n\nint main() {\n    srand(time(NULL));\n    int m;\n    scanf(\"%d\", &m);\n    Node* root = NULL;\n    int keys[1000000];\n    int index = 0;\n    while (m--) {\n        char op[10];\n        int key, priority;\n        scanf(\"%s %d\", op, &key);\n        if (op[0] == 'i') {\n            scanf(\"%d\", &priority);\n            root = insert(root, key, priority);\n        } else if (op[0] == 'f') {\n            int found = 0;\n            Node* temp = root;\n            while (temp != NULL) {\n                if (temp->key == key) {\n                    found = 1;\n                    break;\n                } else if (key < temp->key) temp = temp->left;\n                else temp = temp->right;\n            }\n            printf(\"%s\\n\", found ? \"yes\" : \"no\");\n        } else if (op[0] == 'd') {\n            root = delete(root, key);\n        } else if (op[0] == 'p') {\n            inorder(root, keys, &index);\n            printf(\"%d\", keys[0]);\n            for (int i = 1; i < index; i++) printf(\" %d\", keys[i]);\n            printf(\"\\n\");\n            index = 0;\n            preorder(root, keys, &index);\n            printf(\"%d\", keys[0]);\n            for (int i = 1; i < index; i++) printf(\" %d\", keys[i]);\n            printf(\"\\n\");\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}