{
    "solution_id": "llama3.1-8b-1111",
    "problem_id": "p00814",
    "language": "Python",
    "solution": "```python\ndef life_line(N, C, board):\n    # Create a copy of the board\n    board_copy = [[cell for cell in row] for row in board]\n\n    # Function to check if a cell is empty\n    def is_empty(i, j):\n        return board_copy[i][j] == 0\n\n    # Function to check if a cell is adjacent to an empty cell\n    def is_adjacent_to_empty(i, j):\n        for x, y in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + x, j + y\n            if 0 <= ni < N and 0 <= nj < N and is_empty(ni, nj):\n                return True\n        return False\n\n    # Function to remove a group of stones\n    def remove_group(i, j):\n        group = []\n        stack = [(i, j)]\n        while stack:\n            x, y = stack.pop()\n            if board_copy[x][y] != 0:\n                group.append((x, y))\n                for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < N and 0 <= ny < N and board_copy[nx][ny] == board_copy[x][y]:\n                        stack.append((nx, ny))\n        for x, y in group:\n            board_copy[x][y] = 0\n\n    # Function to calculate the score\n    def calculate_score():\n        score = 0\n        for i in range(N):\n            for j in range(N):\n                if board_copy[i][j] != 0 and is_adjacent_to_empty(i, j):\n                    remove_group(i, j)\n                    score += sum(1 for x, y in [(i, j)] + [(x + dx, y + dy) for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)] if 0 <= x + dx < N and 0 <= y + dy < N and board_copy[x + dx][y + dy] != 0] if board_copy[x + dx][y + dy] != 0)\n        return score\n\n    # Calculate the score for the current player\n    score = 0\n    for i in range(N):\n        for j in range(N):\n            if board_copy[i][j] == C:\n                remove_group(i, j)\n                score += calculate_score()\n                remove_group(i, j)\n                board_copy[i][j] = C\n    return score - calculate_score()\n\n# Read the input\nN, C = map(int, input().split())\nboard = []\nwhile True:\n    row = input().split()\n    if row == ['0', '0']:\n        break\n    board.append(row)\n\n# Print the results\nfor _ in range(int(input())):\n    N, C = map(int, input().split())\n    board = []\n    while True:\n        row = input().split()\n        if row == ['0', '0']:\n            break\n        board.append(row)\n    print(life_line(N, C, board))\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}