{
    "solution_id": "llama3.1-8b-1149",
    "problem_id": "p00824",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nstruct Node {\n    vector<vector<int>> board;\n    int moves;\n    int suit;\n    int value;\n};\n\nint getSuccessor(vector<vector<int>>& board, int suit, int value) {\n    for (int i = 0; i < 4; i++) {\n        for (int j = 0; j < 7; j++) {\n            if (board[i][j] / 10 == suit && board[i][j] % 10 == value + 1) {\n                return board[i][j];\n            }\n        }\n    }\n    return -1;\n}\n\nbool isValidMove(vector<vector<int>>& board, int suit, int value, int row, int col) {\n    if (col == 7 || board[row][col] == -1 || board[row][col] % 10 == 7) {\n        return false;\n    }\n    return true;\n}\n\nint bfs(vector<vector<int>>& board) {\n    queue<Node> q;\n    q.push({board, 0, -1, -1});\n    vector<vector<bool>> visited(4, vector<bool>(7, false));\n    while (!q.empty()) {\n        Node node = q.front();\n        q.pop();\n        int row = node.suit;\n        int col = node.value;\n        if (node.moves == 0) {\n            continue;\n        }\n        if (node.board[row][col] % 10 == 7) {\n            return node.moves;\n        }\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 7; j++) {\n                if (isValidMove(node.board, i, j, row, col)) {\n                    int successor = getSuccessor(node.board, i, j);\n                    if (successor != -1) {\n                        int newRow = i;\n                        int newCol = successor;\n                        if (visited[newRow][newCol]) {\n                            continue;\n                        }\n                        visited[newRow][newCol] = true;\n                        q.push({node.board, node.moves + 1, newRow, newCol});\n                    }\n                }\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int t;\n    cin >> t;\n    for (int i = 0; i < t; i++) {\n        vector<vector<int>> board(4, vector<int>(7));\n        for (int j = 0; j < 4; j++) {\n            for (int k = 0; k < 7; k++) {\n                cin >> board[j][k];\n            }\n        }\n        for (int j = 0; j < 4; j++) {\n            for (int k = 0; k < 7; k++) {\n                if (board[j][k] % 10 == 1) {\n                    board[j][k] = -1;\n                    board[j][0] = board[j][k];\n                }\n            }\n        }\n        int result = bfs(board);\n        cout << result << endl;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}