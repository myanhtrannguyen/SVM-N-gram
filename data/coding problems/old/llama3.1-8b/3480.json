{
    "solution_id": "llama3.1-8b-3480",
    "problem_id": "p01969",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_H 50\n#define MAX_W 50\n#define MAX_VERTICES 26\n#define INF 1000000\n\ntypedef struct {\n    int h, w;\n    char s, t;\n    char graph[MAX_H][MAX_W + 1];\n    int dist[MAX_VERTICES];\n} Graph;\n\nvoid bfs(Graph *g) {\n    int i, j, k, v;\n    bool visited[MAX_VERTICES];\n    for (v = 0; v < MAX_VERTICES; v++) {\n        visited[v] = false;\n        g->dist[v] = INF;\n    }\n    g->dist[g->s - 'A'] = 0;\n    int queue[MAX_VERTICES];\n    int front = 0, rear = 0;\n    queue[rear++] = g->s - 'A';\n    while (front < rear) {\n        v = queue[front++];\n        if (visited[v]) continue;\n        visited[v] = true;\n        for (i = 0; i < g->h; i++) {\n            for (j = 0; j < g->w; j++) {\n                if (g->graph[i][j] == v + 'A') {\n                    for (k = 0; k < 4; k++) {\n                        int ni = i + (k & 1) * 2 - 1, nj = j + (k >> 1) * 2 - 1;\n                        if (ni >= 0 && ni < g->h && nj >= 0 && nj < g->w) {\n                            char c = g->graph[ni][nj];\n                            if (c == 'o' || (c >= 'A' && c <= 'Z' && c != v + 'A')) {\n                                int nv = c - 'A';\n                                if (!visited[nv] && g->dist[nv] == INF) {\n                                    g->dist[nv] = g->dist[v] + 1;\n                                    queue[rear++] = nv;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int h, w, s, t;\n    char line[MAX_W * 2 + 5];\n    Graph g;\n    scanf(\"%d %d %c %c\", &g.h, &g.w, &g.s, &g.t);\n    for (int i = 0; i < g.h; i++) {\n        scanf(\"%s\", line);\n        for (int j = 0; j < g.w; j++) {\n            g.graph[i][j] = line[j];\n        }\n        g.graph[i][g.w] = '\\0';\n    }\n    bfs(&g);\n    printf(\"%d\\n\", g.dist[g.t - 'A']);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}