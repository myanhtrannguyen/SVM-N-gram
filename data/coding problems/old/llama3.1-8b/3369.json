{
    "solution_id": "llama3.1-8b-3369",
    "problem_id": "p01887",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAXN = 100005;\n\nstruct Node {\n    int x, y;\n};\n\nstruct Edge {\n    int to, w;\n};\n\nint w, h, k, n;\nvector<Node> houses;\nvector<Edge> edges[MAXN];\nint dist[MAXN];\nbool vis[MAXN];\nint dog[MAXN];\nint dogcnt;\n\nvoid bfs(int s) {\n    queue<int> q;\n    fill(dist, dist + MAXN, 1e9);\n    fill(vis, vis + MAXN, false);\n    dist[s] = 0;\n    q.push(s);\n    vis[s] = true;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (auto& e : edges[u]) {\n            int v = e.to;\n            if (dist[v] > dist[u] + e.w) {\n                dist[v] = dist[u] + e.w;\n                if (!vis[v]) {\n                    vis[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    cin >> w >> h >> k;\n    cin >> n;\n    for (int i = 1; i <= n; i++) {\n        int x, y;\n        cin >> x >> y;\n        houses.push_back({x, y});\n        dog[i] = 0;\n    }\n    for (int i = 1; i <= n; i++) {\n        int x, y;\n        cin >> x >> y;\n        dog[i] = 1;\n        dogcnt++;\n    }\n    for (int i = 1; i <= n; i++) {\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) <= 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 0});\n                edges[j].push_back({i, 0});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) <= 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy = houses[j - 1].y;\n            if (abs(x - xx) == 2 && abs(y - yy) == 2) {\n                edges[i].push_back({j, 1});\n                edges[j].push_back({i, 1});\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++) {\n        if (dog[i]) continue;\n        int x = houses[i - 1].x, y = houses[i - 1].y;\n        for (int j = 1; j <= n; j++) {\n            int xx = houses[j - 1].x, yy",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}