{
    "solution_id": "llama3.1-8b-907",
    "problem_id": "p00763",
    "language": "Python",
    "solution": "```python\nimport sys\nimport heapq\n\ndef read_input():\n    lines = sys.stdin.readlines()\n    lines = [line.strip().split() for line in lines]\n    return lines\n\ndef parse_input(lines):\n    n, m, c, s, g = map(int, lines[0])\n    stations = [0] * (n + 1)\n    lines = []\n    for i in range(1, m + 1):\n        x, y, d, company = map(int, lines[i])\n        lines.append((x, y, d, company))\n    fare_tables = []\n    for i in range(m + 1, m + 1 + c):\n        p = int(lines[i][0])\n        q = [int(x) for x in lines[i][1].split(',')]\n        r = [int(x) for x in lines[i][2].split(',')]\n        fare_tables.append((p, q, r))\n    return n, m, c, s, g, stations, lines, fare_tables\n\ndef build_graph(n, lines):\n    graph = [[] for _ in range(n + 1)]\n    for x, y, d, company in lines:\n        graph[x].append((y, d, company))\n        graph[y].append((x, d, company))\n    return graph\n\ndef build_fare_tables(fare_tables):\n    fare_tables = [build_fare_table(p, q, r) for p, q, r in fare_tables]\n    return fare_tables\n\ndef build_fare_table(p, q, r):\n    fare_table = [0] * (p + 1)\n    for i in range(1, p + 1):\n        fare_table[i] = fare_table[i - 1] + r[i - 1]\n    return fare_table\n\ndef dijkstra(graph, fare_tables, s, g):\n    distances = [float('inf')] * (len(graph) + 1)\n    distances[s] = 0\n    pq = [(0, s)]\n    while pq:\n        d, u = heapq.heappop(pq)\n        if u == g:\n            return d\n        if d > distances[u]:\n            continue\n        for v, w, company in graph[u]:\n            fare_table = fare_tables[company - 1]\n            p = fare_table[0]\n            q = fare_table[1]\n            r = fare_table[2]\n            total_distance = w\n            for i in range(1, p + 1):\n                if q[i - 1] <= total_distance:\n                    total_distance -= q[i - 1]\n                    total_distance += q[i - 1]\n                    fare = fare_table[i]\n                    break\n            new_distance = distances[u] + fare\n            if new_distance < distances[v]:\n                distances[v] = new_distance\n                heapq.heappush(pq, (new_distance, v))\n    return -1\n\ndef main():\n    lines = read_input()\n    n, m, c, s, g, stations, lines, fare_tables = parse_input(lines)\n    graph = build_graph(n, lines)\n    fare_tables = build_fare_tables(fare_tables)\n    result = dijkstra(graph, fare_tables, s, g)\n    print(result)\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}