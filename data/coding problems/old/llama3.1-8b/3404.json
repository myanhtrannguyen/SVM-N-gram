{
    "solution_id": "llama3.1-8b-3404",
    "problem_id": "p01950",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_VERTICES 100000\n#define MAX_EDGES 100000\n\ntypedef struct {\n    int vertex;\n    struct edge* next;\n} edge;\n\ntypedef struct {\n    int vertices;\n    int edges;\n    edge* adjacency_list[MAX_VERTICES];\n} graph;\n\nvoid initialize_graph(graph* g) {\n    for (int i = 0; i < g->vertices; i++) {\n        g->adjacency_list[i] = NULL;\n    }\n}\n\nvoid add_edge(graph* g, int u, int v) {\n    edge* new_edge = (edge*) malloc(sizeof(edge));\n    new_edge->vertex = v;\n    new_edge->next = g->adjacency_list[u];\n    g->adjacency_list[u] = new_edge;\n}\n\nvoid print_graph(graph* g) {\n    for (int i = 0; i < g->vertices; i++) {\n        edge* current = g->adjacency_list[i];\n        printf(\"%d -> \", i);\n        while (current != NULL) {\n            printf(\"%d \", current->vertex);\n            current = current->next;\n        }\n        printf(\"\\n\");\n    }\n}\n\nvoid bfs(graph* g) {\n    int current_size = 1;\n    int iterations = 0;\n    int* current = (int*) malloc(sizeof(int) * current_size);\n    current[0] = 0;\n    int* visited = (int*) malloc(sizeof(int) * g->vertices);\n    memset(visited, 0, sizeof(int) * g->vertices);\n\n    while (current_size > 0) {\n        int new_size = 0;\n        for (int i = 0; i < current_size; i++) {\n            edge* current_edge = g->adjacency_list[current[i]];\n            while (current_edge != NULL) {\n                int v = current_edge->vertex;\n                if (!visited[v]) {\n                    visited[v] = 1;\n                    current[new_size++] = v;\n                }\n                current_edge = current_edge->next;\n            }\n        }\n        iterations++;\n        current_size = new_size;\n        free(current);\n        current = (int*) malloc(sizeof(int) * current_size);\n        memcpy(current, visited, sizeof(int) * current_size);\n    }\n    free(current);\n    free(visited);\n    printf(\"%d\\n\", iterations);\n}\n\nint main() {\n    int vertices, edges;\n    scanf(\"%d %d\", &vertices, &edges);\n    graph g;\n    g.vertices = vertices;\n    g.edges = edges;\n    initialize_graph(&g);\n    for (int i = 0; i < edges; i++) {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        u--; v--;\n        add_edge(&g, u, v);\n        add_edge(&g, v, u);\n    }\n    bfs(&g);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}