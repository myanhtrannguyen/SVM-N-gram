{
    "solution_id": "llama3.1-8b-610",
    "problem_id": "p00689",
    "language": "Java",
    "solution": "```java\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.Scanner;\n\nclass Point {\n    int x, y;\n    boolean visited;\n\n    public Point(int x, int y) {\n        this.x = x;\n        this.y = y;\n        this.visited = false;\n    }\n}\n\npublic class Main {\n    static int n;\n    static Point[] points;\n    static double totalDistance;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            n = scanner.nextInt();\n            if (n == 0) break;\n            points = new Point[n];\n            for (int i = 0; i < n; i++) {\n                points[i] = new Point(scanner.nextInt(), scanner.nextInt());\n            }\n            Arrays.sort(points, new Comparator<Point>() {\n                @Override\n                public int compare(Point p1, Point p2) {\n                    if (p1.x == p2.x) {\n                        return p1.y - p2.y;\n                    } else {\n                        return p1.x - p2.x;\n                    }\n                }\n            });\n            totalDistance = 0;\n            int currentDirection = 0;\n            Point currentPoint = points[0];\n            currentPoint.visited = true;\n            for (int i = 1; i < n; i++) {\n                Point nextPoint = findNextPoint(currentPoint, currentDirection);\n                totalDistance += distance(currentPoint, nextPoint);\n                currentPoint = nextPoint;\n                currentPoint.visited = true;\n                currentDirection = (currentDirection + 1) % 4;\n            }\n            System.out.printf(\"%.1f%n\", totalDistance);\n        }\n        scanner.close();\n    }\n\n    static Point findNextPoint(Point currentPoint, int direction) {\n        for (int i = 0; i < points.length; i++) {\n            if (points[i] != currentPoint && !points[i].visited) {\n                if (direction == 0) {\n                    if (points[i].x > currentPoint.x) {\n                        return points[i];\n                    }\n                } else if (direction == 1) {\n                    if (points[i].y > currentPoint.y) {\n                        return points[i];\n                    }\n                } else if (direction == 2) {\n                    if (points[i].x < currentPoint.x) {\n                        return points[i];\n                    }\n                } else {\n                    if (points[i].y < currentPoint.y) {\n                        return points[i];\n                    }\n                }\n            }\n        }\n        return null;\n    }\n\n    static double distance(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}