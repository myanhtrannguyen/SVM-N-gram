{
    "solution_id": "llama3.1-8b-3228",
    "problem_id": "p01794",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define N 105\n#define M 1005\n\ntypedef struct {\n    int to, cap, cost;\n} Edge;\n\ntypedef struct {\n    int head[N], edge[M], next[M], tot;\n    long long flow, cost;\n} Graph;\n\nvoid add_edge(Graph *g, int u, int v, int cap, int cost) {\n    g->edge[g->tot] = v;\n    g->next[g->tot] = g->head[u];\n    g->head[u] = g->tot++;\n    g->edge[g->tot] = u;\n    g->next[g->tot] = g->head[v];\n    g->head[v] = g->tot++;\n    g->flow += cap;\n    g->cost += (long long) cap * cost;\n}\n\nint bfs(Graph *g, int s, int t) {\n    int i, q[N], front = 0, rear = 0;\n    bool vis[N];\n    for (i = 0; i < N; i++) vis[i] = false;\n    q[rear++] = s;\n    vis[s] = true;\n    for (i = 0; i < rear; i++) {\n        int u = q[i];\n        for (int j = g->head[u]; j != -1; j = g->next[j]) {\n            int v = g->edge[j];\n            if (!vis[v] && g->head[v] != j ^ 1) {\n                q[rear++] = v;\n                vis[v] = true;\n            }\n        }\n    }\n    return vis[t];\n}\n\nint dfs(Graph *g, int s, int t, int lim) {\n    if (s == t) return lim;\n    int i, u = s, f;\n    for (int &j = g->head[u]; j != -1; j = g->next[j]) {\n        int v = g->edge[j];\n        if (g->head[v] == j ^ 1 && g->cap[j] > 0) {\n            f = dfs(g, v, t, (lim > 0 ? (g->cap[j] < lim ? g->cap[j] : lim) : INT_MAX));\n            if (f > 0) {\n                g->cap[j] -= f;\n                g->cap[j ^ 1] += f;\n                g->flow += f;\n                g->cost += (long long) f * g->edge[j]->cost;\n                return f;\n            }\n        }\n    }\n    return 0;\n}\n\nvoid dinic(Graph *g, int s, int t) {\n    while (bfs(g, s, t)) {\n        while (1) {\n            int f = dfs(g, s, t, INT_MAX);\n            if (f == 0) break;\n        }\n    }\n}\n\nint main() {\n    int n, m, s, t;\n    scanf(\"%d%d%d%d\", &n, &m, &s, &t);\n    Graph g;\n    g.tot = 0;\n    g.flow = 0;\n    g.cost = 0;\n    for (int i = 0; i < N; i++) g.head[i] = -1;\n    for (int i = 0; i < M; i++) g.edge[i] = NULL;\n    for (int i = 0; i < m; i++) {\n        int u, v, cap, cost;\n        scanf(\"%d%d%d%d\", &u, &v, &cap, &cost);\n        u--;\n        v--;\n        add_edge(&g, u, v, cap, cost);\n    }\n    dinic(&g, s - 1, t - 1);\n    long long max_flow = g.flow;\n    long long min_cost = g.cost;\n    long long ans = (long long) min_cost * min_cost + (max_flow - g.flow) * (max_flow - g.flow);\n    int u, v;\n    for (int i = 0; i < g.tot; i++) {\n        u = g.edge[i] ? g.edge[i] - 1 : g.edge[i ^ 1] - 1;\n        v = g.edge[i ^ 1] ? g.edge[i ^ 1] - 1 : g.edge[i] - 1;\n        if (g.head[u] == i) {\n            ans -= (long long) g.cap[i] * g.cap[i] * g.edge[i]->cost;\n            ans += (long long) g.cap[i] * g.cap[i] * g.edge[i ^ 1]->cost;\n        }\n    }\n    printf(\"%lld/%lld\\n\", ans, max_flow - g.flow);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}