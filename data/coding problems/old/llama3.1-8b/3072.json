{
    "solution_id": "llama3.1-8b-3072",
    "problem_id": "p01682",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define MAX_EXPR 2000\n#define MOD 1000000007\n\ntypedef struct {\n    char *str;\n    int len;\n} Token;\n\nToken *tokenize(char *expr) {\n    Token *tokens = (Token *)malloc(100 * sizeof(Token));\n    int token_count = 0;\n    int i = 0;\n    while (expr[i] != '\\0') {\n        if (expr[i] == ' ' || expr[i] == '\\t') {\n            i++;\n            continue;\n        }\n        int j = i;\n        while (expr[j] != ' ' && expr[j] != '\\t' && expr[j] != '\\0') {\n            j++;\n        }\n        char *token = (char *)malloc((j - i + 1) * sizeof(char));\n        strncpy(token, expr + i, j - i);\n        token[j - i] = '\\0';\n        tokens[token_count].str = token;\n        tokens[token_count].len = j - i;\n        token_count++;\n        i = j;\n    }\n    tokens[token_count].str = NULL;\n    tokens[token_count].len = 0;\n    return tokens;\n}\n\nint eval_expr(Token *tokens, int token_count) {\n    if (strcmp(tokens[0].str, \"S\") == 0) {\n        return (pow(2, (long long)eval_expr(tokens + 1, token_count - 1)) * (long long)eval_expr(tokens + 3, token_count - 3)) % MOD;\n    } else {\n        int x = atoi(tokens[0].str);\n        int y = atoi(tokens[2].str);\n        return (x >> y);\n    }\n}\n\nint main() {\n    char expr[MAX_EXPR];\n    while (fgets(expr, MAX_EXPR, stdin) != NULL) {\n        if (strcmp(expr, \"#\\n\") == 0) {\n            break;\n        }\n        Token *tokens = tokenize(expr);\n        int result = eval_expr(tokens, tokens[0].len);\n        printf(\"%d\\n\", result);\n        for (int i = 0; tokens[i].str != NULL; i++) {\n            free(tokens[i].str);\n        }\n        free(tokens);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}