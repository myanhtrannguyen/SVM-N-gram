{
    "solution_id": "llama3.1-8b-996",
    "problem_id": "p00786",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_LINE 80\n#define MAX_EXPR 100\n#define MAX_COMPONENT 100\n\ntypedef struct component {\n    char label;\n    struct component *left;\n    struct component *right;\n} component;\n\ncomponent *create_component(char label) {\n    component *c = (component *)malloc(sizeof(component));\n    c->label = label;\n    c->left = NULL;\n    c->right = NULL;\n    return c;\n}\n\ncomponent *parse(char *expr, int *line_num) {\n    char *token = strtok(expr, \"(),\");\n    if (token[0] == '(') {\n        token = strtok(NULL, \"(),\");\n        component *root = create_component(token[0]);\n        *line_num = 1;\n        while (token != NULL && token[0] != ')') {\n            if (token[0] == '(') {\n                component *left = parse(token + 1, line_num);\n                component *right = parse(strtok(NULL, \"(),\"), line_num);\n                root->left = left;\n                root->right = right;\n                *line_num += 2;\n            } else {\n                component *child = parse(token, line_num);\n                root->right = child;\n                *line_num += 1;\n            }\n            token = strtok(NULL, \"(),\");\n        }\n        return root;\n    } else {\n        return create_component(token[0]);\n    }\n}\n\nvoid print_component(component *c, int level) {\n    if (c->left != NULL) {\n        print_component(c->left, level + 1);\n    }\n    for (int i = 0; i < level; i++) {\n        printf(\" \");\n    }\n    printf(\"%c\\n\", c->label);\n    if (c->right != NULL) {\n        for (int i = 0; i < level; i++) {\n            printf(\"-\");\n        }\n        printf(\"\\n\");\n        print_component(c->right, level + 1);\n    }\n}\n\nvoid print_diagram(component *root) {\n    int level = 0;\n    while (root != NULL) {\n        for (int i = 0; i < level; i++) {\n            printf(\" \");\n        }\n        printf(\"%c\\n\", root->label);\n        if (root->left != NULL) {\n            for (int i = 0; i < level; i++) {\n                printf(\"-\");\n            }\n            printf(\"\\n\");\n            level++;\n        }\n        root = root->right;\n    }\n    for (int i = 0; i < level; i++) {\n        printf(\" \");\n    }\n    printf(\" \");\n    for (int i = 0; i < level; i++) {\n        printf(\"-\");\n    }\n    printf(\"\\n\");\n    level--;\n    while (level > 0) {\n        for (int i = 0; i < level; i++) {\n            printf(\" \");\n        }\n        printf(\" \");\n        for (int i = 0; i < level; i++) {\n            printf(\"-\");\n        }\n        printf(\"\\n\");\n        level--;\n    }\n}\n\nint main() {\n    char expr[MAX_EXPR];\n    int line_num = 1;\n    while (fgets(expr, MAX_EXPR, stdin) != NULL) {\n        expr[strcspn(expr, \"\\n\")] = 0;\n        if (expr[strlen(expr) - 1] == '.') {\n            expr[strlen(expr) - 1] = '\\0';\n        }\n        component *root = parse(expr, &line_num);\n        printf(\"%d:\\n\", line_num);\n        print_diagram(root);\n        line_num++;\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}