{
    "solution_id": "llama3.1-8b-1220",
    "problem_id": "p00842",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_N 50\n\nint min(int a, int b) {\n    return a < b ? a : b;\n}\n\nint max(int a, int b) {\n    return a > b ? a : b;\n}\n\nint parent[MAX_N][MAX_N];\nint rank[MAX_N];\n\nvoid make_set(int i) {\n    parent[i][0] = i;\n    rank[i] = 0;\n}\n\nint find_set(int i) {\n    if (parent[i][0] == i)\n        return i;\n    return parent[i][0] = find_set(parent[i][0]);\n}\n\nvoid union_sets(int i, int j) {\n    int x = find_set(i);\n    int y = find_set(j);\n    if (x != y) {\n        if (rank[x] < rank[y])\n            parent[x][0] = y;\n        else {\n            parent[y][0] = x;\n            if (rank[x] == rank[y])\n                rank[x]++;\n        }\n    }\n}\n\nint main() {\n    int n, i, j, k, a, b, c, d, e, f, g, h, x, y, z;\n    int matrix[MAX_N][MAX_N];\n\n    while (scanf(\"%d\", &n) == 1) {\n        if (n == 0)\n            break;\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                scanf(\"%d\", &matrix[i][j]);\n\n        for (i = 0; i < n; i++)\n            make_set(i);\n\n        for (i = 0; i < n; i++)\n            for (j = i + 1; j < n; j++) {\n                a = matrix[i][j];\n                b = i;\n                c = j;\n                d = 0;\n                e = 0;\n                f = 0;\n                g = 0;\n                h = 0;\n\n                while (d < a) {\n                    x = find_set(b);\n                    y = find_set(c);\n                    if (x != y) {\n                        if (rank[x] < rank[y])\n                            parent[x][0] = y;\n                        else {\n                            parent[y][0] = x;\n                            if (rank[x] == rank[y])\n                                rank[x]++;\n                        }\n                        d++;\n                    } else {\n                        if (f == 0) {\n                            e = b;\n                            f = 1;\n                        } else {\n                            g = c;\n                            h = b;\n                            break;\n                        }\n                    }\n                    if (f == 1 && g == 0) {\n                        g = c;\n                        h = b;\n                        break;\n                    }\n                    if (f == 1 && h == 0) {\n                        h = b;\n                        break;\n                    }\n                    if (f == 0 && g == 0) {\n                        if (e == c)\n                            g = b;\n                        else\n                            h = b;\n                        break;\n                    }\n                    if (f == 0 && h == 0) {\n                        if (e == c)\n                            h = b;\n                        else\n                            g = b;\n                        break;\n                    }\n                    if (f == 1 && g == 0 && h == 0) {\n                        if (e == c)\n                            g = b;\n                        else\n                            h = b;\n                        break;\n                    }\n                    if (f == 0 && g == 0 && h == 0) {\n                        if (e == c)\n                            h = b;\n                        else\n                            g = b;\n                        break;\n                    }\n                    b = find_set(b);\n                    c = find_set(c);\n                }\n                if (f == 1 && g == 0)\n                    union_sets(e, c);\n                else if (f == 1 && h == 0)\n                    union_sets(e, b);\n                else if (f == 0 && g == 0)\n                    union_sets(e, c);\n                else if (f == 0 && h == 0)\n                    union_sets(e, b);\n                else if (f == 1 && g == 0 && h == 0)\n                    union_sets(e, c);\n                else if (f == 0 && g == 0 && h == 0)\n                    union_sets(e, b);\n            }\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] == 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for (i = 0; i < n; i++)\n            for (j = 0; j < n; j++)\n                if (i != j && matrix[i][j] != 0)\n                    union_sets(i, j);\n\n        for",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}