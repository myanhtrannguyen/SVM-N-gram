{
    "solution_id": "llama3.1-8b-752",
    "problem_id": "p00725",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_W 20\n#define MAX_H 20\n#define MAX_BLOCKS 100\n\ntypedef struct {\n    int w, h;\n    int board[MAX_H][MAX_W];\n    int visited[MAX_H][MAX_W];\n    int queue[MAX_H * MAX_W * 10];\n    int front, rear;\n} Board;\n\nvoid init(Board *b, int w, int h) {\n    b->w = w;\n    b->h = h;\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            b->board[i][j] = 0;\n            b->visited[i][j] = 0;\n        }\n    }\n    b->front = 0;\n    b->rear = 0;\n}\n\nint is_valid(Board *b, int x, int y) {\n    return x >= 0 && x < b->h && y >= 0 && y < b->w;\n}\n\nint is_valid_move(Board *b, int x, int y) {\n    return is_valid(b, x, y) && b->board[x][y] != 1;\n}\n\nvoid enqueue(Board *b, int x, int y) {\n    b->queue[b->rear++] = x * b->w + y;\n}\n\nint dequeue(Board *b) {\n    return b->queue[b->front++];\n}\n\nint bfs(Board *b) {\n    int x, y, i, j, moves;\n    int dx[] = {-1, 0, 1, 0};\n    int dy[] = {0, -1, 0, 1};\n    int start_x, start_y, goal_x, goal_y;\n    int queue_size;\n\n    for (i = 0; i < b->h; i++) {\n        for (j = 0; j < b->w; j++) {\n            b->visited[i][j] = 0;\n        }\n    }\n\n    start_x = -1;\n    start_y = -1;\n    goal_x = -1;\n    goal_y = -1;\n\n    for (i = 0; i < b->h; i++) {\n        for (j = 0; j < b->w; j++) {\n            if (b->board[i][j] == 2) {\n                start_x = i;\n                start_y = j;\n            } else if (b->board[i][j] == 3) {\n                goal_x = i;\n                goal_y = j;\n            }\n        }\n    }\n\n    if (start_x == -1 || goal_x == -1) {\n        return -1;\n    }\n\n    enqueue(b, start_x, start_y);\n    b->visited[start_x][start_y] = 1;\n\n    moves = 0;\n    queue_size = 1;\n\n    while (queue_size > 0) {\n        x = dequeue(b) / b->w;\n        y = dequeue(b) % b->w;\n\n        if (x == goal_x && y == goal_y) {\n            return moves;\n        }\n\n        for (i = 0; i < 4; i++) {\n            int new_x = x + dx[i];\n            int new_y = y + dy[i];\n\n            if (is_valid_move(b, new_x, new_y)) {\n                if (b->visited[new_x][new_y] == 0) {\n                    enqueue(b, new_x, new_y);\n                    b->visited[new_x][new_y] = 1;\n                    queue_size++;\n                }\n            }\n        }\n\n        queue_size--;\n        moves++;\n    }\n\n    return -1;\n}\n\nint main() {\n    int w, h, i, j;\n    int num_datasets;\n    Board b;\n\n    scanf(\"%d\", &num_datasets);\n\n    while (num_datasets--) {\n        scanf(\"%d %d\", &w, &h);\n        init(&b, w, h);\n\n        for (i = 0; i < h; i++) {\n            for (j = 0; j < w; j++) {\n                scanf(\"%d\", &b.board[i][j]);\n            }\n        }\n\n        printf(\"%d\\n\", bfs(&b));\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}