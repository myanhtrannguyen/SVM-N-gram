{
    "solution_id": "llama3.1-8b-913",
    "problem_id": "p00765",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cmath>\n\nusing namespace std;\n\ntypedef long double ld;\n\nconst ld eps = 1e-8;\n\nstruct Card {\n    int rank;\n    int count;\n};\n\nstruct Pattern {\n    vector<string> vars;\n    vector<int> pluses;\n};\n\nld calc(vector<Card>& cards, const Pattern& pattern) {\n    map<string, int> var2rank;\n    for (int i = 0; i < pattern.vars.size(); ++i) {\n        var2rank[pattern.vars[i]] = cards[pattern.pluses[i]].rank;\n    }\n\n    ld res = 1.0;\n    for (int i = 0; i < pattern.vars.size(); ++i) {\n        int rank = var2rank[pattern.vars[i]];\n        int plus = pattern.pluses[i];\n        ld prob = 1.0;\n        for (int j = 0; j < plus; ++j) {\n            prob *= (cards[plus].count - j) / (cards[plus].count + 1);\n        }\n        res *= prob;\n    }\n\n    ld prob = 1.0;\n    for (int i = 0; i < cards.size(); ++i) {\n        if (pattern.pluses[i] == 0) {\n            prob *= cards[i].count / (cards[i].count + 1);\n        }\n    }\n\n    return res * prob;\n}\n\nld solve(vector<Card>& cards, const vector<string>& pattern) {\n    vector<Pattern> patterns;\n    for (int i = 0; i < pattern.size(); ++i) {\n        string s = pattern[i];\n        vector<string> vars;\n        vector<int> pluses;\n        int j = 0;\n        while (j < s.size()) {\n            if (s[j] == '*') {\n                pluses.push_back(0);\n                ++j;\n            } else if (s[j] == '+') {\n                int k = j + 1;\n                while (k < s.size() && isdigit(s[k])) {\n                    ++k;\n                }\n                pluses.push_back(k - j - 1);\n                vars.push_back(s.substr(j + 1, k - j - 1));\n                j = k;\n            } else {\n                int k = j + 1;\n                while (k < s.size() && isdigit(s[k])) {\n                    ++k;\n                }\n                pluses.push_back(0);\n                vars.push_back(s.substr(j, k - j));\n                j = k;\n            }\n        }\n        patterns.push_back({vars, pluses});\n    }\n\n    ld res = 0.0;\n    for (int i = 0; i < cards.size(); ++i) {\n        ld prob = 1.0;\n        for (int j = 0; j < cards.size(); ++j) {\n            if (i != j) {\n                prob *= cards[j].count / (cards[j].count + 1);\n            }\n        }\n        for (const auto& p : patterns) {\n            res += calc(cards, p) * prob;\n        }\n    }\n\n    return res;\n}\n\nint main() {\n    int N, M, L;\n    while (cin >> N >> M >> L) {\n        if (N == 0 && M == 0 && L == 0) {\n            break;\n        }\n\n        vector<Card> cards(M);\n        for (int i = 0; i < M; ++i) {\n            cards[i].rank = i + 1;\n            cards[i].count = N;\n        }\n\n        vector<string> pattern(L);\n        for (int i = 0; i < L; ++i) {\n            cin >> pattern[i];\n        }\n\n        ld res = solve(cards, pattern);\n        cout << fixed << setprecision(15) << res << endl;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}