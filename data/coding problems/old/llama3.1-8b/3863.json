{
    "solution_id": "llama3.1-8b-3863",
    "problem_id": "p02286",
    "language": "Python",
    "solution": "```python\nimport random\nimport sys\n\nclass Node:\n    def __init__(self, key, priority):\n        self.key = key\n        self.priority = priority\n        self.left = None\n        self.right = None\n\nclass Treap:\n    def __init__(self):\n        self.root = None\n\n    def rightRotate(self, t):\n        s = t.left\n        t.left = s.right\n        s.right = t\n        return s\n\n    def leftRotate(self, t):\n        s = t.right\n        t.right = s.left\n        s.left = t\n        return s\n\n    def insert(self, t, key, priority):\n        if t is None:\n            return Node(key, priority)\n        if key == t.key:\n            return t\n        if key < t.key:\n            t.left = self.insert(t.left, key, priority)\n            if t.priority < t.left.priority:\n                t = self.rightRotate(t)\n        else:\n            t.right = self.insert(t.right, key, priority)\n            if t.priority < t.right.priority:\n                t = self.leftRotate(t)\n        return t\n\n    def delete(self, t, key):\n        if t is None:\n            return None\n        if key < t.key:\n            t.left = self.delete(t.left, key)\n        elif key > t.key:\n            t.right = self.delete(t.right, key)\n        else:\n            if t.left is None:\n                return t.right\n            elif t.right is None:\n                return t.left\n            elif t.left.priority > t.right.priority:\n                t = self.leftRotate(t)\n                t.left = self.delete(t.left, key)\n            else:\n                t = self.rightRotate(t)\n                t.right = self.delete(t.right, key)\n        return t\n\n    def inorder(self, t):\n        if t is not None:\n            self.inorder(t.left)\n            sys.stdout.write(str(t.key) + \" \")\n            self.inorder(t.right)\n\n    def preorder(self, t):\n        if t is not None:\n            sys.stdout.write(str(t.key) + \" \")\n            self.preorder(t.left)\n            self.preorder(t.right)\n\n    def find(self, t, key):\n        if t is None:\n            return False\n        if key == t.key:\n            return True\n        if key < t.key:\n            return self.find(t.left, key)\n        else:\n            return self.find(t.right, key)\n\ndef main():\n    m = int(input())\n    t = Treap()\n    for _ in range(m):\n        line = input().split()\n        if line[0] == \"insert\":\n            key = int(line[1])\n            priority = int(line[2])\n            t.root = t.insert(t.root, key, priority)\n        elif line[0] == \"find\":\n            key = int(line[1])\n            if t.find(t.root, key):\n                print(\"yes\")\n            else:\n                print(\"no\")\n        elif line[0] == \"delete\":\n            key = int(line[1])\n            t.root = t.delete(t.root, key)\n        elif line[0] == \"print\":\n            print(\"inorder: \", end=\"\")\n            t.inorder(t.root)\n            print()\n            print(\"preorder: \", end=\"\")\n            t.preorder(t.root)\n            print()\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}