{
    "solution_id": "llama3.1-8b-2949",
    "problem_id": "p01595",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nconst int dx[] = {0, 0, 1, -1};\nconst int dy[] = {1, -1, 0, 0};\n\nstruct State {\n    int x, y;\n    int mirror[4];\n    int crystal;\n    int doorHit;\n    int statueHit;\n};\n\nbool isValid(int x, int y, int w, int h) {\n    return x >= 0 && x < w && y >= 0 && y < h;\n}\n\nbool isBlocked(int x, int y, vector<string>& map) {\n    return map[y][x] == '#' || map[y][x] == '*';\n}\n\nbool isDoor(int x, int y, vector<string>& map) {\n    return map[y][x] == 'D';\n}\n\nbool isStatue(int x, int y, vector<string>& map) {\n    return map[y][x] == 'S';\n}\n\nbool isMirror(int x, int y, vector<string>& map) {\n    return map[y][x] == '-' || map[y][x] == '|' || map[y][x] == '/' || map[y][x] == '\\\\';\n}\n\nbool isCrystal(int x, int y, vector<string>& map) {\n    return map[y][x] == 'O';\n}\n\nbool isEmbrasure(int x, int y, vector<string>& map) {\n    return map[y][x] == 'L';\n}\n\nbool isWall(int x, int y, vector<string>& map) {\n    return map[y][x] == '#';\n}\n\nbool isJohn(int x, int y, vector<string>& map) {\n    return map[y][x] == '@';\n}\n\nbool isFloor(int x, int y, vector<string>& map) {\n    return map[y][x] == '.';\n}\n\nbool isDiagonal(int x, int y, vector<string>& map) {\n    return map[y][x] == '/' || map[y][x] == '\\\\';\n}\n\nbool isHorizontal(int x, int y, vector<string>& map) {\n    return map[y][x] == '-';\n}\n\nbool isVertical(int x, int y, vector<string>& map) {\n    return map[y][x] == '|';\n}\n\nbool isDiagonalHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isDiagonal(x, y, map)) {\n        if (mirror[0] == 1 && mirror[1] == 1) return true;\n        if (mirror[2] == 1 && mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isHorizontalHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isHorizontal(x, y, map)) {\n        if (mirror[0] == 1) return true;\n        if (mirror[1] == 1) return true;\n    }\n    return false;\n}\n\nbool isVerticalHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isVertical(x, y, map)) {\n        if (mirror[2] == 1) return true;\n        if (mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isDoorHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isDoor(x, y, map)) {\n        if (mirror[0] == 1 && mirror[1] == 1 && mirror[2] == 1 && mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isStatueHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isStatue(x, y, map)) {\n        if (mirror[0] == 1 || mirror[1] == 1 || mirror[2] == 1 || mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isCrystalHit(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isCrystal(x, y, map)) {\n        if (crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isMirror(x, y, map)) {\n        if (mirror[0] == 1) return true;\n        if (mirror[1] == 1) return true;\n        if (mirror[2] == 1) return true;\n        if (mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByCrystal(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isCrystal(x, y, map)) {\n        if (crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByWall(int x, int y, vector<string>& map) {\n    return isWall(x, y, map);\n}\n\nbool isBlockedByPillar(int x, int y, vector<string>& map) {\n    return isBlocked(x, y, map);\n}\n\nbool isBlockedByJohn(int x, int y, vector<string>& map) {\n    return isJohn(x, y, map);\n}\n\nbool isBlockedByEmbrasure(int x, int y, vector<string>& map) {\n    return isEmbrasure(x, y, map);\n}\n\nbool isBlockedByDiagonalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isDiagonal(x, y, map)) {\n        if (mirror[0] == 1 && mirror[1] == 1) return true;\n        if (mirror[2] == 1 && mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByHorizontalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isHorizontal(x, y, map)) {\n        if (mirror[0] == 1) return true;\n        if (mirror[1] == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByVerticalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isVertical(x, y, map)) {\n        if (mirror[2] == 1) return true;\n        if (mirror[3] == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByCrystalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isCrystal(x, y, map)) {\n        if (crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByDiagonalMirrorCrystal(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isDiagonal(x, y, map)) {\n        if (mirror[0] == 1 && mirror[1] == 1 && crystal == 1) return true;\n        if (mirror[2] == 1 && mirror[3] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByHorizontalMirrorCrystal(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isHorizontal(x, y, map)) {\n        if (mirror[0] == 1 && crystal == 1) return true;\n        if (mirror[1] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByVerticalMirrorCrystal(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isVertical(x, y, map)) {\n        if (mirror[2] == 1 && crystal == 1) return true;\n        if (mirror[3] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByDiagonalMirrorCrystalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isDiagonal(x, y, map)) {\n        if (mirror[0] == 1 && mirror[1] == 1 && crystal == 1) return true;\n        if (mirror[2] == 1 && mirror[3] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByHorizontalMirrorCrystalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isHorizontal(x, y, map)) {\n        if (mirror[0] == 1 && crystal == 1) return true;\n        if (mirror[1] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool isBlockedByVerticalMirrorCrystalMirror(int x, int y, vector<string>& map, int mirror[4], int crystal) {\n    if (isVertical(x, y, map)) {\n        if (mirror[2] == 1 && crystal == 1) return true;\n        if (mirror[3] == 1 && crystal == 1) return true;\n    }\n    return false;\n}\n\nbool is",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}