{
    "solution_id": "llama3.1-8b-2359",
    "problem_id": "p03585",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Line {\n        long a, b, c;\n\n        public Line(long a, long b, long c) {\n            this.a = a;\n            this.b = b;\n            this.c = c;\n        }\n    }\n\n    static class Point {\n        long x, y;\n\n        public Point(long x, long y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static long cross(Line l1, Line l2) {\n        return l1.a * l2.b - l1.b * l2.a;\n    }\n\n    static Point intersection(Line l1, Line l2) {\n        long a1 = l1.a, b1 = l1.b, c1 = l1.c;\n        long a2 = l2.a, b2 = l2.b, c2 = l2.c;\n        long d = a1 * b2 - a2 * b1;\n        if (d == 0) {\n            return new Point(0, 0);\n        }\n        long x = (b2 * c1 - b1 * c2) * 1L << 32;\n        x /= d;\n        long y = (a1 * c2 - a2 * c1) * 1L << 32;\n        y /= d;\n        return new Point(x >> 32, y >> 32);\n    }\n\n    static void solve(FastScanner in, PrintWriter out) {\n        int n = in.nextInt();\n        Line[] lines = new Line[n + 2];\n        for (int i = 0; i < n; i++) {\n            lines[i] = new Line(in.nextLong(), in.nextLong(), in.nextLong());\n        }\n        lines[n] = new Line(1, 0, 0);\n        lines[n + 1] = new Line(0, 1, 0);\n        Point[] points = new Point[n + 2];\n        for (int i = 0; i < n; i++) {\n            points[i] = intersection(lines[i], lines[n + 1]);\n        }\n        for (int i = n; i < n + 2; i++) {\n            points[i] = intersection(lines[i], lines[n]);\n        }\n        long minX = Long.MAX_VALUE, minY = Long.MAX_VALUE, maxX = Long.MIN_VALUE, maxY = Long.MIN_VALUE;\n        for (int i = 0; i < n + 2; i++) {\n            minX = Math.min(minX, points[i].x);\n            minY = Math.min(minY, points[i].y);\n            maxX = Math.max(maxX, points[i].x);\n            maxY = Math.max(maxY, points[i].y);\n        }\n        long x = (minX + maxX) / 2;\n        long y = (minY + maxY) / 2;\n        for (int i = 0; i < n + 2; i++) {\n            long dx = Math.abs(points[i].x - x);\n            long dy = Math.abs(points[i].y - y);\n            if (dx > dy) {\n                x = points[i].x;\n            } else if (dx < dy) {\n                y = points[i].y;\n            }\n        }\n        out.println(x + \" \" + y);\n    }\n\n    public static void main(String[] args) {\n        FastScanner in = new FastScanner();\n        PrintWriter out = new PrintWriter(System.out);\n        int t = 1;\n        while (t-- > 0) {\n            solve(in, out);\n        }\n        out.close();\n    }\n\n    static class FastScanner {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastScanner() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        public FastScanner(String s) {\n            try {\n                br = new BufferedReader(new FileReader(s));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n        }\n\n        String nextToken() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(nextToken());\n        }\n\n        long nextLong() {\n            return Long.parseLong(nextToken());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(nextToken());\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}