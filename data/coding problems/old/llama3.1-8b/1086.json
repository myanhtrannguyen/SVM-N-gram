{
    "solution_id": "llama3.1-8b-1086",
    "problem_id": "p00808",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Train {\n        String start;\n        String end;\n        int price;\n        int startHour;\n        int startMinute;\n        int endHour;\n        int endMinute;\n\n        public Train(String start, String end, int price) {\n            this.start = start;\n            this.end = end;\n            this.price = price;\n            String[] parts = start.split(\" \");\n            this.startHour = Integer.parseInt(parts[1].split(\":\")[0]);\n            this.startMinute = Integer.parseInt(parts[1].split(\":\")[1]);\n            parts = end.split(\" \");\n            this.endHour = Integer.parseInt(parts[1].split(\":\")[0]);\n            this.endMinute = Integer.parseInt(parts[1].split(\":\")[1]);\n        }\n    }\n\n    static class City {\n        String name;\n        List<Train> trains = new ArrayList<>();\n\n        public City(String name) {\n            this.name = name;\n        }\n    }\n\n    static class MeetingPoint {\n        String city;\n        int time;\n        int price;\n\n        public MeetingPoint(String city, int time, int price) {\n            this.city = city;\n            this.time = time;\n            this.price = price;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            Map<String, City> cities = new HashMap<>();\n            for (int i = 0; i < n; i++) {\n                String[] parts = br.readLine().split(\" \");\n                String start = parts[0];\n                String end = parts[2];\n                int price = Integer.parseInt(parts[3]);\n                Train train = new Train(start, end, price);\n                if (!cities.containsKey(start)) {\n                    cities.put(start, new City(start));\n                }\n                if (!cities.containsKey(end)) {\n                    cities.put(end, new City(end));\n                }\n                cities.get(start).trains.add(train);\n                cities.get(end).trains.add(new Train(end, start, price));\n            }\n            List<MeetingPoint> meetingPoints = new ArrayList<>();\n            for (City city : cities.values()) {\n                for (Train train : city.trains) {\n                    for (Train otherTrain : city.trains) {\n                        if (train != otherTrain) {\n                            int start = train.startHour * 60 + train.startMinute;\n                            int end = train.endHour * 60 + train.endMinute;\n                            int otherStart = otherTrain.startHour * 60 + otherTrain.startMinute;\n                            int otherEnd = otherTrain.endHour * 60 + otherTrain.endMinute;\n                            if (start >= 8 * 60 && start <= 18 * 60 && end >= 8 * 60 && end <= 18 * 60 && otherStart >= 8 * 60 && otherStart <= 18 * 60 && otherEnd >= 8 * 60 && otherEnd <= 18 * 60) {\n                                int time = Math.max(Math.max(start, otherStart), Math.max(end, otherEnd)) - Math.min(Math.min(start, otherStart), Math.min(end, otherEnd));\n                                if (time >= 30 * 60) {\n                                    meetingPoints.add(new MeetingPoint(train.start, time, train.price + otherTrain.price));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            Collections.sort(meetingPoints, Comparator.comparingInt(mp -> mp.price));\n            int minPrice = Integer.MAX_VALUE;\n            for (MeetingPoint mp : meetingPoints) {\n                if (mp.city.equals(\"Hakodate\") && mp.time >= 8 * 60 && mp.time <= 18 * 60) {\n                    minPrice = Math.min(minPrice, mp.price);\n                }\n                if (mp.city.equals(\"Tokyo\") && mp.time >= 8 * 60 && mp.time <= 18 * 60) {\n                    minPrice = Math.min(minPrice, mp.price);\n                }\n            }\n            System.out.println(minPrice == Integer.MAX_VALUE ? 0 : minPrice);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}