{
    "solution_id": "llama3.1-8b-1340",
    "problem_id": "p00872",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_DEGREE 10\n#define MAX_COEFFICIENTS 100\n\ntypedef struct {\n    int degree;\n    int coefficients[MAX_DEGREE];\n} Polynomial;\n\nPolynomial* read_polynomial(char* str) {\n    Polynomial* poly = (Polynomial*)malloc(sizeof(Polynomial));\n    poly->degree = 0;\n    int sign = 1;\n    int i = 0;\n    while (str[i] != '\\0') {\n        if (str[i] == '-') {\n            sign = -1;\n        } else if (str[i] == '+') {\n            sign = 1;\n        } else if (isdigit(str[i])) {\n            int j = i;\n            while (isdigit(str[j])) {\n                j++;\n            }\n            int value = atoi(str + i);\n            if (value != 0) {\n                poly->coefficients[poly->degree] = sign * value;\n                poly->degree++;\n            }\n            i = j;\n        } else if (str[i] == 'x') {\n            if (poly->degree == 0) {\n                poly->coefficients[poly->degree] = 1;\n                poly->degree++;\n            }\n            i++;\n        } else if (str[i] == '^') {\n            i++;\n            int j = i;\n            while (isdigit(str[j])) {\n                j++;\n            }\n            int exponent = atoi(str + i);\n            if (exponent != 0) {\n                for (int k = poly->degree - 1; k >= 0; k--) {\n                    poly->coefficients[k] *= pow(exponent, poly->degree - 1 - k);\n                }\n                poly->degree = 1;\n                poly->coefficients[0] = poly->coefficients[0] / pow(exponent, poly->degree - 1);\n            }\n            i = j;\n        } else {\n            i++;\n        }\n    }\n    return poly;\n}\n\nvoid print_polynomial(Polynomial* poly) {\n    for (int i = poly->degree - 1; i >= 0; i--) {\n        if (poly->coefficients[i] != 0) {\n            if (poly->coefficients[i] > 0) {\n                printf(\"+\");\n            }\n            if (poly->coefficients[i] != 1 || i == 0) {\n                printf(\"%d\", abs(poly->coefficients[i]));\n            }\n            if (i > 0) {\n                printf(\"x\");\n                if (i > 1) {\n                    printf(\"^%d\", i);\n                }\n            }\n        }\n    }\n    printf(\"\\n\");\n}\n\nPolynomial* gcd_polynomials(Polynomial* poly1, Polynomial* poly2) {\n    if (poly1->degree == 0) {\n        return poly2;\n    }\n    if (poly2->degree == 0) {\n        return poly1;\n    }\n    Polynomial* result = (Polynomial*)malloc(sizeof(Polynomial));\n    result->degree = 0;\n    for (int i = 0; i < poly1->degree; i++) {\n        for (int j = 0; j < poly2->degree; j++) {\n            if (poly1->coefficients[i] == poly2->coefficients[j]) {\n                result->coefficients[result->degree] = poly1->coefficients[i];\n                result->degree++;\n                break;\n            }\n        }\n    }\n    return result;\n}\n\nint main() {\n    char str[1000];\n    while (1) {\n        fgets(str, 1000, stdin);\n        if (str[0] == '.') {\n            break;\n        }\n        Polynomial* poly1 = read_polynomial(str);\n        fgets(str, 1000, stdin);\n        Polynomial* poly2 = read_polynomial(str);\n        Polynomial* result = gcd_polynomials(poly1, poly2);\n        print_polynomial(result);\n        free(poly1);\n        free(poly2);\n        free(result);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}