{
    "solution_id": "llama3.1-8b-882",
    "problem_id": "p00757",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.Arrays;\n\npublic class Main {\n\n    static int[][] demand;\n    static int h, w, s;\n\n    static class Node {\n        int x, y, val;\n        Node left, right;\n\n        public Node(int x, int y, int val) {\n            this.x = x;\n            this.y = y;\n            this.val = val;\n            this.left = null;\n            this.right = null;\n        }\n    }\n\n    static Node build(int x, int y, int val) {\n        if (x == h || y == w) return null;\n        Node node = new Node(x, y, val);\n        if (x < h - 1) {\n            node.left = build(x + 1, y, demand[x + 1][y]);\n        }\n        if (y < w - 1) {\n            node.right = build(x, y + 1, demand[x][y + 1]);\n        }\n        return node;\n    }\n\n    static int maxSuppressedDemand(Node node) {\n        if (node == null) return 0;\n        int left = maxSuppressedDemand(node.left);\n        int right = maxSuppressedDemand(node.right);\n        return Math.max(left, right) + node.val;\n    }\n\n    static int countGroups(Node node) {\n        if (node == null) return 1;\n        return countGroups(node.left) + countGroups(node.right) + 1;\n    }\n\n    static int reservePower(Node node) {\n        if (node == null) return 0;\n        int left = reservePower(node.left);\n        int right = reservePower(node.right);\n        return Math.max(left, right) - node.val;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] line;\n        while (true) {\n            line = br.readLine().split(\" \");\n            if (line.length == 0) break;\n            h = Integer.parseInt(line[0]);\n            w = Integer.parseInt(line[1]);\n            s = Integer.parseInt(line[2]);\n            demand = new int[h][w];\n            for (int i = 0; i < h; i++) {\n                line = br.readLine().split(\" \");\n                for (int j = 0; j < w; j++) {\n                    demand[i][j] = Integer.parseInt(line[j]);\n                }\n            }\n            Node root = build(0, 0, demand[0][0]);\n            int maxSuppressed = 0;\n            int maxCount = 0;\n            int maxReserve = 0;\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j < w; j++) {\n                    Node node = root;\n                    while (node != null) {\n                        int suppressed = maxSuppressedDemand(node);\n                        if (suppressed <= s) {\n                            int count = countGroups(node);\n                            int reserve = reservePower(node);\n                            if (reserve > maxReserve || (reserve == maxReserve && count > maxCount)) {\n                                maxSuppressed = suppressed;\n                                maxCount = count;\n                                maxReserve = reserve;\n                            }\n                        }\n                        if (node.x < i) {\n                            node = node.left;\n                        } else {\n                            node = node.right;\n                        }\n                    }\n                }\n            }\n            System.out.println(maxCount + \" \" + maxReserve);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}