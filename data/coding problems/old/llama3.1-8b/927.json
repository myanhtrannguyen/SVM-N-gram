{
    "solution_id": "llama3.1-8b-927",
    "problem_id": "p00768",
    "language": "Python",
    "solution": "```python\nfrom collections import defaultdict\nimport sys\n\ndef calculate_consumed_time(submissions, problem_solved):\n    consumed_time = 0\n    penalty = 0\n    for submission in submissions:\n        if submission['judgment'] == 0:\n            consumed_time += submission['elapsed_time']\n        else:\n            penalty += 1\n    return consumed_time + penalty * 20\n\ndef get_ranking(submissions, teams):\n    team_info = defaultdict(lambda: {'solved': 0, 'consumed_time': 0, 'submissions': []})\n    for submission in submissions:\n        team_info[submission['team_number']]['solved'] += 1 if submission['judgment'] == 0 else 0\n        team_info[submission['team_number']]['consumed_time'] += calculate_consumed_time(submissions, submission)\n        team_info[submission['team_number']]['submissions'].append(submission)\n\n    teams.sort(key=lambda team: (-team_info[team]['solved'], -team_info[team]['consumed_time'], team))\n    ranking = []\n    prev_solved = -1\n    prev_consumed_time = -1\n    for team in teams:\n        if team_info[team]['solved'] != prev_solved or team_info[team]['consumed_time'] != prev_consumed_time:\n            if prev_solved != -1:\n                ranking.append('='.join(map(str, ranking)))\n            ranking = [str(team)]\n        else:\n            ranking.append(str(team))\n        prev_solved = team_info[team]['solved']\n        prev_consumed_time = team_info[team]['consumed_time']\n    return ','.join(ranking)\n\ndef main():\n    lines = sys.stdin.readlines()\n    i = 0\n    while i < len(lines):\n        M, T, P, R = map(int, lines[i].split())\n        i += 1\n        submissions = []\n        for _ in range(R):\n            elapsed_time, team_number, problem_number, judgment = map(int, lines[i].split())\n            i += 1\n            submissions.append({'elapsed_time': elapsed_time, 'team_number': team_number, 'problem_number': problem_number, 'judgment': judgment})\n        print(get_ranking(submissions, range(1, T + 1)))\n        if lines[i] == '0 0 0 0\\n':\n            break\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}