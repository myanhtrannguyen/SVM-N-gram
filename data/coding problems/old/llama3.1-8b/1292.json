{
    "solution_id": "llama3.1-8b-1292",
    "problem_id": "p00860",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <stdbool.h>\n\n#define MAX_W 16\n#define MAX_H 16\n#define MAX_N 3\n\n#define INF 1000000000\n\ntypedef struct {\n    int w, h, n;\n    char map[MAX_H][MAX_W + 1];\n    int dist[MAX_H][MAX_W + 1][MAX_N + 1];\n} State;\n\nint getDist(State *s, int x, int y, int z) {\n    if (s->dist[y][x][z] != -1) return s->dist[y][x][z];\n    if (s->map[y][x] == ' ') return 0;\n    if (s->map[y][x] >= 'a' && s->map[y][x] <= 'a' + s->n - 1 && s->map[y][x] != s->map[y][x] - 'a' + 'A') return INF;\n    if (s->map[y][x] >= 'A' && s->map[y][x] <= 'A' + s->n - 1 && s->map[y][x] != s->map[y][x] - 'A' + 'a') return INF;\n    int res = INF;\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            if (dx == 0 && dy == 0) continue;\n            int nx = x + dx, ny = y + dy;\n            if (nx < 0 || nx >= s->w || ny < 0 || ny >= s->h) continue;\n            if (s->map[ny][nx] == '#') continue;\n            int nz = z;\n            if (s->map[ny][nx] >= 'a' && s->map[ny][nx] <= 'a' + s->n - 1) {\n                if (s->map[ny][nx] != s->map[ny][nx] - 'a' + 'A') {\n                    nz = s->map[ny][nx] - 'a';\n                }\n            } else if (s->map[ny][nx] >= 'A' && s->map[ny][nx] <= 'A' + s->n - 1) {\n                if (s->map[ny][nx] != s->map[ny][nx] - 'A' + 'a') {\n                    nz = s->map[ny][nx] - 'A';\n                }\n            }\n            res = std::min(res, getDist(s, nx, ny, nz) + 1);\n        }\n    }\n    return s->dist[y][x][z] = res;\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--) {\n        int w, h, n;\n        scanf(\"%d %d %d\", &w, &h, &n);\n        State s;\n        s.w = w;\n        s.h = h;\n        s.n = n;\n        for (int i = 0; i < h; i++) {\n            scanf(\"%s\", s.map[i]);\n        }\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                for (int k = 0; k <= n; k++) {\n                    s.dist[i][j][k] = -1;\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                for (int k = 0; k <= n; k++) {\n                    res = std::max(res, getDist(&s, j, i, k));\n                }\n            }\n        }\n        printf(\"%d\\n\", res);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}