{
    "solution_id": "llama3.1-8b-2998",
    "problem_id": "p01652",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Glyph {\n        char c;\n        int h, w;\n        char[][] b;\n\n        Glyph(char c, int h, int w, char[][] b) {\n            this.c = c;\n            this.h = h;\n            this.w = w;\n            this.b = b;\n        }\n    }\n\n    static class Box {\n        int h, w;\n        char[][] b;\n\n        Box(int h, int w, char[][] b) {\n            this.h = h;\n            this.w = w;\n            this.b = b;\n        }\n    }\n\n    static class Term {\n        Glyph g;\n        Box b;\n        boolean flipped;\n\n        Term(Glyph g) {\n            this.g = g;\n        }\n\n        Term(Box b) {\n            this.b = b;\n        }\n    }\n\n    static class Sequence {\n        List<Term> terms;\n\n        Sequence() {\n            terms = new ArrayList<>();\n        }\n\n        void addTerm(Term term) {\n            terms.add(term);\n        }\n\n        String transliterate() {\n            StringBuilder sb = new StringBuilder();\n            for (Term term : terms) {\n                if (term.g != null) {\n                    if (term.flipped) {\n                        sb.append(getFlippedGlyph(term.g.c));\n                    } else {\n                        sb.append(getGlyph(term.g.c));\n                    }\n                } else {\n                    sb.append(getBox(term.b));\n                }\n            }\n            return sb.toString();\n        }\n    }\n\n    static String getGlyph(char c) {\n        for (Glyph g : glyphs) {\n            if (g.c == c) {\n                return String.valueOf(g.c);\n            }\n        }\n        return \"\";\n    }\n\n    static String getFlippedGlyph(char c) {\n        for (Glyph g : glyphs) {\n            if (g.c == c) {\n                return String.valueOf((char) (g.c + 32));\n            }\n        }\n        return \"\";\n    }\n\n    static String getBox(Box b) {\n        return \"[\";\n    }\n\n    static String getBox(Box b, boolean flipped) {\n        if (flipped) {\n            StringBuilder sb = new StringBuilder();\n            for (int i = b.h - 1; i >= 0; i--) {\n                for (int j = 0; j < b.w; j++) {\n                    sb.append(b.b[i][j]);\n                }\n                sb.append(\"\\n\");\n            }\n            return \"]\" + sb.toString();\n        } else {\n            return getBox(b);\n        }\n    }\n\n    static List<Glyph> glyphs = new ArrayList<>();\n    static List<Box> boxes = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] input = br.readLine().split(\" \");\n        while (!input[0].equals(\"0\") && !input[1].equals(\"0\")) {\n            int n = Integer.parseInt(input[0]);\n            int m = Integer.parseInt(input[1]);\n            glyphs.clear();\n            boxes.clear();\n            for (int i = 0; i < n; i++) {\n                input = br.readLine().split(\" \");\n                char c = input[0].charAt(0);\n                int h = Integer.parseInt(input[1]);\n                int w = Integer.parseInt(input[2]);\n                char[][] b = new char[h][w];\n                for (int j = 0; j < h; j++) {\n                    String row = br.readLine();\n                    for (int k = 0; k < w; k++) {\n                        b[j][k] = row.charAt(k);\n                    }\n                }\n                glyphs.add(new Glyph(c, h, w, b));\n            }\n            for (int i = 0; i < m; i++) {\n                input = br.readLine().split(\" \");\n                int h = Integer.parseInt(input[0]);\n                int w = Integer.parseInt(input[1]);\n                char[][] b = new char[h][w];\n                for (int j = 0; j < h; j++) {\n                    String row = br.readLine();\n                    for (int k = 0; k < w; k++) {\n                        b[j][k] = row.charAt(k);\n                    }\n                }\n                boxes.add(new Box(h, w, b));\n            }\n            for (Box b : boxes) {\n                Sequence sequence = new Sequence();\n                for (int i = 0; i < b.h; i++) {\n                    for (int j = 0; j < b.w; j++) {\n                        if (b.b[i][j] == '*') {\n                            int k = j;\n                            while (k < b.w && b.b[i][k] == '*') k++;\n                            int l = k;\n                            while (l > j && b.b[i][l] == '*') l--;\n                            int x = i;\n                            while (x < b.h && b.b[x][j] == '*') x++;\n                            int y = x;\n                            while (y > i && b.b[y][j] == '*') y--;\n                            int width = k - j;\n                            int height = x - i;\n                            if (height > 2 && width > 2) {\n                                Box subBox = new Box(height, width, new char[height][width]);\n                                for (int p = 0; p < height; p++) {\n                                    for (int q = 0; q < width; q++) {\n                                        subBox.b[p][q] = b.b[p + i][q + j];\n                                    }\n                                }\n                                sequence.addTerm(new Term(subBox));\n                            } else {\n                                boolean flipped = false;\n                                for (int p = i; p <= x; p++) {\n                                    for (int q = j; q <= k; q++) {\n                                        if (b.b[p][q] == '.') {\n                                            flipped = true;\n                                            break;\n                                        }\n                                    }\n                                    if (flipped) break;\n                                }\n                                if (flipped) {\n                                    for (int p = i; p <= x; p++) {\n                                        for (int q = j; q <= k; q++) {\n                                            b.b[p][q] = (b.b[p][q] == '*' ? '.' : '*');\n                                        }\n                                    }\n                                }\n                                for (int p = 0; p < glyphs.size(); p++) {\n                                    if (isInside(b, glyphs.get(p), j, i)) {\n                                        sequence.addTerm(new Term(glyphs.get(p)));\n                                        if (flipped) {\n                                            glyphs.get(p).flipped = true;\n                                        }\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                System.out.println(sequence.transliterate());\n            }\n            System.out.println(\"#\");\n            input = br.readLine().split(\" \");\n        }\n    }\n\n    static boolean isInside(Box b, Glyph g, int x, int y) {\n        for (int i = 0; i < g.h; i++) {\n            for (int j = 0; j < g.w; j++) {\n                if (b.b[y + i][x + j] != g.b[i][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}