{
    "solution_id": "llama3.1-8b-1159",
    "problem_id": "p00826",
    "language": "Python",
    "solution": "```python\nimport math\n\ndef orientation(p, q, r):\n    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])\n    if val == 0:\n        return 0  # Collinear\n    return 1 if val > 0 else 2  # Clockwise or counterclockwise\n\ndef on_segment(p, q, r):\n    if (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and\n        q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1])):\n        return True\n    return False\n\ndef do_intersect(p1, q1, p2, q2):\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n\n    if (o1 != o2 and o3 != o4):\n        return True\n\n    if (o1 == 0 and on_segment(p1, p2, q1)):\n        return True\n\n    if (o2 == 0 and on_segment(p1, q2, q1)):\n        return True\n\n    if (o3 == 0 and on_segment(p2, p1, q2)):\n        return True\n\n    if (o4 == 0 and on_segment(p2, q1, q2)):\n        return True\n\n    return False\n\ndef is_convex(n, points):\n    for i in range(n):\n        p1 = points[i]\n        p2 = points[(i + 1) % n]\n        for j in range(n):\n            if j == i:\n                continue\n            p3 = points[j]\n            p4 = points[(j + 1) % n]\n            if do_intersect(p1, p2, p3, p4):\n                return False\n    return True\n\ndef is_monster_trapped(n, points):\n    if n == 1:\n        return False\n    if is_convex(n, points):\n        return True\n    for i in range(n):\n        p1 = points[i]\n        p2 = points[(i + 1) % n]\n        for j in range(n):\n            if j == i:\n                continue\n            p3 = points[j]\n            p4 = points[(j + 1) % n]\n            if do_intersect(p1, p2, p3, p4):\n                return False\n    return True\n\ndef main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        points = []\n        for _ in range(n):\n            x1, y1, x2, y2 = map(int, input().split())\n            points.append((x1, y1))\n            points.append((x2, y2))\n        if is_monster_trapped(n, points):\n            print(\"yes\")\n        else:\n            print(\"no\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}