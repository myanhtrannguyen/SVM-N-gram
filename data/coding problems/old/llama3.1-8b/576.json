{
    "solution_id": "llama3.1-8b-576",
    "problem_id": "p00658",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_N 55\n#define MAX_M 55\n\ntypedef struct {\n    char type;\n    int count;\n} FragileBlock;\n\ntypedef struct {\n    char type;\n    int x, y;\n} Block;\n\ntypedef struct {\n    Block blocks[MAX_M];\n    FragileBlock fragileBlocks[MAX_M];\n    int n, m;\n} Tower;\n\ntypedef struct {\n    char type;\n    int x, y;\n} Player;\n\ntypedef struct {\n    Player player;\n    Tower tower;\n    int turn;\n    int gameOver;\n} Game;\n\nvoid initGame(Game *game) {\n    game->turn = 0;\n    game->gameOver = 0;\n}\n\nvoid initTower(Tower *tower, int n, int m) {\n    tower->n = n;\n    tower->m = m;\n    for (int i = 0; i < tower->m; i++) {\n        tower->blocks[i].type = '.';\n        tower->blocks[i].x = i;\n        tower->blocks[i].y = 0;\n    }\n    for (int i = 0; i < tower->m; i++) {\n        tower->fragileBlocks[i].type = '.';\n        tower->fragileBlocks[i].count = 0;\n    }\n}\n\nvoid readTower(Tower *tower) {\n    for (int i = tower->n - 1; i >= 0; i--) {\n        for (int j = 0; j < tower->m; j++) {\n            char c;\n            scanf(\" %c\", &c);\n            tower->blocks[j].type = c;\n            tower->blocks[j].y = i;\n        }\n    }\n}\n\nvoid readPlayer(Player *player) {\n    scanf(\" %c %d\", &player->type, &player->x);\n    player->y = tower.n - 1;\n}\n\nvoid readCommands(Game *game) {\n    int t;\n    scanf(\"%d\", &t);\n    for (int i = 0; i < t; i++) {\n        char command[20];\n        scanf(\" %s\", command);\n        if (strcmp(command, \"MOVETO\") == 0) {\n            int x;\n            scanf(\"%d\", &x);\n            game->player.x = x;\n        } else if (strcmp(command, \"PUSH RIGHT\") == 0) {\n            pushRight(game);\n        } else if (strcmp(command, \"PUSH LEFT\") == 0) {\n            pushLeft(game);\n        } else if (strcmp(command, \"PULL RIGHT\") == 0) {\n            pullRight(game);\n        } else if (strcmp(command, \"PULL LEFT\") == 0) {\n            pullLeft(game);\n        } else if (strcmp(command, \"GETDOWN RIGHT\") == 0) {\n            getDownRight(game);\n        } else if (strcmp(command, \"GETDOWN LEFT\") == 0) {\n            getDownLeft(game);\n        } else if (strcmp(command, \"CLIMB RIGHT\") == 0) {\n            climbRight(game);\n        } else if (strcmp(command, \"CLIMB LEFT\") == 0) {\n            climbLeft(game);\n        }\n        game->turn++;\n    }\n}\n\nvoid pushRight(Game *game) {\n    int i = game->player.x;\n    while (i < game->tower.m - 1 && game->tower.blocks[i + 1].type != '.' && game->tower.blocks[i + 1].type != 'C') {\n        if (game->tower.blocks[i + 1].type == 'I') {\n            int j = i + 1;\n            while (j < game->tower.m - 1 && game->tower.blocks[j + 1].type == 'I') {\n                j++;\n            }\n            for (int k = i + 1; k <= j; k++) {\n                game->tower.blocks[k].x++;\n            }\n            i = j;\n        } else {\n            game->tower.blocks[i].x++;\n            i++;\n        }\n    }\n}\n\nvoid pushLeft(Game *game) {\n    int i = game->player.x;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        if (game->tower.blocks[i - 1].type == 'I') {\n            int j = i - 1;\n            while (j > 0 && game->tower.blocks[j - 1].type == 'I') {\n                j--;\n            }\n            for (int k = i - 1; k >= j; k--) {\n                game->tower.blocks[k].x--;\n            }\n            i = j;\n        } else {\n            game->tower.blocks[i].x--;\n            i--;\n        }\n    }\n}\n\nvoid pullRight(Game *game) {\n    int i = game->player.x;\n    while (i < game->tower.m - 1 && game->tower.blocks[i + 1].type != '.' && game->tower.blocks[i + 1].type != 'C') {\n        if (game->tower.blocks[i + 1].type == 'I') {\n            int j = i + 1;\n            while (j < game->tower.m - 1 && game->tower.blocks[j + 1].type == 'I') {\n                j++;\n            }\n            for (int k = i + 1; k <= j; k++) {\n                game->tower.blocks[k].x++;\n            }\n            i = j;\n        } else {\n            game->tower.blocks[i].x++;\n            i++;\n        }\n        game->player.x++;\n    }\n}\n\nvoid pullLeft(Game *game) {\n    int i = game->player.x;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        if (game->tower.blocks[i - 1].type == 'I') {\n            int j = i - 1;\n            while (j > 0 && game->tower.blocks[j - 1].type == 'I') {\n                j--;\n            }\n            for (int k = i - 1; k >= j; k--) {\n                game->tower.blocks[k].x--;\n            }\n            i = j;\n        } else {\n            game->tower.blocks[i].x--;\n            i--;\n        }\n        game->player.x--;\n    }\n}\n\nvoid getDownRight(Game *game) {\n    int i = game->player.y;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        game->player.y--;\n    }\n    if (game->player.y > 0 && game->tower.blocks[game->player.x + 1].type != '.' && game->tower.blocks[game->player.x + 1].type != 'C') {\n        game->player.x++;\n    }\n}\n\nvoid getDownLeft(Game *game) {\n    int i = game->player.y;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        game->player.y--;\n    }\n    if (game->player.y > 0 && game->tower.blocks[game->player.x - 1].type != '.' && game->tower.blocks[game->player.x - 1].type != 'C') {\n        game->player.x--;\n    }\n}\n\nvoid climbRight(Game *game) {\n    int i = game->player.y;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        game->player.y--;\n    }\n    if (game->player.y > 0 && game->tower.blocks[game->player.x + 1].type != '.' && game->tower.blocks[game->player.x + 1].type != 'C') {\n        game->player.x++;\n        game->player.y--;\n    }\n}\n\nvoid climbLeft(Game *game) {\n    int i = game->player.y;\n    while (i > 0 && game->tower.blocks[i - 1].type != '.' && game->tower.blocks[i - 1].type != 'C') {\n        game->player.y--;\n    }\n    if (game->player.y > 0 && game->tower.blocks[game->player.x - 1].type != '.' && game->tower.blocks[game->player.x - 1].type != 'C') {\n        game->player.x--;\n        game->player.y--;\n    }\n}\n\nvoid countdownFragileBlocks(Game *game) {\n    for (int i = 0; i < game->tower.m; i++) {\n        if (game->tower.blocks[i].type == '1' || game->tower.blocks[i].type == '2' || game->tower.blocks[i].type == '3') {\n            if (game->player.x == i && game->player.y != game->tower.blocks[i].y) {\n                game->tower.fragileBlocks[i].count--;\n            }\n        }\n    }\n}\n\nvoid eraseBlocks(Game *game) {\n    for (int i = 0; i < game->tower.m; i++) {\n        if (game->player.x == i && game->player.y == game->tower.blocks[i].y && game->tower.blocks[i].type == 'B') {\n            game->tower.blocks[i].type = '.';\n        }\n    }\n}\n\nvoid fallPlayer(Game *game) {\n   ",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}