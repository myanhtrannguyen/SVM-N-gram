{
    "solution_id": "llama3.1-8b-1203",
    "problem_id": "p00837",
    "language": "Python",
    "solution": "```python\nimport sys\n\nclass Book:\n    def __init__(self, id):\n        self.id = id\n        self.access_time = 0\n\nclass Desk:\n    def __init__(self, index, capacity):\n        self.index = index\n        self.capacity = capacity\n        self.books = []\n\nclass Library:\n    def __init__(self, num_desks, desk_capacity):\n        self.num_desks = num_desks\n        self.desks = [Desk(i, desk_capacity) for i in range(num_desks)]\n        self.shelf = []\n        self.total_cost = 0\n\n    def add_book_to_shelf(self, book):\n        self.shelf.append(book)\n\n    def add_book_to_desk(self, desk, book):\n        if len(desk.books) < desk.capacity:\n            desk.books.append(book)\n        else:\n            self.remove_least_recently_used_book_from_desk(desk)\n            self.add_book_to_desk(desk, book)\n\n    def remove_least_recently_used_book_from_desk(self, desk):\n        if desk.books:\n            least_recently_used_book = min(desk.books, key=lambda book: book.access_time)\n            desk.books.remove(least_recently_used_book)\n            self.add_book_to_shelf(least_recently_used_book)\n\n    def process_request(self, book_id):\n        book = next((book for book in self.shelf + [desk.book for desk in self.desks if desk.books] if book.id == book_id), None)\n        if book:\n            self.total_cost += self.calculate_cost(book)\n            self.remove_book_from_shelf_or_desk(book)\n            self.add_book_to_desk(self.desks[0], book)\n            book.access_time = len(self.shelf) + self.num_desks\n\n    def remove_book_from_shelf_or_desk(self, book):\n        if book in self.shelf:\n            self.shelf.remove(book)\n        else:\n            for desk in self.desks:\n                if book in desk.books:\n                    desk.books.remove(book)\n                    break\n\n    def calculate_cost(self, book):\n        if book in self.shelf:\n            return self.num_desks + 1\n        else:\n            desk_index = next((i for i, desk in enumerate(self.desks) if book in desk.books), None)\n            return desk_index + 1\n\ndef main():\n    input_lines = sys.stdin.readlines()\n    input_lines = [line.strip().split() for line in input_lines]\n    input_lines = [line for line in input_lines if line != ['0', '0', '0']]\n\n    for line in input_lines:\n        num_desks, desk_capacity, num_students = map(int, line[:3])\n        library = Library(num_desks, desk_capacity)\n        requests = []\n        for i in range(1, num_students + 1):\n            num_requests = int(line[3 * i + 1])\n            requests.append([int(line[3 * i + 2 + j]) for j in range(num_requests)])\n        for i, request in enumerate(requests):\n            for book_id in request:\n                library.process_request(book_id)\n        print(library.total_cost)\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}