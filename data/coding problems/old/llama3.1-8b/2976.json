{
    "solution_id": "llama3.1-8b-2976",
    "problem_id": "p01647",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define N 52\n#define M 5\n#define RANKS 13\n#define SUITS 4\n\ntypedef struct {\n    char suit;\n    int rank;\n} Card;\n\ntypedef struct {\n    int rank;\n    int suit;\n} Hand;\n\nint compare_hands(Hand h1[], Hand h2[], int n) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (h1[i].rank > h2[i].rank) return 1;\n        if (h1[i].rank < h2[i].rank) return -1;\n    }\n    return 0;\n}\n\nint is_flush(Card c[], int n) {\n    int i;\n    for (i = 0; i < n; i++) {\n        if (c[i].suit != c[0].suit) return 0;\n    }\n    return 1;\n}\n\nint is_straight(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    for (i = 0; i < n; i++) {\n        ranks[c[i].rank] = 1;\n    }\n    int count = 0;\n    for (i = 0; i < RANKS; i++) {\n        if (ranks[i] == 1) {\n            count++;\n            if (count == 5) return 1;\n        }\n    }\n    return 0;\n}\n\nint is_straight_flush(Card c[], int n) {\n    if (!is_flush(c, n)) return 0;\n    if (!is_straight(c, n)) return 0;\n    return 1;\n}\n\nint is_four_of_a_kind(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        if (ranks[c[i].rank] == 1) {\n            count++;\n            if (count == 4) return 1;\n        } else {\n            ranks[c[i].rank] = 1;\n        }\n    }\n    return 0;\n}\n\nint is_full_house(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    int count1 = 0;\n    int count2 = 0;\n    for (i = 0; i < n; i++) {\n        if (ranks[c[i].rank] == 1) {\n            count1++;\n            if (count1 == 3) break;\n        } else if (ranks[c[i].rank] == 2) {\n            count2++;\n            if (count2 == 2) break;\n        } else {\n            ranks[c[i].rank] = 1;\n        }\n    }\n    return count1 == 3 && count2 == 2;\n}\n\nint is_three_of_a_kind(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        if (ranks[c[i].rank] == 1) {\n            count++;\n            if (count == 3) return 1;\n        } else {\n            ranks[c[i].rank] = 1;\n        }\n    }\n    return 0;\n}\n\nint is_two_pairs(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        if (ranks[c[i].rank] == 1) {\n            count++;\n            if (count == 2) break;\n        } else {\n            ranks[c[i].rank] = 1;\n        }\n    }\n    return count == 2;\n}\n\nint is_one_pair(Card c[], int n) {\n    int i;\n    int ranks[N];\n    for (i = 0; i < N; i++) {\n        ranks[i] = -1;\n    }\n    int count = 0;\n    for (i = 0; i < n; i++) {\n        if (ranks[c[i].rank] == 1) {\n            count++;\n            if (count == 2) return 1;\n        } else {\n            ranks[c[i].rank] = 1;\n        }\n    }\n    return 0;\n}\n\nint is_high_card(Card c[], int n) {\n    return 1;\n}\n\nint evaluate_hand(Card c[], int n) {\n    if (is_straight_flush(c, n)) return 9;\n    if (is_four_of_a_kind(c, n)) return 8;\n    if (is_full_house(c, n)) return 7;\n    if (is_flush(c, n)) return 6;\n    if (is_straight(c, n)) return 5;\n    if (is_three_of_a_kind(c, n)) return 4;\n    if (is_two_pairs(c, n)) return 3;\n    if (is_one_pair(c, n)) return 2;\n    return 1;\n}\n\nint main() {\n    int i, j, k;\n    int n;\n    Card c[N];\n    Hand h1[M], h2[M];\n    double prob;\n    char line[100];\n    while (fgets(line, 100, stdin) != NULL) {\n        if (line[0] == '#') break;\n        n = 0;\n        for (i = 0; i < 2; i++) {\n            sscanf(line, \"%c%c\", &c[n].suit, &c[n].rank);\n            n++;\n            line += 2;\n        }\n        line += 2;\n        for (i = 0; i < 2; i++) {\n            sscanf(line, \"%c%c\", &c[n].suit, &c[n].rank);\n            n++;\n            line += 2;\n        }\n        line += 2;\n        for (i = 0; i < 3; i++) {\n            sscanf(line, \"%c%c\", &c[n].suit, &c[n].rank);\n            n++;\n            line += 2;\n        }\n        for (i = 0; i < M; i++) {\n            h1[i].rank = -1;\n            h1[i].suit = -1;\n        }\n        for (i = 0; i < M; i++) {\n            h2[i].rank = -1;\n            h2[i].suit = -1;\n        }\n        for (i = 0; i < 2; i++) {\n            h1[i].rank = c[i].rank;\n            h1[i].suit = c[i].suit;\n        }\n        for (i = 0; i < 2; i++) {\n            h2[i].rank = c[i + 2].rank;\n            h2[i].suit = c[i + 2].suit;\n        }\n        for (i = 0; i < 3; i++) {\n            h1[i + 2].rank = c[i + 4].rank;\n            h1[i + 2].suit = c[i + 4].suit;\n        }\n        for (i = 0; i < 3; i++) {\n            h2[i + 2].rank = c[i + 7].rank;\n            h2[i + 2].suit = c[i + 7].suit;\n        }\n        int h1_rank = evaluate_hand(c, 7);\n        int h2_rank = evaluate_hand(c, 7);\n        if (h1_rank > h2_rank) {\n            prob = 1.0;\n        } else if (h1_rank < h2_rank) {\n            prob = 0.0;\n        } else {\n            for (i = 0; i < M; i++) {\n                for (j = 0; j < M; j++) {\n                    if (i != j) {\n                        h1[i].rank = c[4 + i].rank;\n                        h1[i].suit = c[4 + i].suit;\n                        h2[j].rank = c[7 + j].rank;\n                        h2[j].suit = c[7 + j].suit;\n                        int h1_rank = evaluate_hand(h1, M);\n                        int h2_rank = evaluate_hand(h2, M);\n                        if (h1_rank > h2_rank) {\n                            prob += 1.0 / (N - n);\n                        } else if (h1_rank < h2_rank) {\n                            prob -= 1.0 / (N - n);\n                        }\n                    }\n                }\n            }\n        }\n        printf(\"%.10f\\n\", prob);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}