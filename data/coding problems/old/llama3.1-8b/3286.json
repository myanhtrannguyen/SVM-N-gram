{
    "solution_id": "llama3.1-8b-3286",
    "problem_id": "p01825",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.PriorityQueue;\nimport java.util.StringTokenizer;\n\npublic class Main {\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Edge implements Comparable<Edge> {\n        Point p;\n        double dist;\n\n        public Edge(Point p, double dist) {\n            this.p = p;\n            this.dist = dist;\n        }\n\n        @Override\n        public int compareTo(Edge o) {\n            return Double.compare(this.dist, o.dist);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        StringTokenizer st;\n\n        int n = Integer.parseInt(br.readLine());\n        Point[] points = new Point[n + 1];\n        int[] sx = new int[n + 1];\n        int[] sy = new int[n + 1];\n        int[] tx = new int[n + 1];\n        int[] ty = new int[n + 1];\n        boolean[] visited = new boolean[n + 1];\n        double[] dist = new double[n + 1];\n        Arrays.fill(dist, 1e9);\n        ArrayList<Edge>[] graph = new ArrayList[n + 1];\n        for (int i = 0; i <= n; i++) {\n            graph[i] = new ArrayList<>();\n        }\n\n        st = new StringTokenizer(br.readLine());\n        points[0] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n\n        for (int i = 1; i <= n; i++) {\n            st = new StringTokenizer(br.readLine());\n            sx[i] = Integer.parseInt(st.nextToken());\n            sy[i] = Integer.parseInt(st.nextToken());\n            tx[i] = Integer.parseInt(st.nextToken());\n            ty[i] = Integer.parseInt(st.nextToken());\n            points[i] = new Point(sx[i], sy[i]);\n        }\n\n        for (int i = 1; i <= n; i++) {\n            double dx = tx[i] - sx[i];\n            double dy = ty[i] - sy[i];\n            double len = Math.sqrt(dx * dx + dy * dy);\n            dx /= len;\n            dy /= len;\n            double x = sx[i] + dx;\n            double y = sy[i] + dy;\n            while (x != tx[i] || y != ty[i]) {\n                graph[i].add(new Edge(new Point(x, y), Math.sqrt((x - sx[i]) * (x - sx[i]) + (y - sy[i]) * (y - sy[i]))));\n                x += dx;\n                y += dy;\n            }\n            graph[i].add(new Edge(points[0], Math.sqrt((x - sx[i]) * (x - sx[i]) + (y - sy[i]) * (y - sy[i]))));\n        }\n\n        PriorityQueue<Edge> pq = new PriorityQueue<>();\n        pq.add(new Edge(points[0], 0));\n        dist[0] = 0;\n\n        while (!pq.isEmpty()) {\n            Edge e = pq.poll();\n            if (visited[e.p.x]) continue;\n            visited[e.p.x] = true;\n            for (Edge edge : graph[e.p.x]) {\n                if (dist[edge.p.x] > dist[e.p.x] + edge.dist) {\n                    dist[edge.p.x] = dist[e.p.x] + edge.dist;\n                    pq.add(new Edge(edge.p, dist[edge.p.x]));\n                }\n            }\n        }\n\n        double ans = 0;\n        for (int i = 1; i <= n; i++) {\n            ans += dist[i];\n        }\n        ans += Math.sqrt((points[0].x - sx[1]) * (points[0].x - sx[1]) + (points[0].y - sy[1]) * (points[0].y - sy[1]));\n        pw.printf(\"%.12f\\n\", ans);\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}