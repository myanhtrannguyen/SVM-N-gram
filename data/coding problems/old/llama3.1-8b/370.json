{
    "solution_id": "llama3.1-8b-370",
    "problem_id": "p00563",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class SegmentTree {\n        int n;\n        int[] tree;\n        int[] lazy;\n\n        public SegmentTree(int n) {\n            this.n = n;\n            tree = new int[4 * n];\n            lazy = new int[4 * n];\n        }\n\n        void push(int v, int l, int r) {\n            if (lazy[v] != 0) {\n                tree[v] = lazy[v] * (r - l + 1);\n                if (l != r) {\n                    lazy[2 * v] = lazy[v];\n                    lazy[2 * v + 1] = lazy[v];\n                }\n                lazy[v] = 0;\n            }\n        }\n\n        void update(int v, int l, int r, int a, int b, int val) {\n            push(v, l, r);\n            if (a > r || b < l) return;\n            if (a <= l && r <= b) {\n                lazy[v] = val;\n                push(v, l, r);\n                return;\n            }\n            int m = (l + r) / 2;\n            update(2 * v, l, m, a, b, val);\n            update(2 * v + 1, m + 1, r, a, b, val);\n            tree[v] = Math.min(tree[2 * v], tree[2 * v + 1]);\n        }\n\n        int query(int v, int l, int r, int a, int b) {\n            push(v, l, r);\n            if (a > r || b < l) return Integer.MAX_VALUE;\n            if (a <= l && r <= b) return tree[v];\n            int m = (l + r) / 2;\n            return Math.min(query(2 * v, l, m, a, b), query(2 * v + 1, m + 1, r, a, b));\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        int[] c = new int[n];\n        st = new StringTokenizer(br.readLine());\n        for (int i = 0; i < n; i++) {\n            c[i] = Integer.parseInt(st.nextToken());\n        }\n        int[] cnt = new int[m + 1];\n        for (int i = 0; i < n; i++) {\n            cnt[c[i]]++;\n        }\n        int[] sum = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            sum[i] = sum[i - 1] + cnt[i];\n        }\n        int[] ans = new int[m + 1];\n        SegmentTree tree = new SegmentTree(n);\n        for (int i = 0; i < n; i++) {\n            int l = 1, r = i, mid;\n            while (l <= r) {\n                mid = (l + r) / 2;\n                if (sum[i] - sum[mid - 1] >= (n - i) / 2) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            int j = l - 1;\n            if (j > 0) {\n                tree.update(1, 1, n, 1, j - 1, c[i]);\n            }\n            if (j < i) {\n                tree.update(1, 1, n, j + 1, i - 1, c[i]);\n            }\n            if (j == 0) {\n                ans[c[i]] = Math.min(ans[c[i]], tree.query(1, 1, n, 1, i - 1));\n            } else if (j == i) {\n                ans[c[i]] = Math.min(ans[c[i]], tree.query(1, 1, n, 1, i - 1) + cnt[c[i]]);\n            } else {\n                ans[c[i]] = Math.min(ans[c[i]], tree.query(1, 1, n, 1, j - 1) + tree.query(1, 1, n, j, i - 1));\n            }\n        }\n        for (int i = 1; i <= m; i++) {\n            System.out.println(ans[i]);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}