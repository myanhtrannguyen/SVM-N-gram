{
    "solution_id": "llama3.1-8b-2959",
    "problem_id": "p01597",
    "language": "Python",
    "solution": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __hash__(self):\n        return hash((self.x, self.y))\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n\nclass Segment:\n    def __init__(self, p1, p2):\n        self.p1 = p1\n        self.p2 = p2\n\n    def __hash__(self):\n        return hash((self.p1, self.p2))\n\n    def __eq__(self, other):\n        return self.p1 == other.p1 and self.p2 == other.p2\n\ndef orientation(p, q, r):\n    val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)\n    if val == 0:\n        return 0\n    return 1 if val > 0 else -1\n\ndef on_segment(p, q, r):\n    if (q.x <= max(p.x, r.x) and q.x >= min(p.x, r.x) and\n        q.y <= max(p.y, r.y) and q.y >= min(p.y, r.y)):\n        return True\n    return False\n\ndef intersect(p1, q1, p2, q2):\n    o1 = orientation(p1, q1, p2)\n    o2 = orientation(p1, q1, q2)\n    o3 = orientation(p2, q2, p1)\n    o4 = orientation(p2, q2, q1)\n\n    if (o1 != o2 and on_segment(p1, p2, q1)):\n        return True\n    if (o3 != o4 and on_segment(p2, p1, q2)):\n        return True\n\n    return False\n\ndef convex_hull(points):\n    n = len(points)\n    if n < 3:\n        return points\n\n    hull = []\n    l = 0\n    for i in range(1, n):\n        if points[i].x < points[l].x:\n            l = i\n\n    p = l\n    while True:\n        hull.append(points[p])\n        q = (p + 1) % n\n        for i in range(n):\n            if intersect(points[p], points[(p + 1) % n], points[i], points[q]):\n                q = i\n        p = q\n        if p == l:\n            break\n\n    return hull\n\ndef count_points(obstacles):\n    points = set()\n    for i in range(len(obstacles)):\n        for j in range(i + 1, len(obstacles)):\n            p1 = obstacles[i].p1\n            p2 = obstacles[i].p2\n            q1 = obstacles[j].p1\n            q2 = obstacles[j].p2\n            if intersect(p1, p2, q1, q2):\n                points.add(p1)\n                points.add(p2)\n                points.add(q1)\n                points.add(q2)\n\n    hull = convex_hull(list(points))\n    return len(hull)\n\ndef main():\n    n = int(input())\n    obstacles = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(int, input().split())\n        p1 = Point(x1, y1)\n        p2 = Point(x2, y2)\n        obstacles.append(Segment(p1, p2))\n\n    print(count_points(obstacles))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}