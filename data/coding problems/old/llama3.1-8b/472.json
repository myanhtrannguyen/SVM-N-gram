{
    "solution_id": "llama3.1-8b-472",
    "problem_id": "p00611",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_H 10\n#define MAX_W 10\n#define MAX_C 8\n\ntypedef struct {\n    int h, w;\n    char map[MAX_H][MAX_W];\n    int sources[MAX_C];\n    int cities;\n    int obstacles;\n} Map;\n\ntypedef struct {\n    int h, w;\n    int cost;\n} Result;\n\nint is_valid(Map *map, int h, int w) {\n    return (h >= 0 && h < map->h && w >= 0 && w < map->w && map->map[h][w] != '#');\n}\n\nint bfs(Map *map, int h, int w) {\n    int queue[MAX_H * MAX_W];\n    int front = 0, rear = 0;\n    int visited[MAX_H][MAX_W];\n    int cost = 0;\n\n    queue[rear++] = h * MAX_W + w;\n    visited[h][w] = 1;\n\n    while (front < rear) {\n        int x = (queue[front] / MAX_W);\n        int y = (queue[front] % MAX_W);\n        front++;\n\n        if (map->map[x][y] == '*') {\n            cost++;\n        }\n\n        for (int i = -1; i <= 1; i++) {\n            for (int j = -1; j <= 1; j++) {\n                if (i == 0 && j == 0) {\n                    continue;\n                }\n\n                int nx = x + i;\n                int ny = y + j;\n\n                if (is_valid(map, nx, ny) && !visited[nx][ny]) {\n                    queue[rear++] = nx * MAX_W + ny;\n                    visited[nx][ny] = 1;\n                }\n            }\n        }\n    }\n\n    return cost;\n}\n\nint main() {\n    int h, w, sources, cities, obstacles;\n    Map map;\n    Result result;\n\n    while (scanf(\"%d %d\", &h, &w) == 2) {\n        if (h == 0 && w == 0) {\n            break;\n        }\n\n        map.h = h;\n        map.w = w;\n        map.cities = 0;\n        map.obstacles = 0;\n\n        for (int i = 0; i < h; i++) {\n            scanf(\"%s\", map.map[i]);\n            for (int j = 0; j < w; j++) {\n                if (map.map[i][j] == '*') {\n                    map.cities++;\n                } else if (map.map[i][j] == '#') {\n                    map.obstacles++;\n                }\n            }\n        }\n\n        sources = 0;\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (map.map[i][j] == 'P') {\n                    map.sources[sources++] = i * MAX_W + j;\n                }\n            }\n        }\n\n        result.cost = MAX_H * MAX_W;\n\n        for (int i = 0; i < sources; i++) {\n            int cost = bfs(&map, map.sources[i] / MAX_W, map.sources[i] % MAX_W);\n            result.cost = (result.cost < cost) ? result.cost : cost;\n        }\n\n        printf(\"%d\\n\", result.cost);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}