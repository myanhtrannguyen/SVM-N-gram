{
    "solution_id": "llama3.1-8b-3686",
    "problem_id": "p02242",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class Graph {\n        int V;\n        List<List<Edge>> adj;\n\n        public Graph(int V) {\n            this.V = V;\n            this.adj = new ArrayList<>();\n            for (int i = 0; i < V; i++) {\n                this.adj.add(new ArrayList<>());\n            }\n        }\n\n        public void addEdge(int u, int v, int w) {\n            this.adj.get(u).add(new Edge(v, w));\n        }\n    }\n\n    static class Edge {\n        int v;\n        int w;\n\n        public Edge(int v, int w) {\n            this.v = v;\n            this.w = w;\n        }\n    }\n\n    static class Dijkstra {\n        Graph graph;\n        int[] dist;\n\n        public Dijkstra(Graph graph) {\n            this.graph = graph;\n            this.dist = new int[graph.V];\n            Arrays.fill(this.dist, Integer.MAX_VALUE);\n            this.dist[0] = 0;\n        }\n\n        public void run() {\n            PriorityQueue<Node> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.dist));\n            pq.add(new Node(0, 0));\n            while (!pq.isEmpty()) {\n                Node node = pq.poll();\n                for (Edge edge : graph.adj.get(node.v)) {\n                    if (dist[node.v] + edge.w < dist[edge.v]) {\n                        dist[edge.v] = dist[node.v] + edge.w;\n                        pq.add(new Node(edge.v, dist[edge.v]));\n                    }\n                }\n            }\n        }\n    }\n\n    static class Node {\n        int v;\n        int dist;\n\n        public Node(int v, int dist) {\n            this.v = v;\n            this.dist = dist;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Graph graph = new Graph(n);\n        for (int i = 0; i < n; i++) {\n            int u = scanner.nextInt();\n            int k = scanner.nextInt();\n            for (int j = 0; j < k; j++) {\n                int v = scanner.nextInt();\n                int w = scanner.nextInt();\n                graph.addEdge(u, v, w);\n            }\n        }\n        Dijkstra dijkstra = new Dijkstra(graph);\n        dijkstra.run();\n        for (int i = 0; i < n; i++) {\n            System.out.println(i + \" \" + dijkstra.dist[i]);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}