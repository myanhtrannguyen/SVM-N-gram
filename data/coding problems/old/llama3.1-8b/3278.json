{
    "solution_id": "llama3.1-8b-3278",
    "problem_id": "p01823",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, cost, weight;\n        Edge(int to, int cost, int weight) {\n            this.to = to;\n            this.cost = cost;\n            this.weight = weight;\n        }\n    }\n\n    static class Pair implements Comparable<Pair> {\n        double value;\n        int cost;\n        Pair(double value, int cost) {\n            this.value = value;\n            this.cost = cost;\n        }\n        public int compareTo(Pair other) {\n            return Double.compare(other.value, this.value);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        int p = Integer.parseInt(st.nextToken());\n        List<Edge>[] graph = new List[n + 1];\n        for (int i = 0; i <= n; i++) {\n            graph[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < m; i++) {\n            st = new StringTokenizer(br.readLine());\n            int s = Integer.parseInt(st.nextToken());\n            int t = Integer.parseInt(st.nextToken());\n            int d = Integer.parseInt(st.nextToken());\n            int v = Integer.parseInt(st.nextToken());\n            graph[s].add(new Edge(t, 1, v * 1.0 / d));\n            graph[t].add(new Edge(s, 1, v * 1.0 / d));\n        }\n        double[] dp = new double[n + 1];\n        Arrays.fill(dp, -1e9);\n        dp[1] = 0;\n        PriorityQueue<Pair> pq = new PriorityQueue<>();\n        pq.add(new Pair(0, 0));\n        while (!pq.isEmpty()) {\n            Pair pair = pq.poll();\n            double value = pair.value;\n            int cost = pair.cost;\n            if (cost > p) continue;\n            for (Edge edge : graph[cost + 1]) {\n                if (dp[edge.to] < value + edge.weight * (p - cost)) {\n                    dp[edge.to] = value + edge.weight * (p - cost);\n                    pq.add(new Pair(dp[edge.to], edge.to));\n                }\n            }\n        }\n        pw.printf(\"%.10f\\n\", dp[1]);\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}