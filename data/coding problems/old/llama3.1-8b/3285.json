{
    "solution_id": "llama3.1-8b-3285",
    "problem_id": "p01825",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Point {\n    double x, y;\n};\n\nstruct Edge {\n    int u, v;\n    double dist;\n};\n\nstruct CompareEdges {\n    bool operator()(const Edge& a, const Edge& b) {\n        return a.dist > b.dist;\n    }\n};\n\ndouble dist(const Point& a, const Point& b) {\n    return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));\n}\n\nint main() {\n    int n;\n    cin >> n;\n\n    Point start;\n    cin >> start.x >> start.y;\n\n    vector<Point> points(n);\n    for (int i = 0; i < n; i++) {\n        cin >> points[i].x >> points[i].y;\n    }\n\n    vector<Edge> edges(n);\n    for (int i = 0; i < n; i++) {\n        cin >> edges[i].u >> edges[i].v >> edges[i].x >> edges[i].y;\n        edges[i].dist = dist(points[edges[i].u], points[edges[i].v]);\n    }\n\n    vector<int> parent(n);\n    for (int i = 0; i < n; i++) {\n        parent[i] = i;\n    }\n\n    function<int(int)> find = [&](int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    };\n\n    function<void(int, int)> union_ = [&](int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        if (rootX != rootY) {\n            parent[rootX] = rootY;\n        }\n    };\n\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (edges[i].u == edges[j].u || edges[i].u == edges[j].v || edges[i].v == edges[j].u || edges[i].v == edges[j].v) {\n                union_(i, j);\n            }\n        }\n    }\n\n    vector<Edge> edges2;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (find(i) == find(j)) {\n                edges2.push_back({i, j, dist(points[i], points[j])});\n            }\n        }\n    }\n\n    priority_queue<Edge, vector<Edge>, CompareEdges> pq;\n    for (int i = 0; i < n; i++) {\n        pq.push({i, -1, 0});\n    }\n\n    vector<double> dists(n, 1e9);\n    dists[0] = 0;\n\n    while (!pq.empty()) {\n        Edge edge = pq.top();\n        pq.pop();\n\n        if (edge.dist > dists[edge.u]) {\n            continue;\n        }\n\n        for (int i = 0; i < edges2.size(); i++) {\n            Edge e = edges2[i];\n            if (e.u == edge.u && e.v == edge.v) {\n                continue;\n            }\n\n            double newDist = dists[edge.u] + e.dist;\n            if (newDist < dists[e.v]) {\n                dists[e.v] = newDist;\n                pq.push({e.v, edge.v, newDist});\n            }\n        }\n    }\n\n    double ans = 0;\n    for (int i = 0; i < n; i++) {\n        ans += dists[i];\n    }\n\n    ans += dist(start, points[find(0)]);\n    cout << fixed << setprecision(10) << ans << endl;\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}