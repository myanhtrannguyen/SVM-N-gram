{
    "solution_id": "llama3.1-8b-3442",
    "problem_id": "p01959",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static int N, M, S, T;\n    static int[] d;\n    static List<Edge>[] adj;\n\n    static class Edge {\n        int to, c;\n\n        Edge(int to, int c) {\n            this.to = to;\n            this.c = c;\n        }\n    }\n\n    static class DSU {\n        int[] p, sz;\n\n        DSU(int n) {\n            p = new int[n];\n            sz = new int[n];\n            for (int i = 0; i < n; i++) {\n                p[i] = i;\n                sz[i] = 1;\n            }\n        }\n\n        int find(int x) {\n            if (p[x] != x) p[x] = find(p[x]);\n            return p[x];\n        }\n\n        boolean union(int x, int y) {\n            x = find(x);\n            y = find(y);\n            if (x == y) return false;\n            if (sz[x] < sz[y]) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            p[y] = x;\n            sz[x] += sz[y];\n            return true;\n        }\n    }\n\n    static class LCA {\n        int[][] up;\n        int[] dep;\n\n        LCA(int n) {\n            up = new int[n][20];\n            dep = new int[n];\n        }\n\n        void dfs(int u, int p, List<Edge>[] adj) {\n            dep[u] = dep[p] + 1;\n            up[u][0] = p;\n            for (int i = 1; i < 20; i++) {\n                up[u][i] = up[up[u][i - 1]][i - 1];\n            }\n            for (Edge e : adj[u]) {\n                if (e.to != p) {\n                    dfs(e.to, u, adj);\n                }\n            }\n        }\n\n        int lca(int u, int v) {\n            if (dep[u] < dep[v]) {\n                int temp = u;\n                u = v;\n                v = temp;\n            }\n            for (int i = 19; i >= 0; i--) {\n                if (dep[u] - (1 << i) >= dep[v]) {\n                    u = up[u][i];\n                }\n            }\n            if (u == v) return u;\n            for (int i = 19; i >= 0; i--) {\n                if (up[u][i] != up[v][i]) {\n                    u = up[u][i];\n                    v = up[v][i];\n                }\n            }\n            return up[u][0];\n        }\n    }\n\n    static class Dijkstra {\n        void dijkstra(int s, int t, int[] d) {\n            PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n            pq.offer(new int[]{0, s});\n            while (!pq.isEmpty()) {\n                int[] cur = pq.poll();\n                int dis = cur[0], u = cur[1];\n                if (d[u] <= dis) continue;\n                d[u] = dis;\n                for (Edge e : adj[u]) {\n                    if (e.c > 0) {\n                        pq.offer(new int[]{dis + e.c, e.to});\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        N = Integer.parseInt(st.nextToken());\n        M = Integer.parseInt(st.nextToken());\n        S = Integer.parseInt(st.nextToken());\n        T = Integer.parseInt(st.nextToken());\n        adj = new List[N + 1];\n        for (int i = 1; i <= N; i++) {\n            adj[i] = new ArrayList<>();\n        }\n        for (int i = 1; i <= M; i++) {\n            st = new StringTokenizer(br.readLine());\n            int u = Integer.parseInt(st.nextToken());\n            int v = Integer.parseInt(st.nextToken());\n            int c = Integer.parseInt(st.nextToken());\n            adj[u].add(new Edge(v, c));\n            adj[v].add(new Edge(u, c));\n        }\n        DSU dsu = new DSU(N + 1);\n        for (int i = 1; i <= N; i++) {\n            for (Edge e : adj[i]) {\n                if (e.to != S && e.to != T) {\n                    dsu.union(i, e.to);\n                }\n            }\n        }\n        int[] p = new int[N + 1];\n        int[] sz = new int[N + 1];\n        for (int i = 1; i <= N; i++) {\n            p[i] = dsu.find(i);\n            sz[p[i]]++;\n        }\n        LCA lca = new LCA(N + 1);\n        lca.dfs(S, 0, adj);\n        int[] d = new int[N + 1];\n        Arrays.fill(d, Integer.MAX_VALUE);\n        d[S] = 0;\n        Dijkstra dijkstra = new Dijkstra();\n        dijkstra.dijkstra(S, T, d);\n        int[] d2 = new int[N + 1];\n        Arrays.fill(d2, Integer.MAX_VALUE);\n        for (int i = 1; i <= N; i++) {\n            if (d[i] != Integer.MAX_VALUE) {\n                d2[p[i]] = Math.min(d2[p[i]], d[i]);\n            }\n        }\n        int[] d3 = new int[N + 1];\n        Arrays.fill(d3, Integer.MAX_VALUE);\n        for (int i = 1; i <= N; i++) {\n            if (d2[i] != Integer.MAX_VALUE) {\n                d3[i] = d2[i];\n                for (Edge e : adj[i]) {\n                    if (e.to != S && e.to != T) {\n                        d3[i] = Math.min(d3[i], d2[e.to] + e.c);\n                    }\n                }\n            }\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 1; i <= N; i++) {\n            if (d3[i] != Integer.MAX_VALUE) {\n                ans = Math.min(ans, d3[i] + lca.dep[i] - lca.dep[S]);\n            }\n        }\n        if (ans == Integer.MAX_VALUE) {\n            System.out.println(\"-1\");\n        } else {\n            System.out.println(ans);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}