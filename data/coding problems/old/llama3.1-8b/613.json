{
    "solution_id": "llama3.1-8b-613",
    "problem_id": "p00690",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Station {\n    int name;\n    vector<Station*> neighbors;\n};\n\nvoid dfs(Station* station, vector<Station*>& path, vector<Station*>& visited, int& maxDistance, vector<int>& maxPath) {\n    visited.push_back(station);\n    path.push_back(station);\n    if (station->neighbors.size() == 0) {\n        int distance = 0;\n        for (int i = path.size() - 1; i >= 0; i--) {\n            distance += station->neighbors[i]->distance;\n        }\n        if (distance > maxDistance) {\n            maxDistance = distance;\n            maxPath = vector<int>(path.begin(), path.end());\n        }\n    } else {\n        for (Station* neighbor : station->neighbors) {\n            if (find(visited.begin(), visited.end(), neighbor) == visited.end()) {\n                dfs(neighbor, path, visited, maxDistance, maxPath);\n            }\n        }\n    }\n    path.pop_back();\n    visited.pop_back();\n}\n\nint main() {\n    int numSystems;\n    cin >> numSystems;\n    for (int system = 0; system < numSystems; system++) {\n        int numStations, numRoutes;\n        cin >> numStations >> numRoutes;\n        vector<Station*> stations(numStations);\n        for (int i = 0; i < numStations; i++) {\n            stations[i] = new Station();\n            stations[i]->name = i + 1;\n        }\n        for (int i = 0; i < numRoutes; i++) {\n            int station1, station2;\n            cin >> station1 >> station2;\n            int distance;\n            cin >> distance;\n            stations[station1 - 1]->neighbors.push_back(stations[station2 - 1]);\n            stations[station2 - 1]->neighbors.push_back(stations[station1 - 1]);\n            stations[station1 - 1]->distance = distance;\n            stations[station2 - 1]->distance = distance;\n        }\n        int maxDistance = 0;\n        vector<int> maxPath;\n        for (Station* station : stations) {\n            vector<Station*> visited;\n            vector<Station*> path;\n            dfs(station, path, visited, maxDistance, maxPath);\n        }\n        cout << maxDistance << endl;\n        for (int i = 0; i < maxPath.size(); i++) {\n            cout << maxPath[i] << \" \";\n        }\n        cout << endl;\n        for (Station* station : stations) {\n            station->neighbors.clear();\n            delete station;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}