{
    "solution_id": "llama3.1-8b-1286",
    "problem_id": "p00858",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Point point = (Point) o;\n            return x == point.x && y == point.y;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n\n    static class Line {\n        Point p1, p2;\n\n        public Line(Point p1, Point p2) {\n            this.p1 = p1;\n            this.p2 = p2;\n        }\n    }\n\n    static class Graph {\n        Map<Point, List<Point>> graph;\n\n        public Graph() {\n            graph = new HashMap<>();\n        }\n\n        public void addEdge(Point p1, Point p2) {\n            graph.computeIfAbsent(p1, k -> new ArrayList<>()).add(p2);\n            graph.computeIfAbsent(p2, k -> new ArrayList<>()).add(p1);\n        }\n    }\n\n    static class Dijkstra {\n        Map<Point, Integer> distance;\n        Map<Point, Point> previous;\n        PriorityQueue<Point> queue;\n\n        public Dijkstra() {\n            distance = new HashMap<>();\n            previous = new HashMap<>();\n            queue = new PriorityQueue<>((p1, p2) -> Integer.compare(distance.get(p1), distance.get(p2)));\n        }\n\n        public void run(Graph graph, Point start, Point end) {\n            distance.put(start, 0);\n            queue.add(start);\n\n            while (!queue.isEmpty()) {\n                Point current = queue.poll();\n\n                if (current.equals(end)) {\n                    List<Point> path = new ArrayList<>();\n                    while (current != null) {\n                        path.add(current);\n                        current = previous.get(current);\n                    }\n                    Collections.reverse(path);\n                    for (Point p : path) {\n                        System.out.println(p.x + \" \" + p.y);\n                    }\n                    System.out.println(\"0\");\n                    return;\n                }\n\n                for (Point neighbor : graph.graph.getOrDefault(current, Collections.emptyList())) {\n                    int newDistance = distance.get(current) + (int) Math.sqrt(Math.pow(neighbor.x - current.x, 2) + Math.pow(neighbor.y - current.y, 2));\n\n                    if (!distance.containsKey(neighbor) || newDistance < distance.get(neighbor)) {\n                        distance.put(neighbor, newDistance);\n                        previous.put(neighbor, current);\n                        queue.add(neighbor);\n                    }\n                }\n            }\n\n            System.out.println(\"-1\");\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int t = Integer.parseInt(br.readLine());\n\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            Point start = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n            st = new StringTokenizer(br.readLine());\n            Point end = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n\n            Graph graph = new Graph();\n\n            for (int i = 0; i < n; i++) {\n                st = new StringTokenizer(br.readLine());\n                Point p1 = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n                Point p2 = new Point(Integer.parseInt(st.nextToken()), Integer.parseInt(st.nextToken()));\n\n                graph.addEdge(p1, p2);\n            }\n\n            Dijkstra dijkstra = new Dijkstra();\n            dijkstra.run(graph, start, end);\n        }\n\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}