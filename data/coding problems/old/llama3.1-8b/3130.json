{
    "solution_id": "llama3.1-8b-3130",
    "problem_id": "p01710",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, cap, flow, cost;\n        Edge rev;\n\n        public Edge(int to, int cap, int flow, int cost, Edge rev) {\n            this.to = to;\n            this.cap = cap;\n            this.flow = flow;\n            this.cost = cost;\n            this.rev = rev;\n        }\n    }\n\n    static class MCMF {\n        List<Edge>[] edges;\n        int[] dist, preV, preE;\n        int s, t, n;\n        long[] minCost;\n\n        public MCMF(int n) {\n            this.n = n;\n            edges = new List[n];\n            for (int i = 0; i < n; i++) {\n                edges[i] = new ArrayList<>();\n            }\n            dist = new int[n];\n            preV = new int[n];\n            preE = new int[n];\n            minCost = new long[n];\n        }\n\n        public void addEdge(int u, int v, int cap, int cost) {\n            Edge e = new Edge(v, cap, 0, cost, null);\n            Edge re = new Edge(u, 0, 0, -cost, null);\n            e.rev = re;\n            re.rev = e;\n            edges[u].add(e);\n            edges[v].add(re);\n        }\n\n        public boolean spfa() {\n            Arrays.fill(dist, Integer.MAX_VALUE);\n            dist[s] = 0;\n            Queue<Integer> q = new LinkedList<>();\n            q.add(s);\n            while (!q.isEmpty()) {\n                int u = q.poll();\n                for (Edge e : edges[u]) {\n                    if (e.cap - e.flow > 0 && dist[e.to] > dist[u] + e.cost) {\n                        dist[e.to] = dist[u] + e.cost;\n                        preV[e.to] = u;\n                        preE[e.to] = e;\n                        q.add(e.to);\n                    }\n                }\n            }\n            return dist[t] != Integer.MAX_VALUE;\n        }\n\n        public long[] getMinCostMaxFlow(int s, int t) {\n            this.s = s;\n            this.t = t;\n            long flow = 0;\n            long cost = 0;\n            while (spfa()) {\n                for (int i = 0; i < n; i++) {\n                    minCost[i] = Integer.MAX_VALUE;\n                }\n                minCost[s] = 0;\n                Queue<Integer> q = new LinkedList<>();\n                q.add(s);\n                while (!q.isEmpty()) {\n                    int u = q.poll();\n                    for (Edge e : edges[u]) {\n                        if (e.cap - e.flow > 0 && dist[e.to] == dist[u] + e.cost) {\n                            int newCost = minCost[u] + e.cost;\n                            if (newCost < minCost[e.to]) {\n                                minCost[e.to] = newCost;\n                                q.add(e.to);\n                            }\n                        }\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    if (dist[i] == Integer.MAX_VALUE) continue;\n                    int u = i;\n                    int v = t;\n                    while (u != v) {\n                        Edge e = preE[u];\n                        int newFlow = e.cap - e.flow;\n                        int newCost = minCost[u] - (preV[u] == s ? 0 : minCost[preV[u]]);\n                        if (newFlow > 0 && newCost <= minCost[v]) {\n                            minCost[v] = newCost;\n                            preV[v] = u;\n                            preE[v] = e;\n                            u = preV[u];\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                for (int i = 0; i < n; i++) {\n                    if (dist[i] == Integer.MAX_VALUE) continue;\n                    int u = t;\n                    int v = i;\n                    while (u != v) {\n                        Edge e = preE[u];\n                        e.flow += (e.cap - e.flow);\n                        e.rev.flow -= (e.cap - e.flow);\n                        u = preE[u];\n                    }\n                }\n                flow += (preE[t].cap - preE[t].flow);\n                cost += (minCost[t] * flow);\n            }\n            return new long[]{flow, cost};\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = 1;\n        while (T-- > 0) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int m = Integer.parseInt(st.nextToken());\n            int t = Integer.parseInt(st.nextToken());\n            int[][] p = new int[n][3];\n            for (int i = 0; i < n; i++) {\n                st = new StringTokenizer(br.readLine());\n                p[i][0] = Integer.parseInt(st.nextToken());\n                p[i][1] = Integer.parseInt(st.nextToken());\n                p[i][2] = Integer.parseInt(st.nextToken());\n            }\n            int[][] a = new int[m][2];\n            for (int i = 0; i < m; i++) {\n                st = new StringTokenizer(br.readLine());\n                a[i][0] = Integer.parseInt(st.nextToken()) - 1;\n                a[i][1] = Integer.parseInt(st.nextToken()) - 1;\n            }\n            MCMF mcmf = new MCMF(n + 2);\n            for (int i = 0; i < n; i++) {\n                mcmf.addEdge(0, i + 1, p[i][2], 0);\n            }\n            for (int i = 0; i < n; i++) {\n                mcmf.addEdge(i + 1, n + 1, 1, p[i][1]);\n            }\n            for (int i = 0; i < m; i++) {\n                mcmf.addEdge(a[i][0] + 1, a[i][1] + 1, 1, 0);\n            }\n            long[] res = mcmf.getMinCostMaxFlow(0, n + 1);\n            long ans = 0;\n            for (int i = 0; i < n; i++) {\n                ans += (res[0] * p[i][0]);\n            }\n            pw.println(ans);\n        }\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}