{
    "solution_id": "llama3.1-8b-3070",
    "problem_id": "p01681",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static double cross(Point a, Point b) {\n        return a.x * b.y - a.y * b.x;\n    }\n\n    static double dot(Point a, Point b) {\n        return a.x * b.x + a.y * b.y;\n    }\n\n    static double dist(Point a, Point b) {\n        return Math.sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n    }\n\n    static double angle(Point a, Point b) {\n        return Math.atan2(b.y - a.y, b.x - a.x);\n    }\n\n    static double[] convexHull(Point[] points) {\n        int n = points.length;\n        if (n < 3) {\n            return new double[0];\n        }\n\n        Arrays.sort(points, (a, b) -> Double.compare(a.x, b.x));\n        List<Point> hull = new ArrayList<>();\n        hull.add(points[0]);\n        hull.add(points[1]);\n\n        for (int i = 2; i < n; i++) {\n            while (hull.size() > 1) {\n                Point p1 = hull.get(hull.size() - 2);\n                Point p2 = hull.get(hull.size() - 1);\n                if (cross(p1, p2) * cross(p1, points[i]) >= 0) {\n                    hull.remove(hull.size() - 1);\n                } else {\n                    break;\n                }\n            }\n            hull.add(points[i]);\n        }\n\n        double[] result = new double[hull.size()];\n        for (int i = 0; i < hull.size(); i++) {\n            result[i] = angle(hull.get(0), hull.get((i + 1) % hull.size()));\n        }\n        return result;\n    }\n\n    static long countOrders(Point[] points, Point start) {\n        double[] angles = convexHull(points);\n        Arrays.sort(angles);\n        int n = angles.length;\n        long[] dp = new long[n + 1];\n        dp[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            double angle = angles[i - 1];\n            int j = i - 1;\n            while (j >= 0 && angle - angles[j] > Math.PI) {\n                j--;\n            }\n            for (int k = j + 1; k < i; k++) {\n                dp[i] += dp[k];\n            }\n        }\n        double[] pointsAngle = new double[points.length];\n        for (int i = 0; i < points.length; i++) {\n            pointsAngle[i] = angle(start, points[i]);\n        }\n        Arrays.sort(pointsAngle);\n        int index = Arrays.binarySearch(pointsAngle, angles[0]);\n        if (index < 0) {\n            index = -index - 1;\n        }\n        return dp[index];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int t = Integer.parseInt(br.readLine());\n        while (t-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            String[] line = br.readLine().split(\" \");\n            Point start = new Point(Double.parseDouble(line[0]), Double.parseDouble(line[1]));\n            Point[] points = new Point[n];\n            for (int i = 0; i < n; i++) {\n                line = br.readLine().split(\" \");\n                points[i] = new Point(Double.parseDouble(line[0]), Double.parseDouble(line[1]));\n            }\n            long result = countOrders(points, start);\n            System.out.println(result);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}