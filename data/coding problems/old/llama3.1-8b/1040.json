{
    "solution_id": "llama3.1-8b-1040",
    "problem_id": "p00797",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 20\n#define MAX_STATEMENTS 1000\n#define MAX_TREE_SIZE 1000\n\ntypedef struct Node {\n    char name[MAX_NAME_LENGTH];\n    int level;\n    struct Node* parent;\n    struct Node* children;\n} Node;\n\ntypedef struct {\n    Node* root;\n    Node* current;\n} Tree;\n\nvoid initTree(Tree* tree) {\n    tree->root = NULL;\n    tree->current = NULL;\n}\n\nvoid addNode(Tree* tree, char* name, int level) {\n    Node* newNode = (Node*)malloc(sizeof(Node));\n    strcpy(newNode->name, name);\n    newNode->level = level;\n    newNode->parent = NULL;\n    newNode->children = NULL;\n\n    if (tree->root == NULL) {\n        tree->root = newNode;\n        tree->current = newNode;\n    } else {\n        Node* parent = tree->current;\n        while (parent->children != NULL) {\n            parent = parent->children;\n        }\n        parent->children = newNode;\n        newNode->parent = parent;\n        tree->current = newNode;\n    }\n}\n\nvoid processStatement(Tree* tree, char* statement) {\n    char relation[MAX_NAME_LENGTH];\n    char person[MAX_NAME_LENGTH];\n    char ancestor[MAX_NAME_LENGTH];\n\n    sscanf(statement, \"%[^ ] %s %s\", relation, person, ancestor);\n\n    if (strcmp(relation, \"is a child of\") == 0) {\n        Node* child = findNode(tree->root, person);\n        Node* parent = findNode(tree->root, ancestor);\n        if (child != NULL && parent != NULL && child->parent == parent) {\n            printf(\"True\\n\");\n        } else {\n            printf(\"False\\n\");\n        }\n    } else if (strcmp(relation, \"is the parent of\") == 0) {\n        Node* parent = findNode(tree->root, person);\n        Node* child = findNode(tree->root, ancestor);\n        if (parent != NULL && child != NULL && parent->children == child) {\n            printf(\"True\\n\");\n        } else {\n            printf(\"False\\n\");\n        }\n    } else if (strcmp(relation, \"is a sibling of\") == 0) {\n        Node* sibling = findNode(tree->root, person);\n        Node* other = findNode(tree->root, ancestor);\n        if (sibling != NULL && other != NULL && sibling->parent == other->parent && sibling != other) {\n            printf(\"True\\n\");\n        } else {\n            printf(\"False\\n\");\n        }\n    } else if (strcmp(relation, \"is a descendant of\") == 0) {\n        Node* descendant = findNode(tree->root, person);\n        Node* ancestor = findNode(tree->root, ancestor);\n        if (descendant != NULL && ancestor != NULL && isDescendant(descendant, ancestor)) {\n            printf(\"True\\n\");\n        } else {\n            printf(\"False\\n\");\n        }\n    } else if (strcmp(relation, \"is an ancestor of\") == 0) {\n        Node* ancestor = findNode(tree->root, person);\n        Node* descendant = findNode(tree->root, ancestor);\n        if (ancestor != NULL && descendant != NULL && isAncestor(ancestor, descendant)) {\n            printf(\"True\\n\");\n        } else {\n            printf(\"False\\n\");\n        }\n    }\n}\n\nNode* findNode(Node* root, char* name) {\n    if (root == NULL) {\n        return NULL;\n    }\n    if (strcmp(root->name, name) == 0) {\n        return root;\n    }\n    Node* found = findNode(root->children, name);\n    if (found != NULL) {\n        return found;\n    }\n    return NULL;\n}\n\nint isDescendant(Node* descendant, Node* ancestor) {\n    if (descendant == NULL || ancestor == NULL) {\n        return 0;\n    }\n    if (descendant == ancestor) {\n        return 1;\n    }\n    if (descendant->parent == ancestor) {\n        return 1;\n    }\n    return isDescendant(descendant->parent, ancestor);\n}\n\nint isAncestor(Node* ancestor, Node* descendant) {\n    if (ancestor == NULL || descendant == NULL) {\n        return 0;\n    }\n    if (ancestor == descendant) {\n        return 1;\n    }\n    if (descendant->parent == ancestor) {\n        return 1;\n    }\n    return isAncestor(ancestor, descendant->parent);\n}\n\nint main() {\n    int n, m;\n    Tree tree;\n    initTree(&tree);\n\n    while (scanf(\"%d %d\", &n, &m) == 2) {\n        if (n == 0 && m == 0) {\n            break;\n        }\n\n        char name[MAX_NAME_LENGTH];\n        int level = 0;\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s\", name);\n            addNode(&tree, name, level);\n            if (name[0] != ' ') {\n                level = 0;\n            } else {\n                level++;\n            }\n        }\n\n        for (int i = 0; i < m; i++) {\n            char statement[MAX_NAME_LENGTH];\n            scanf(\"%s\", statement);\n            processStatement(&tree, statement);\n        }\n\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}