{
    "solution_id": "llama3.1-8b-3839",
    "problem_id": "p02280",
    "language": "Python",
    "solution": "```python\nclass Node:\n    def __init__(self, id, left=-1, right=-1):\n        self.id = id\n        self.left = left\n        self.right = right\n        self.parent = -1\n        self.sibling = -1\n        self.children = []\n\nclass BinaryTree:\n    def __init__(self, n):\n        self.n = n\n        self.nodes = [Node(i) for i in range(n)]\n\n    def build_tree(self):\n        for i in range(self.n):\n            id, left, right = map(int, input().split())\n            self.nodes[id].left = left\n            self.nodes[id].right = right\n            if left != -1:\n                self.nodes[left].parent = id\n                self.nodes[left].sibling = self.nodes[id].sibling\n                self.nodes[id].sibling = left\n                self.nodes[id].children.append(self.nodes[left])\n            if right != -1:\n                self.nodes[right].parent = id\n                self.nodes[right].sibling = self.nodes[id].sibling\n                self.nodes[id].sibling = right\n                self.nodes[id].children.append(self.nodes[right])\n\n    def dfs(self, node, depth):\n        if node is None:\n            return\n        node.depth = depth\n        if node.left is not None:\n            self.dfs(self.nodes[node.left], depth + 1)\n        if node.right is not None:\n            self.dfs(self.nodes[node.right], depth + 1)\n\n    def dfs_height(self, node, height):\n        if node is None:\n            return\n        node.height = max(height, max(self.dfs_height(node.left, height + 1), self.dfs_height(node.right, height + 1)))\n\n    def print_tree(self):\n        self.build_tree()\n        self.dfs(self.nodes[0], 0)\n        self.dfs_height(self.nodes[0], 0)\n        for i in range(self.n):\n            node = self.nodes[i]\n            if node.parent == -1:\n                parent = -1\n            else:\n                parent = node.parent\n            if node.sibling == -1:\n                sibling = -1\n            else:\n                sibling = node.sibling\n            degree = len(node.children)\n            if node.left is None and node.right is None:\n                node_type = 'leaf'\n            elif node.parent == -1:\n                node_type = 'root'\n            else:\n                node_type = 'internal node'\n            print(f\"node {node.id}: parent = {parent}, sibling = {sibling}, degree = {degree}, depth = {node.depth}, height = {node.height}, {node_type}\")\n\nn = int(input())\ntree = BinaryTree(n)\ntree.print_tree()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}