{
    "solution_id": "llama3.1-8b-3165",
    "problem_id": "p01738",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <random>\n\nusing namespace std;\n\ndouble uniform_distribution(double a, double b) {\n    static random_device rd;\n    static mt19937 gen(rd());\n    uniform_real_distribution<double> dis(a, b);\n    return dis(gen);\n}\n\ndouble calculate_probability(vector<vector<char>>& grid, double mA1, double mA2, double mB1, double mB2, double mX) {\n    int H = grid.size();\n    int W = grid[0].size();\n    vector<vector<double>> mass(H, vector<double>(W, 0));\n    vector<vector<bool>> visited(H, vector<bool>(W, false));\n    vector<vector<int>> x_coords(H, vector<int>(W, 0));\n    vector<vector<int>> y_coords(H, vector<int>(W, 0));\n\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] == 'X') {\n                mass[i][j] = mX;\n                x_coords[i][j] = j + 0.5;\n                y_coords[i][j] = i + 0.5;\n            }\n        }\n    }\n\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] == 'A') {\n                mass[i][j] = uniform_distribution(mA1, mA2);\n                x_coords[i][j] = j + 0.5;\n                y_coords[i][j] = i + 0.5;\n            }\n        }\n    }\n\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] == 'B') {\n                mass[i][j] = uniform_distribution(mB1, mB2);\n                x_coords[i][j] = j + 0.5;\n                y_coords[i][j] = i + 0.5;\n            }\n        }\n    }\n\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] != '.') {\n                visited[i][j] = true;\n                for (int k = -1; k <= 1; k++) {\n                    for (int l = -1; l <= 1; l++) {\n                        int x = i + k;\n                        int y = j + l;\n                        if (x >= 0 && x < H && y >= 0 && y < W && grid[x][y] != '.') {\n                            mass[i][j] += mass[x][y];\n                            x_coords[i][j] += x_coords[x][y];\n                            y_coords[i][j] += y_coords[x][y];\n                            visited[x][y] = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    double total_mass = 0;\n    double total_x = 0;\n    double total_y = 0;\n    int total_tiles = 0;\n\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] != '.') {\n                total_mass += mass[i][j];\n                total_x += mass[i][j] * x_coords[i][j];\n                total_y += mass[i][j] * y_coords[i][j];\n                total_tiles++;\n            }\n        }\n    }\n\n    double probability = 0;\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] != '.') {\n                double x = (mass[i][j] * x_coords[i][j]) / total_mass;\n                double y = (mass[i][j] * y_coords[i][j]) / total_mass;\n                double dx = x - (int)x;\n                double dy = y - (int)y;\n                probability += (dx * dy) / (total_mass * total_mass);\n            }\n        }\n    }\n\n    return 1 - probability;\n}\n\nint main() {\n    int H, W;\n    cin >> H >> W;\n    vector<vector<char>> grid(H, vector<char>(W));\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            cin >> grid[i][j];\n        }\n    }\n    double mA1, mA2, mB1, mB2, mX;\n    cin >> mA1 >> mA2 >> mB1 >> mB2 >> mX;\n    double probability = calculate_probability(grid, mA1, mA2, mB1, mB2, mX);\n    cout << fixed << setprecision(15) << probability << endl;\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}