{
    "solution_id": "llama3.1-8b-1152",
    "problem_id": "p00825",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Structure to represent an application\ntypedef struct {\n    int start;\n    int end;\n    int price;\n} Application;\n\n// Comparison function for sorting applications\nint compareApplications(const void *a, const void *b) {\n    Application *appA = (Application *)a;\n    Application *appB = (Application *)b;\n    return (appB->price - appA->price);\n}\n\nint main() {\n    int n, i, j, w, maxIncome = 0;\n    Application *applications = NULL;\n\n    // Read the number of applications\n    while (scanf(\"%d\", &n) == 1 && n != 0) {\n        // Allocate memory for the applications\n        applications = (Application *)malloc(n * sizeof(Application));\n\n        // Read the applications\n        for (i = 0; i < n; i++) {\n            scanf(\"%d %d %d\", &applications[i].start, &applications[i].end, &applications[i].price);\n        }\n\n        // Sort the applications by price in descending order\n        qsort(applications, n, sizeof(Application), compareApplications);\n\n        // Initialize the end of the last accepted application\n        int lastEnd = 0;\n\n        // Iterate over the sorted applications\n        for (i = 0; i < n; i++) {\n            // If the current application starts after the last accepted application, accept it\n            if (applications[i].start > lastEnd) {\n                maxIncome += applications[i].price * (applications[i].end - applications[i].start + 1);\n                lastEnd = applications[i].end;\n            }\n        }\n\n        // Print the maximum income\n        printf(\"%d\\n\", maxIncome);\n\n        // Free the memory\n        free(applications);\n        maxIncome = 0;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}