{
    "solution_id": "llama3.1-8b-238",
    "problem_id": "p00370",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static double distance(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    }\n\n    static double crossProduct(Point p1, Point p2, Point p3) {\n        return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n    }\n\n    static double orientation(Point p1, Point p2, Point p3) {\n        double crossProductValue = crossProduct(p1, p2, p3);\n        if (crossProductValue > 0) return 1; // Clockwise\n        else if (crossProductValue < 0) return -1; // Counterclockwise\n        else return 0; // Collinear\n    }\n\n    static double convexHull(Point[] points) {\n        int n = points.length;\n        if (n < 3) return 0;\n\n        Arrays.sort(points, Comparator.comparingDouble(p -> p.x));\n\n        List<Point> upperHull = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            while (upperHull.size() >= 2 && orientation(upperHull.get(upperHull.size() - 2), upperHull.get(upperHull.size() - 1), points[i]) <= 0) {\n                upperHull.remove(upperHull.size() - 1);\n            }\n            upperHull.add(points[i]);\n        }\n\n        double result = 0;\n        for (int i = 0; i < upperHull.size() - 1; i++) {\n            result += distance(upperHull.get(i), upperHull.get(i + 1));\n        }\n\n        return result;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        double x_s = Double.parseDouble(st.nextToken());\n        double y_s = Double.parseDouble(st.nextToken());\n        st = new StringTokenizer(br.readLine());\n        double x_g = Double.parseDouble(st.nextToken());\n        double y_g = Double.parseDouble(st.nextToken());\n        int N = Integer.parseInt(br.readLine());\n        Point[] points = new Point[N];\n        for (int i = 0; i < N; i++) {\n            st = new StringTokenizer(br.readLine());\n            points[i] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n        }\n        double result = distance(new Point(x_s, y_s), new Point(x_g, y_g));\n        for (int i = 0; i < N; i++) {\n            points[i].x += 10000;\n            points[i].y += 10000;\n        }\n        result = Math.min(result, distance(new Point(x_s, y_s), points[0]) + convexHull(Arrays.copyOfRange(points, 1, N)) + distance(points[N - 1], new Point(x_g, y_g)));\n        for (int i = 0; i < N; i++) {\n            points[i].x -= 10000;\n            points[i].y -= 10000;\n        }\n        result = Math.min(result, distance(new Point(x_s, y_s), points[N - 1]) + convexHull(Arrays.copyOfRange(points, 0, N - 1)) + distance(points[0], new Point(x_g, y_g)));\n        System.out.printf(\"%.6f\\n\", result);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}