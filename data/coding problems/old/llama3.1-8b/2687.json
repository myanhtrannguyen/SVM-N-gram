{
    "solution_id": "llama3.1-8b-2687",
    "problem_id": "p03667",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastReader() {\n            br = new BufferedReader(new InputStreamReader(System.in));\n        }\n\n        String next() {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine() {\n            String str = \"\";\n            try {\n                str = br.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n\n    static class SegTree {\n        int n;\n        int[] tree;\n        int[] lazy;\n\n        public SegTree(int n) {\n            this.n = n;\n            tree = new int[4 * n];\n            lazy = new int[4 * n];\n        }\n\n        void push(int v, int l, int r) {\n            if (lazy[v] != 0) {\n                tree[v] = lazy[v] * (r - l + 1);\n                if (l != r) {\n                    lazy[2 * v] = lazy[v];\n                    lazy[2 * v + 1] = lazy[v];\n                }\n                lazy[v] = 0;\n            }\n        }\n\n        void update(int v, int l, int r, int a, int b, int val) {\n            push(v, l, r);\n            if (l > b || r < a) return;\n            if (l >= a && r <= b) {\n                lazy[v] = val;\n                push(v, l, r);\n                return;\n            }\n            int m = (l + r) / 2;\n            update(2 * v, l, m, a, b, val);\n            update(2 * v + 1, m + 1, r, a, b, val);\n            tree[v] = Math.min(tree[2 * v], tree[2 * v + 1]);\n        }\n\n        int query(int v, int l, int r, int a, int b) {\n            push(v, l, r);\n            if (l > b || r < a) return Integer.MAX_VALUE;\n            if (l >= a && r <= b) return tree[v];\n            int m = (l + r) / 2;\n            return Math.min(query(2 * v, l, m, a, b), query(2 * v + 1, m + 1, r, a, b));\n        }\n    }\n\n    public static void main(String[] args) {\n        FastReader sc = new FastReader();\n        PrintWriter out = new PrintWriter(System.out);\n        int n = sc.nextInt();\n        int m = sc.nextInt();\n        int[] a = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            a[i] = sc.nextInt();\n        }\n        int[] x = new int[m + 1];\n        int[] y = new int[m + 1];\n        for (int i = 1; i <= m; i++) {\n            x[i] = sc.nextInt();\n            y[i] = sc.nextInt();\n        }\n        SegTree seg = new SegTree(n + 1);\n        seg.update(1, 1, n, 1, n, 1);\n        for (int i = 1; i <= m; i++) {\n            seg.update(1, 1, n, x[i], x[i], 0);\n            seg.update(1, 1, n, y[i], y[i], 1);\n            int ans = n - seg.query(1, 1, n, 1, n);\n            out.println(ans);\n            seg.update(1, 1, n, y[i], y[i], 0);\n        }\n        out.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}