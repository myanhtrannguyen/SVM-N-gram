{
    "solution_id": "llama3.1-8b-550",
    "problem_id": "p00651",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class TangentPoint {\n        double x, y;\n\n        public TangentPoint(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static double crossProduct(Point p1, Point p2, Point p3) {\n        return (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n    }\n\n    static double distance(Point p1, Point p2) {\n        return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n    }\n\n    static double dotProduct(Point p1, Point p2) {\n        return p1.x * p2.x + p1.y * p2.y;\n    }\n\n    static double magnitude(Point p) {\n        return Math.sqrt(Math.pow(p.x, 2) + Math.pow(p.y, 2));\n    }\n\n    static Point normalize(Point p) {\n        double mag = magnitude(p);\n        return new Point(p.x / mag, p.y / mag);\n    }\n\n    static Point rotate(Point p, double angle) {\n        return new Point(p.x * Math.cos(angle) - p.y * Math.sin(angle), p.x * Math.sin(angle) + p.y * Math.cos(angle));\n    }\n\n    static double angleBetween(Point p1, Point p2) {\n        return Math.acos(dotProduct(p1, p2) / (magnitude(p1) * magnitude(p2)));\n    }\n\n    static ArrayList<TangentPoint> getTangentPoints(int n, double r, Point[] points) {\n        ArrayList<TangentPoint> tangentPoints = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            Point p = points[i];\n            Point q = points[(i + 1) % n];\n\n            double angle = Math.atan2(q.y - p.y, q.x - p.x);\n\n            double[] angles = new double[n];\n            for (int j = 0; j < n; j++) {\n                Point p1 = points[j];\n                Point p2 = points[(j + 1) % n];\n\n                angles[j] = Math.atan2(p2.y - p1.y, p2.x - p1.x);\n            }\n\n            double minAngle = Double.MAX_VALUE;\n            for (int j = 0; j < n; j++) {\n                if (angles[j] < minAngle && angles[j] > angle - Math.PI) {\n                    minAngle = angles[j];\n                }\n            }\n\n            Point tangentPoint = rotate(p, minAngle - angle);\n            tangentPoint.x += p.x;\n            tangentPoint.y += p.y;\n\n            tangentPoints.add(new TangentPoint(tangentPoint.x, tangentPoint.y));\n        }\n\n        return tangentPoints;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        while (true) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int r = Integer.parseInt(st.nextToken());\n            int q = Integer.parseInt(st.nextToken());\n\n            if (n == 0 && r == 0 && q == 0) {\n                break;\n            }\n\n            Point[] points = new Point[n];\n            for (int i = 0; i < n; i++) {\n                st = new StringTokenizer(br.readLine());\n                points[i] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            }\n\n            ArrayList<TangentPoint> tangentPoints = getTangentPoints(n, r, points);\n\n            for (int i = 0; i < q; i++) {\n                pw.println(String.format(\"%.10f %.10f\", tangentPoints.get(i).x, tangentPoints.get(i).y));\n            }\n        }\n\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}