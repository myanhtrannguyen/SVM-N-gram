{
    "solution_id": "llama3.1-8b-3231",
    "problem_id": "p01794",
    "language": "Python",
    "solution": "```python\nimport sys\nimport math\nfrom collections import deque\n\ndef read_ints():\n    return map(int, sys.stdin.readline().split())\n\ndef read_int():\n    return int(sys.stdin.readline())\n\ndef read_str():\n    return sys.stdin.readline().strip()\n\ndef read_list_ints():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_list_int():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef read_list_str():\n    return sys.stdin.readline().strip().split()\n\ndef solve():\n    N, M = read_ints()\n    s, t = read_ints()\n    s -= 1\n    t -= 1\n    adj = [[] for _ in range(N)]\n    for _ in range(M):\n        u, v, w, c = read_ints()\n        u -= 1\n        v -= 1\n        adj[u].append((v, w, c))\n        adj[v].append((u, 0, -c))\n\n    flow = [0] * N\n    cost = [0] * N\n    parent = [-1] * N\n    min_cost = [float('inf')] * N\n    min_cost[s] = 0\n\n    while True:\n        q = deque()\n        q.append(s)\n        while q:\n            u = q.popleft()\n            for v, w, c in adj[u]:\n                if w > 0 and min_cost[v] > min_cost[u] + c:\n                    min_cost[v] = min_cost[u] + c\n                    parent[v] = u\n                    cost[v] = cost[u] + c * w\n                    flow[v] = flow[u] + w\n                    q.append(v)\n        if parent[t] == -1:\n            break\n        u = t\n        while u != s:\n            v = parent[u]\n            flow[v] -= 1\n            flow[u] += 1\n            u = v\n\n    max_flow = flow[t]\n    total_cost = 0\n    for u in range(N):\n        for v, w, c in adj[u]:\n            if w > 0:\n                total_cost += c * w * flow[v]\n\n    ans = (total_cost ** 2 + (max_flow ** 2)) // math.gcd(total_cost ** 2, max_flow ** 2)\n    print(f\"{ans // math.gcd(ans, 1)}/{math.gcd(ans, 1)}\")\n\nif __name__ == \"__main__\":\n    solve()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}