{
    "solution_id": "llama3.1-8b-1242",
    "problem_id": "p00847",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class Cube {\n        int x, y;\n        char color;\n\n        public Cube(int x, int y, char color) {\n            this.x = x;\n            this.y = y;\n            this.color = color;\n        }\n    }\n\n    static class State {\n        int[][] board;\n        int emptyX, emptyY;\n        int steps;\n\n        public State(int[][] board, int emptyX, int emptyY, int steps) {\n            this.board = board;\n            this.emptyX = emptyX;\n            this.emptyY = emptyY;\n            this.steps = steps;\n        }\n    }\n\n    static int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            int x = scanner.nextInt();\n            int y = scanner.nextInt();\n            int[][] board = new int[3][3];\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    board[i][j] = scanner.nextInt();\n                }\n            }\n            char[][] target = new char[3][3];\n            for (int i = 0; i < 3; i++) {\n                for (int j = 0; j < 3; j++) {\n                    target[i][j] = (char) scanner.nextInt();\n                }\n            }\n            Queue<State> queue = new LinkedList<>();\n            Set<String> visited = new HashSet<>();\n            queue.add(new State(board, x, y, 0));\n            visited.add(Arrays.deepToString(board));\n            boolean found = false;\n            int steps = 0;\n            while (!queue.isEmpty()) {\n                State state = queue.poll();\n                if (state.steps > 30) {\n                    break;\n                }\n                if (isTarget(state.board, target)) {\n                    System.out.println(state.steps);\n                    found = true;\n                    break;\n                }\n                for (int[] direction : directions) {\n                    int newX = state.emptyX + direction[0];\n                    int newY = state.emptyY + direction[1];\n                    if (newX >= 0 && newX < 3 && newY >= 0 && newY < 3) {\n                        int[][] newBoard = rotate(state.board, state.emptyX, state.emptyY, newX, newY);\n                        String key = Arrays.deepToString(newBoard);\n                        if (!visited.contains(key)) {\n                            queue.add(new State(newBoard, newX, newY, state.steps + 1));\n                            visited.add(key);\n                        }\n                    }\n                }\n                steps++;\n            }\n            if (!found) {\n                System.out.println(-1);\n            }\n            if (x == 0 && y == 0) {\n                break;\n            }\n        }\n    }\n\n    static int[][] rotate(int[][] board, int x1, int y1, int x2, int y2) {\n        int[][] newBoard = new int[3][3];\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                newBoard[i][j] = board[i][j];\n            }\n        }\n        int temp = newBoard[x1][y1];\n        newBoard[x1][y1] = newBoard[x2][y2];\n        newBoard[x2][y2] = temp;\n        return newBoard;\n    }\n\n    static boolean isTarget(int[][] board, char[][] target) {\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (board[i][j] != target[i][j]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}