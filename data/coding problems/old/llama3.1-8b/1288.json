{
    "solution_id": "llama3.1-8b-1288",
    "problem_id": "p00859",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_VERTICES 100\n#define MAX_EDGES 10000\n#define INF 1000000000\n\nint parent[MAX_VERTICES];\nint rank[MAX_VERTICES];\n\nint find(int v) {\n    if (parent[v] != v) {\n        parent[v] = find(parent[v]);\n    }\n    return parent[v];\n}\n\nvoid union_set(int a, int b) {\n    int root_a = find(a);\n    int root_b = find(b);\n\n    if (root_a != root_b) {\n        if (rank[root_a] < rank[root_b]) {\n            parent[root_a] = root_b;\n        } else if (rank[root_a] > rank[root_b]) {\n            parent[root_b] = root_a;\n        } else {\n            parent[root_b] = root_a;\n            rank[root_a]++;\n        }\n    }\n}\n\nint kruskal(int n, int m, int edges[][3]) {\n    int i, j, k, count = 0, min_weight = INF, max_weight = 0;\n    for (i = 0; i < n; i++) {\n        parent[i] = i;\n        rank[i] = 0;\n    }\n\n    for (i = 0; i < m; i++) {\n        int u = edges[i][0];\n        int v = edges[i][1];\n        int w = edges[i][2];\n\n        int root_u = find(u);\n        int root_v = find(v);\n\n        if (root_u != root_v) {\n            count++;\n            union_set(root_u, root_v);\n            if (count == n - 1) {\n                for (j = 0; j < m; j++) {\n                    int u = edges[j][0];\n                    int v = edges[j][1];\n                    int w = edges[j][2];\n\n                    int root_u = find(u);\n                    int root_v = find(v);\n\n                    if (root_u == root_v) {\n                        if (w > max_weight) {\n                            max_weight = w;\n                        }\n                        if (w < min_weight) {\n                            min_weight = w;\n                        }\n                    }\n                }\n                return max_weight - min_weight;\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int n, m;\n    int i, j;\n    int edges[MAX_EDGES][3];\n\n    while (scanf(\"%d %d\", &n, &m) == 2) {\n        if (n == 0 && m == 0) {\n            break;\n        }\n\n        for (i = 0; i < m; i++) {\n            scanf(\"%d %d %d\", &edges[i][0], &edges[i][1], &edges[i][2]);\n            edges[i][0]--;\n            edges[i][1]--;\n        }\n\n        int result = kruskal(n, m, edges);\n        printf(\"%d\\n\", result);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}