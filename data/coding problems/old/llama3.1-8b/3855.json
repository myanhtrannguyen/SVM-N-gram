{
    "solution_id": "llama3.1-8b-3855",
    "problem_id": "p02284",
    "language": "Python",
    "solution": "```python\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n\nclass BinarySearchTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        self.root = self._insert(self.root, key)\n\n    def _insert(self, node, key):\n        if node is None:\n            return Node(key)\n        if key < node.key:\n            node.left = self._insert(node.left, key)\n        elif key > node.key:\n            node.right = self._insert(node.right, key)\n        return node\n\n    def find(self, key):\n        return self._find(self.root, key)\n\n    def _find(self, node, key):\n        if node is None:\n            return False\n        if key == node.key:\n            return True\n        if key < node.key:\n            return self._find(node.left, key)\n        return self._find(node.right, key)\n\n    def inorder(self):\n        return self._inorder(self.root)\n\n    def _inorder(self, node):\n        if node is None:\n            return []\n        return self._inorder(node.left) + [node.key] + self._inorder(node.right)\n\n    def preorder(self):\n        return self._preorder(self.root)\n\n    def _preorder(self, node):\n        if node is None:\n            return []\n        return [node.key] + self._preorder(node.left) + self._preorder(node.right)\n\n\ndef main():\n    m = int(input())\n    bst = BinarySearchTree()\n    for _ in range(m):\n        op = input().split()\n        if op[0] == 'insert':\n            bst.insert(int(op[1]))\n        elif op[0] == 'find':\n            print('yes' if bst.find(int(op[1])) else 'no')\n        elif op[0] == 'print':\n            print(' '.join(map(str, bst.inorder())))\n            print(' '.join(map(str, bst.preorder())))\n\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}