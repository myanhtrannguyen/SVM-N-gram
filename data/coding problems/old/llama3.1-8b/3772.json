{
    "solution_id": "llama3.1-8b-3772",
    "problem_id": "p02264",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_NAME_LENGTH 11\n#define MAX_PROCESS 100000\n\ntypedef struct Process {\n    char name[MAX_NAME_LENGTH];\n    int time;\n    int finish_time;\n} Process;\n\nint compare_processes(const void *a, const void *b) {\n    Process *p1 = (Process *)a;\n    Process *p2 = (Process *)b;\n    return p1->time - p2->time;\n}\n\nint main() {\n    int n, q;\n    scanf(\"%d %d\", &n, &q);\n\n    Process *processes = (Process *)malloc(n * sizeof(Process));\n    for (int i = 0; i < n; i++) {\n        scanf(\"%s %d\", processes[i].name, &processes[i].time);\n    }\n\n    qsort(processes, n, sizeof(Process), compare_processes);\n\n    int current_time = 0;\n    int index = 0;\n    while (index < n) {\n        int remaining_time = processes[index].time;\n        int start_time = current_time;\n        while (remaining_time > 0) {\n            int time_to_handle = (remaining_time > q) ? q : remaining_time;\n            current_time += time_to_handle;\n            remaining_time -= time_to_handle;\n            if (remaining_time > 0) {\n                int next_index = (index + 1) % n;\n                while (next_index != index && processes[next_index].finish_time != 0) {\n                    next_index = (next_index + 1) % n;\n                }\n                if (next_index == index) {\n                    printf(\"%s %d\\n\", processes[index].name, current_time);\n                    processes[index].finish_time = current_time;\n                    index = (index + 1) % n;\n                } else {\n                    processes[next_index].time += time_to_handle;\n                    processes[next_index].finish_time = 0;\n                }\n            }\n        }\n        printf(\"%s %d\\n\", processes[index].name, current_time);\n        processes[index].finish_time = current_time;\n        index = (index + 1) % n;\n    }\n\n    free(processes);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}