{
    "solution_id": "llama3.1-8b-1100",
    "problem_id": "p00812",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAXLEN 100\n#define MAXTOKEN 20\n#define MAXTOKENLEN 20\n#define MAXEXPR 100\n\ntypedef struct expr {\n    char *token;\n    struct expr *left;\n    struct expr *right;\n    struct expr *next;\n} expr;\n\nexpr *new_expr(char *token) {\n    expr *e = (expr *)malloc(sizeof(expr));\n    e->token = strdup(token);\n    e->left = NULL;\n    e->right = NULL;\n    e->next = NULL;\n    return e;\n}\n\nvoid free_expr(expr *e) {\n    if (e) {\n        free_expr(e->left);\n        free_expr(e->right);\n        free(e->token);\n        free(e);\n    }\n}\n\nint get_token(char *token, char *str, int *len) {\n    int c;\n    int i = 0;\n    while (isspace(c = *str)) str++;\n    if (c == 0) return 0;\n    if (c == '(') {\n        token[i++] = c;\n        token[i] = 0;\n        return 1;\n    }\n    if (c == ')') {\n        token[i++] = c;\n        token[i] = 0;\n        return 1;\n    }\n    if (c == '+' || c == '-') {\n        token[i++] = c;\n        token[i] = 0;\n        return 1;\n    }\n    if (c == '^') {\n        token[i++] = c;\n        token[i] = 0;\n        return 1;\n    }\n    while (isalnum(c = *str)) {\n        token[i++] = c;\n        str++;\n    }\n    token[i] = 0;\n    *len = i;\n    return 1;\n}\n\nexpr *parse(char *str) {\n    expr *e = NULL;\n    expr *last = NULL;\n    char token[MAXTOKEN];\n    int len;\n    while (get_token(token, str, &len)) {\n        if (token[0] == '(') {\n            e = new_expr(token);\n            last->next = e;\n            last = e;\n            str += len;\n            continue;\n        }\n        if (token[0] == ')') {\n            return e;\n        }\n        if (token[0] == '+' || token[0] == '-') {\n            e = new_expr(token);\n            last->next = e;\n            last = e;\n            str += len;\n            continue;\n        }\n        if (token[0] == '^') {\n            e = new_expr(token);\n            last->next = e;\n            last = e;\n            str += len;\n            continue;\n        }\n        e = new_expr(token);\n        if (last) last->next = e;\n        last = e;\n        str += len;\n    }\n    return e;\n}\n\nint evaluate(expr *e, char *var, int *val) {\n    if (e->token[0] == '(') {\n        evaluate(e->left, var, val);\n        evaluate(e->right, var, val);\n        return 0;\n    }\n    if (e->token[0] == '+' || e->token[0] == '-') {\n        evaluate(e->left, var, val);\n        evaluate(e->right, var, val);\n        return 0;\n    }\n    if (e->token[0] == '^') {\n        evaluate(e->left, var, val);\n        evaluate(e->right, var, val);\n        return 0;\n    }\n    if (e->token[0] == 'a' || e->token[0] == 'b' || e->token[0] == 'c') {\n        *val = 1;\n        return 0;\n    }\n    if (e->token[0] == '0') {\n        *val = 0;\n        return 0;\n    }\n    if (e->token[0] == '1') {\n        *val = 1;\n        return 0;\n    }\n    if (e->token[0] == '2') {\n        *val = 2;\n        return 0;\n    }\n    if (e->token[0] == '3') {\n        *val = 3;\n        return 0;\n    }\n    if (e->token[0] == '4') {\n        *val = 4;\n        return 0;\n    }\n    if (e->token[0] == '5') {\n        *val = 5;\n        return 0;\n    }\n    if (e->token[0] == '6') {\n        *val = 6;\n        return 0;\n    }\n    if (e->token[0] == '7') {\n        *val = 7;\n        return 0;\n    }\n    if (e->token[0] == '8') {\n        *val = 8;\n        return 0;\n    }\n    if (e->token[0] == '9') {\n        *val = 9;\n        return 0;\n    }\n    return 1;\n}\n\nint main() {\n    char str[MAXLEN];\n    expr *e;\n    expr *f;\n    int val;\n    while (fgets(str, MAXLEN, stdin)) {\n        if (str[0] == '.') {\n            printf(\".\\n\");\n            continue;\n        }\n        e = parse(str);\n        f = parse(str);\n        while (f) {\n            evaluate(f, \"a\", &val);\n            if (evaluate(e, \"a\", &val) && evaluate(f, \"b\", &val) && evaluate(f, \"c\", &val)) {\n                if (val == 1) printf(\"yes\\n\");\n                else printf(\"no\\n\");\n            }\n            f = f->next;\n        }\n        free_expr(e);\n        free_expr(f);\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}