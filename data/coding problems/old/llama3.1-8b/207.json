{
    "solution_id": "llama3.1-8b-207",
    "problem_id": "p00362",
    "language": "Python",
    "solution": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass Node:\n    def __init__(self):\n        self.size = 0\n        self.children = {}\n\nclass Graph:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n        self.root = Node()\n        self.nodes = [Node() for _ in range(n)]\n\n    def add_edge(self, u, v, c):\n        if u not in self.nodes[v].children:\n            self.nodes[v].children[u] = c\n        if v not in self.nodes[u].children:\n            self.nodes[u].children[v] = c\n\n    def dfs(self, u, v, path):\n        if u == v:\n            return 0\n        if u in self.nodes[v].children:\n            return self.nodes[v].children[u]\n        for i in range(self.n):\n            if i not in self.nodes[u].children:\n                continue\n            if i not in path:\n                path.append(i)\n                res = self.dfs(i, v, path)\n                if res != -1:\n                    self.nodes[u].children[v] = res\n                    self.nodes[v].children[u] = res\n                    return res\n                path.pop()\n        return -1\n\n    def add(self, x, d):\n        for i in range(self.n):\n            if i in self.nodes[x].children:\n                self.nodes[x].children[i] += d\n                self.nodes[i].children[x] += d\n\n    def query(self, s, t):\n        path = []\n        res = self.dfs(s, t, path)\n        if res == -1:\n            return 0\n        ans = 0\n        for i in range(len(path) - 1):\n            u, v = path[i], path[i + 1]\n            if (self.nodes[u].children[v] + self.nodes[v].children[u]) % self.k == 0:\n                continue\n            ans += min(self.nodes[u].children[v], self.nodes[v].children[u])\n        return ans\n\ndef main():\n    n, k = map(int, input().split())\n    g = Graph(n, k)\n    for _ in range(n - 1):\n        u, v, c = map(int, input().split())\n        g.add_edge(u, v, c)\n    q = int(input())\n    for _ in range(q):\n        query = input().split()\n        if query[0] == 'add':\n            x, d = int(query[1]), int(query[2])\n            g.add(x, d)\n        else:\n            s, t = int(query[1]), int(query[2])\n            print(g.query(s, t))\n\nmain()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}