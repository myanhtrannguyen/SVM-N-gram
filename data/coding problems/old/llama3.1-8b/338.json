{
    "solution_id": "llama3.1-8b-338",
    "problem_id": "p00395",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Pair implements Comparable<Pair> {\n        int x, y, dist, score;\n        boolean[] items;\n\n        public Pair(int x, int y, int dist, int score, boolean[] items) {\n            this.x = x;\n            this.y = y;\n            this.dist = dist;\n            this.score = score;\n            this.items = items;\n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            return Integer.compare(this.dist, o.dist);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int w = Integer.parseInt(st.nextToken());\n        int h = Integer.parseInt(st.nextToken());\n\n        char[][] maze = new char[h][w];\n        for (int i = 0; i < h; i++) {\n            maze[i] = br.readLine().toCharArray();\n        }\n\n        int[][] scores = new int[10][10];\n        for (int i = 0; i < 10; i++) {\n            for (int j = 0; j < 10; j++) {\n                scores[i][j] = Integer.parseInt(br.readLine());\n            }\n        }\n\n        int startX = -1, startY = -1;\n        int endX = -1, endY = -1;\n        boolean[] items = new boolean[26];\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (maze[i][j] == 'S') {\n                    startX = i;\n                    startY = j;\n                } else if (maze[i][j] == 'T') {\n                    endX = i;\n                    endY = j;\n                } else if (maze[i][j] >= '0' && maze[i][j] <= '9') {\n                    items[maze[i][j] - '0'] = true;\n                } else if (maze[i][j] >= 'A' && maze[i][j] <= 'J') {\n                    items[maze[i][j] - 'A'] = false;\n                } else if (maze[i][j] >= 'a' && maze[i][j] <= 'j') {\n                    items[maze[i][j] - 'a'] = true;\n                }\n            }\n        }\n\n        Queue<Pair> queue = new LinkedList<>();\n        queue.add(new Pair(startX, startY, 0, 0, items.clone()));\n        Set<String> visited = new HashSet<>();\n\n        while (!queue.isEmpty()) {\n            Pair pair = queue.poll();\n            int x = pair.x;\n            int y = pair.y;\n            int dist = pair.dist;\n            int score = pair.score;\n            boolean[] itemsCopy = pair.items;\n\n            if (x == endX && y == endY && itemsCopy[0]) {\n                System.out.println(dist + \" \" + score);\n                return;\n            }\n\n            if (visited.contains(x + \",\" + y)) {\n                continue;\n            }\n            visited.add(x + \",\" + y);\n\n            int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n            for (int[] dir : directions) {\n                int newX = x + dir[0];\n                int newY = y + dir[1];\n\n                if (newX < 0 || newX >= h || newY < 0 || newY >= w) {\n                    continue;\n                }\n\n                char c = maze[newX][newY];\n                if (c == '#' || c == 'T') {\n                    continue;\n                }\n\n                boolean[] newItems = itemsCopy.clone();\n                if (c >= 'A' && c <= 'J' && !newItems[c - 'A']) {\n                    continue;\n                } else if (c >= 'a' && c <= 'j' && newItems[c - 'a']) {\n                    continue;\n                }\n\n                if (c >= '0' && c <= '9') {\n                    newItems[c - '0'] = true;\n                }\n\n                queue.add(new Pair(newX, newY, dist + 1, score + scores[itemsCopy[c - '0']][c - '0'], newItems));\n            }\n        }\n\n        System.out.println(-1);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}