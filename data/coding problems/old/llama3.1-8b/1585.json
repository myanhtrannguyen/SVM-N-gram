{
    "solution_id": "llama3.1-8b-1585",
    "problem_id": "p02936",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define N 200005\n#define Q 200005\n\ntypedef struct {\n    int l, r;\n    int val;\n} Node;\n\nint n, q;\nint a[N], b[N], p[N], x[N];\nint sz[N], dep[N], top[N], son[N], dfn[N], num;\nNode tr[N << 2];\nint ans[N];\n\nvoid dfs(int u, int fa) {\n    sz[u] = 1;\n    dep[u] = dep[fa] + 1;\n    top[u] = fa == 1 ? 1 : top[fa];\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i - 1]] < dep[u] - (1 << i - 1)) {\n            son[u][i] = son[son[u][i - 1]][i - 1];\n        } else {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n    }\n    for (int i = 1; i <= 18; i++) {\n        if (dep[son[u][i]] < dep[u] - (1 << i)) {\n            son[u][i] = son[u][i - 1];\n        }\n   ",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}