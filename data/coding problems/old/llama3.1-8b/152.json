{
    "solution_id": "llama3.1-8b-152",
    "problem_id": "p00109",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_LENGTH 100\n\n// Structure to represent a node in the expression tree\ntypedef struct Node {\n    char value;\n    struct Node* left;\n    struct Node* right;\n} Node;\n\n// Function to create a new node\nNode* createNode(char value) {\n    Node* newNode = (Node*) malloc(sizeof(Node));\n    newNode->value = value;\n    newNode->left = newNode->right = NULL;\n    return newNode;\n}\n\n// Function to evaluate the expression tree\nint evaluate(Node* root) {\n    if (root == NULL) return 0;\n    if (root->value == '+' || root->value == '-') {\n        int left = evaluate(root->left);\n        int right = evaluate(root->right);\n        if (root->value == '+') return left + right;\n        else return left - right;\n    } else if (root->value == '*' || root->value == '/') {\n        int left = evaluate(root->left);\n        int right = evaluate(root->right);\n        if (root->value == '*') return left * right;\n        else return left / right;\n    } else {\n        return root->value - '0';\n    }\n}\n\n// Function to build the expression tree\nNode* buildTree(char* expression) {\n    Node* root = NULL;\n    int i = 0;\n    while (expression[i] != '=') {\n        if (expression[i] == '(') {\n            i++;\n            Node* node = createNode(expression[i]);\n            node->left = buildTree(expression + i + 1);\n            i = expression[i + 1] == ')' ? i + 2 : i + 1;\n        } else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {\n            Node* node = createNode(expression[i]);\n            node->left = buildTree(expression + i + 1);\n            i = expression[i + 1] == ')' ? i + 2 : i + 1;\n            node->right = buildTree(expression + i);\n            i = expression[i + 1] == ')' ? i + 2 : i + 1;\n        } else {\n            Node* node = createNode(expression[i]);\n            i++;\n        }\n        if (root == NULL) root = node;\n        else {\n            Node* current = root;\n            while (current->right != NULL) current = current->right;\n            current->right = node;\n        }\n    }\n    return root;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    while (n--) {\n        char expression[MAX_LENGTH];\n        scanf(\"%s\", expression);\n        Node* root = buildTree(expression);\n        printf(\"%d\\n\", evaluate(root));\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}