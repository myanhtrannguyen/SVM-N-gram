{
    "solution_id": "llama3.1-8b-630",
    "problem_id": "p00694",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Key {\n        int[] labels;\n        int[][] paths;\n\n        public Key(int[] labels, int[][] paths) {\n            this.labels = labels;\n            this.paths = paths;\n        }\n    }\n\n    public static Key parseKey(String[] lines) {\n        int n = Integer.parseInt(lines[0]);\n        int[] labels = new int[n];\n        int[][] paths = new int[n][];\n\n        for (int i = 1; i <= n; i++) {\n            String[] elements = lines[i].split(\"\\\\s+\");\n            int label = Integer.parseInt(elements[0]);\n            labels[i - 1] = label;\n            List<Integer> path = new ArrayList<>();\n            for (int j = 1; j < elements.length; j++) {\n                String element = elements[j];\n                if (element.matches(\"\\\\d+\")) {\n                    path.add(Integer.parseInt(element));\n                    labels[i - 1] = Integer.parseInt(element);\n                } else {\n                    path.add(getDirection(element));\n                }\n            }\n            paths[i - 1] = new int[path.size()];\n            for (int j = 0; j < path.size(); j++) {\n                paths[i - 1][j] = path.get(j);\n            }\n        }\n        return new Key(labels, paths);\n    }\n\n    public static int getDirection(String s) {\n        switch (s) {\n            case \"+x\":\n                return 1;\n            case \"-x\":\n                return -1;\n            case \"+y\":\n                return 2;\n            case \"-y\":\n                return -2;\n            case \"+z\":\n                return 3;\n            case \"-z\":\n                return -3;\n            default:\n                return 0;\n        }\n    }\n\n    public static boolean areSameKey(Key key1, Key key2) {\n        if (key1.labels.length != key2.labels.length) return false;\n        if (key1.paths.length != key2.paths.length) return false;\n\n        int[] labels1 = key1.labels;\n        int[][] paths1 = key1.paths;\n        int[] labels2 = key2.labels;\n        int[][] paths2 = key2.paths;\n\n        int n = labels1.length;\n        for (int i = 0; i < n; i++) {\n            if (labels1[i] != labels2[i]) return false;\n            if (paths1[i].length != paths2[i].length) return false;\n            for (int j = 0; j < paths1[i].length; j++) {\n                if (paths1[i][j] != paths2[i][j]) return false;\n            }\n        }\n        return true;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        List<String> lines = new ArrayList<>();\n        while ((line = br.readLine()) != null) {\n            lines.add(line);\n            if (line.equals(\"0\")) break;\n        }\n        int p = lines.size() / 2;\n        for (int i = 0; i < p; i++) {\n            Key key1 = parseKey(Arrays.copyOfRange(lines.get(2 * i), 0, 2 * i + 1));\n            Key key2 = parseKey(Arrays.copyOfRange(lines.get(2 * i + 1), 0, 2 * i + 2));\n            if (areSameKey(key1, key2)) {\n                System.out.println(\"SAME\");\n            } else {\n                System.out.println(\"DIFFERENT\");\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}