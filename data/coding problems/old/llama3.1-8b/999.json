{
    "solution_id": "llama3.1-8b-999",
    "problem_id": "p00786",
    "language": "Python",
    "solution": "```python\nimport re\n\ndef parse_but(expression):\n    stack = []\n    for char in expression:\n        if char == '(':\n            stack.append([])\n        elif char == ')':\n            node = stack.pop()\n            if len(stack) == 0:\n                return node\n            stack[-1].append(node)\n        else:\n            stack[-1].append(char)\n    return stack[0]\n\ndef draw_node(node, level, indent):\n    if isinstance(node, str):\n        return node\n    label = node[0]\n    left = draw_node(node[1], level + 1, indent + 1)\n    right = draw_node(node[2], level + 1, indent + 1)\n    if level == 0:\n        return label + '\\n' + '-' * (len(left) + len(right) + 1) + '\\n' + indent + left + '\\n' + indent + right\n    else:\n        return label + '\\n' + '-' * (len(left) + len(right) + 1) + '\\n' + indent + left + '\\n' + indent + right\n\ndef draw_but(expression):\n    nodes = re.findall(r'[a-zA-Z]+|[a-zA-Z]+\\([a-zA-Z, ]+\\)', expression)\n    diagrams = []\n    for i, node in enumerate(nodes):\n        diagram = draw_node(parse_but(node), 0, '')\n        diagrams.append(diagram)\n    return '\\n'.join(f'{i+1}: {diagram}' for i, diagram in enumerate(diagrams))\n\nexpression = input()\nwhile expression:\n    print(draw_but(expression))\n    expression = input().strip(';') + '.'\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}