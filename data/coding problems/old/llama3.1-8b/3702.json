{
    "solution_id": "llama3.1-8b-3702",
    "problem_id": "p02246",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class State implements Comparable<State> {\n        int[][] board;\n        int steps;\n        int heuristic;\n\n        public State(int[][] board, int steps, int heuristic) {\n            this.board = board;\n            this.steps = steps;\n            this.heuristic = heuristic;\n        }\n\n        @Override\n        public int compareTo(State other) {\n            return Integer.compare(this.heuristic + this.steps, other.heuristic + other.steps);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int[][] board = new int[4][4];\n        for (int i = 0; i < 4; i++) {\n            String[] row = scanner.nextLine().split(\" \");\n            for (int j = 0; j < 4; j++) {\n                board[i][j] = Integer.parseInt(row[j]);\n            }\n        }\n        System.out.println(solve(board));\n    }\n\n    public static int solve(int[][] board) {\n        Queue<State> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        queue.add(new State(board, 0, 0));\n        visited.add(Arrays.deepToString(board));\n        while (!queue.isEmpty()) {\n            State state = queue.poll();\n            if (isGoal(state.board)) {\n                return state.steps;\n            }\n            for (int[] move : getMoves(state.board)) {\n                int[][] newBoard = getNewBoard(state.board, move);\n                String key = Arrays.deepToString(newBoard);\n                if (!visited.contains(key)) {\n                    queue.add(new State(newBoard, state.steps + 1, getHeuristic(newBoard)));\n                    visited.add(key);\n                }\n            }\n        }\n        return -1;\n    }\n\n    public static boolean isGoal(int[][] board) {\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (board[i][j] != (i * 4 + j + 1) && board[i][j] != 0) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static int[][] getNewBoard(int[][] board, int[] move) {\n        int[][] newBoard = new int[4][4];\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                newBoard[i][j] = board[i][j];\n            }\n        }\n        int x = move[0];\n        int y = move[1];\n        int value = board[x][y];\n        newBoard[x][y] = 0;\n        if (x > 0) {\n            newBoard[x - 1][y] = value;\n        } else if (y > 0) {\n            newBoard[x][y - 1] = value;\n        } else if (x < 3) {\n            newBoard[x + 1][y] = value;\n        } else {\n            newBoard[x][y + 1] = value;\n        }\n        return newBoard;\n    }\n\n    public static int[][] getMoves(int[][] board) {\n        List<int[]> moves = new ArrayList<>();\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (board[i][j] == 0) {\n                    if (i > 0) {\n                        moves.add(new int[]{i - 1, j});\n                    }\n                    if (j > 0) {\n                        moves.add(new int[]{i, j - 1});\n                    }\n                    if (i < 3) {\n                        moves.add(new int[]{i + 1, j});\n                    }\n                    if (j < 3) {\n                        moves.add(new int[]{i, j + 1});\n                    }\n                }\n            }\n        }\n        return moves.toArray(new int[0][]);\n    }\n\n    public static int getHeuristic(int[][] board) {\n        int count = 0;\n        for (int i = 0; i < 4; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (board[i][j] != 0 && board[i][j] != (i * 4 + j + 1)) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}