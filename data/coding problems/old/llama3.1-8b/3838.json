{
    "solution_id": "llama3.1-8b-3838",
    "problem_id": "p02280",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class Node {\n        int id;\n        int parent;\n        int sibling;\n        int degree;\n        int depth;\n        int height;\n        String type;\n\n        public Node(int id, int parent, int sibling, int degree, int depth, int height, String type) {\n            this.id = id;\n            this.parent = parent;\n            this.sibling = sibling;\n            this.degree = degree;\n            this.depth = depth;\n            this.height = height;\n            this.type = type;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        Node[] nodes = new Node[n];\n        for (int i = 0; i < n; i++) {\n            int id = scanner.nextInt();\n            int left = scanner.nextInt();\n            int right = scanner.nextInt();\n            nodes[i] = new Node(id, -1, -1, 0, 0, 0, \"root\");\n        }\n        for (int i = 0; i < n; i++) {\n            if (nodes[i].id != -1) {\n                nodes[i].parent = scanner.nextInt();\n                nodes[i].sibling = scanner.nextInt();\n                nodes[i].degree = (nodes[i].sibling != -1) ? 2 : (nodes[i].left != -1) ? 1 : 0;\n                nodes[i].depth = scanner.nextInt();\n                nodes[i].height = scanner.nextInt();\n                if (nodes[i].degree == 0) {\n                    nodes[i].type = \"leaf\";\n                } else if (nodes[i].degree == 1) {\n                    nodes[i].type = \"internal node\";\n                } else {\n                    nodes[i].type = \"root\";\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (nodes[i].id != -1) {\n                if (nodes[i].parent != -1) {\n                    for (int j = 0; j < n; j++) {\n                        if (nodes[j].id == nodes[i].parent) {\n                            nodes[j].sibling = nodes[i].sibling;\n                            break;\n                        }\n                    }\n                }\n                if (nodes[i].degree == 0) {\n                    nodes[i].height = 0;\n                } else {\n                    nodes[i].height = Math.max(nodes[i].left != -1 ? nodes[nodes[i].left].height + 1 : 0, nodes[i].right != -1 ? nodes[nodes[i].right].height + 1 : 0);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (nodes[i].id != -1) {\n                System.out.println(\"node \" + nodes[i].id + \": parent = \" + nodes[i].parent + \", sibling = \" + nodes[i].sibling + \", degree = \" + nodes[i].degree + \", depth = \" + nodes[i].depth + \", height = \" + nodes[i].height + \", \" + nodes[i].type);\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}