{
    "solution_id": "llama3.1-8b-3326",
    "problem_id": "p01835",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class SegmentTree {\n        int[] tree;\n        int n;\n\n        public SegmentTree(int n) {\n            this.n = n;\n            tree = new int[4 * n];\n        }\n\n        public void update(int pos, int val) {\n            update(1, 0, n - 1, pos, val);\n        }\n\n        private void update(int node, int start, int end, int pos, int val) {\n            if (start == end) {\n                tree[node] = val;\n            } else {\n                int mid = (start + end) / 2;\n                if (pos <= mid) {\n                    update(2 * node, start, mid, pos, val);\n                } else {\n                    update(2 * node + 1, mid + 1, end, pos, val);\n                }\n                tree[node] = Math.max(tree[2 * node], tree[2 * node + 1]);\n            }\n        }\n\n        public int query(int l, int r) {\n            return query(1, 0, n - 1, l, r);\n        }\n\n        private int query(int node, int start, int end, int l, int r) {\n            if (start >= l && end <= r) {\n                return tree[node];\n            } else if (start > r || end < l) {\n                return 0;\n            } else {\n                int mid = (start + end) / 2;\n                return Math.max(query(2 * node, start, mid, l, r), query(2 * node + 1, mid + 1, end, l, r));\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int k = Integer.parseInt(st.nextToken());\n        int t = Integer.parseInt(br.readLine());\n        int[] l = new int[t];\n        int[] r = new int[t];\n        int[] x = new int[t];\n        for (int i = 0; i < t; i++) {\n            st = new StringTokenizer(br.readLine());\n            l[i] = Integer.parseInt(st.nextToken());\n            r[i] = Integer.parseInt(st.nextToken());\n            x[i] = Integer.parseInt(st.nextToken());\n        }\n        SegmentTree tree = new SegmentTree(n);\n        int[] last = new int[k + 1];\n        Arrays.fill(last, -1);\n        int ans = 0;\n        for (int i = 0; i < t; i++) {\n            int max = tree.query(l[i], r[i]);\n            if (max == 0) {\n                continue;\n            }\n            if (last[x[i]] < l[i]) {\n                ans += r[i] - l[i] + 1;\n                tree.update(l[i], r[i]);\n                last[x[i]] = r[i];\n            }\n        }\n        System.out.println(ans);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}