{
    "solution_id": "llama3.1-8b-499",
    "problem_id": "p00638",
    "language": "Python",
    "solution": "```python\nfrom collections import deque\n\ndef can_collect_all_treasures(n, islands):\n    # Create a graph where each island is a node and the edge weight is the max treasure that can be taken\n    graph = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        graph[i].append((i, 0))  # Add an edge to the start node\n        for j in range(1, n + 1):\n            if i != j:\n                graph[i].append((j, min(islands[i - 1][0], islands[j - 1][1])))\n\n    # Use BFS to find a path that visits all islands and returns to the start node\n    queue = deque([(1, 0, 0)])  # (node, treasure, path)\n    visited = set([1])\n    while queue:\n        node, treasure, path = queue.popleft()\n        if len(path) == n + 1:\n            return True\n        for neighbor, max_treasure in graph[node]:\n            if neighbor not in visited and treasure + max_treasure >= islands[neighbor - 1][0]:\n                queue.append((neighbor, treasure + max_treasure, path + [neighbor]))\n                visited.add(neighbor)\n\n    return False\n\ndef main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        islands = []\n        for _ in range(n):\n            islands.append(list(map(int, input().split())))\n        print(\"Yes\" if can_collect_all_treasures(n, islands) else \"No\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}