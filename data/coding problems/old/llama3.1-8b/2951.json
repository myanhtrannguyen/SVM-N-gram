{
    "solution_id": "llama3.1-8b-2951",
    "problem_id": "p01595",
    "language": "Python",
    "solution": "```python\nfrom collections import deque\n\ndef is_valid(x, y, w, h):\n    return 0 <= x < w and 0 <= y < h\n\ndef get_neighbors(x, y, w, h):\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\ndef get_beam(x, y, w, h, grid):\n    if grid[y][x] == 'L':\n        return (x, y)\n    return None\n\ndef get_reflected_beam(x, y, w, h, grid, beam):\n    dx, dy = beam\n    if grid[y][x] == '-':\n        return (x, y)\n    elif grid[y][x] == '|':\n        return (dx, dy)\n    elif grid[y][x] == '/':\n        return (y - x + dx, y + x + dy)\n    elif grid[y][x] == '\\\\':\n        return (y + x + dx, y - x + dy)\n    return None\n\ndef get_split_beams(x, y, w, h, grid, beam):\n    dx, dy = beam\n    if grid[y][x] == 'O':\n        beam1 = (dx - dy, dy + dx)\n        beam2 = (dx + dy, dy - dx)\n        return [beam1, beam2]\n    return [beam]\n\ndef get_statue_beam(x, y, w, h, grid, beam):\n    dx, dy = beam\n    if grid[y][x] == 'S':\n        return (dx, dy)\n    return None\n\ndef bfs(w, h, grid):\n    queue = deque([(0, 0, None, None, 0)])\n    visited = set([(0, 0, None, None, 0)])\n    while queue:\n        x, y, prev_beam, prev_mirror, steps = queue.popleft()\n        if grid[y][x] == 'D':\n            return True\n        for dx, dy in get_neighbors(x, y, w, h):\n            if is_valid(dx, dy, w, h) and (dx, dy) not in visited:\n                beam = get_beam(dx, dy, w, h, grid)\n                if beam:\n                    queue.append((dx, dy, beam, None, steps + 1))\n                    visited.add((dx, dy, beam, None, steps + 1))\n                beam = get_reflected_beam(dx, dy, w, h, grid, beam)\n                if beam:\n                    queue.append((dx, dy, beam, None, steps + 1))\n                    visited.add((dx, dy, beam, None, steps + 1))\n                beams = get_split_beams(dx, dy, w, h, grid, beam)\n                for b in beams:\n                    queue.append((dx, dy, b, None, steps + 1))\n                    visited.add((dx, dy, b, None, steps + 1))\n                beam = get_statue_beam(dx, dy, w, h, grid, beam)\n                if beam:\n                    queue.append((dx, dy, beam, None, steps + 1))\n                    visited.add((dx, dy, beam, None, steps + 1))\n                if prev_beam:\n                    queue.append((dx, dy, prev_beam, grid[y][x], steps + 1))\n                    visited.add((dx, dy, prev_beam, grid[y][x], steps + 1))\n    return False\n\ndef solve(w, h, grid):\n    return bfs(w, h, grid)\n\ndef main():\n    w, h = map(int, input().split())\n    grid = [list(input()) for _ in range(h)]\n    if solve(w, h, grid):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}