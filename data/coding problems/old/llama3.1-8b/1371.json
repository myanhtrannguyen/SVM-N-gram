{
    "solution_id": "llama3.1-8b-1371",
    "problem_id": "p00879",
    "language": "Python",
    "solution": "```python\nimport re\nimport math\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef parse_molecule(molecule):\n    elements = {}\n    i = 0\n    while i < len(molecule):\n        if molecule[i].isupper():\n            j = i\n            while j < len(molecule) and molecule[j].isupper() or molecule[j].islower():\n                j += 1\n            element = molecule[i:j]\n            i = j\n            if element in elements:\n                elements[element] += 1\n            else:\n                elements[element] = 1\n        elif molecule[i].isdigit():\n            j = i\n            while j < len(molecule) and molecule[j].isdigit():\n                j += 1\n            count = int(molecule[i:j])\n            i = j\n            if element in elements:\n                elements[element] += count\n            else:\n                elements[element] = count\n        elif molecule[i] == '(':\n            j = i + 1\n            while j < len(molecule) and molecule[j] != ')':\n                j += 1\n            sub_molecule = molecule[i+1:j]\n            sub_elements = parse_molecule(sub_molecule)\n            for element, count in sub_elements.items():\n                if element in elements:\n                    elements[element] += count\n                else:\n                    elements[element] = count\n            i = j + 1\n        else:\n            i += 1\n    return elements\n\ndef find_coefficients(left, right):\n    left_elements = parse_molecule(left)\n    right_elements = parse_molecule(right)\n    coefficients = []\n    for element in left_elements:\n        if element in right_elements:\n            coefficients.append(left_elements[element] // right_elements[element])\n        else:\n            coefficients.append(0)\n    for element in right_elements:\n        if element not in left_elements:\n            coefficients.append(-right_elements[element])\n    return coefficients\n\ndef main():\n    while True:\n        line = input()\n        if line == '.':\n            break\n        left, right = line.split('->')\n        coefficients = find_coefficients(left, right)\n        for coefficient in coefficients:\n            if coefficient != 0:\n                print(coefficient, end=' ')\n        print()\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}