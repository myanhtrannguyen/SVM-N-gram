{
    "solution_id": "llama3.1-8b-3284",
    "problem_id": "p01825",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define N 300\n#define INF 1e9\n\ntypedef struct {\n    int x1, y1, x2, y2;\n} Segment;\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    int x, y;\n    double dist;\n} Node;\n\nint n;\nPoint start;\nSegment segments[N];\nNode nodes[N * 2];\nint nodes_num;\n\nvoid add_node(int x, int y) {\n    nodes[nodes_num].x = x;\n    nodes[nodes_num].y = y;\n    nodes[nodes_num].dist = 0;\n    nodes_num++;\n}\n\nvoid add_edge(int u, int v, double w) {\n    nodes[u].dist += w;\n    nodes[v].dist += w;\n}\n\nvoid dijkstra(int s) {\n    for (int i = 0; i < nodes_num; i++) {\n        nodes[i].dist = INF;\n    }\n    nodes[s].dist = 0;\n    for (int i = 0; i < nodes_num; i++) {\n        int u = -1;\n        double min_dist = INF;\n        for (int j = 0; j < nodes_num; j++) {\n            if (nodes[j].dist < min_dist) {\n                min_dist = nodes[j].dist;\n                u = j;\n            }\n        }\n        for (int j = 0; j < nodes_num; j++) {\n            if (nodes[j].dist < INF && nodes[j].x == nodes[u].x && nodes[j].y == nodes[u].y + 1) {\n                add_edge(u, j, 1);\n            }\n            if (nodes[j].dist < INF && nodes[j].x == nodes[u].x && nodes[j].y == nodes[u].y - 1) {\n                add_edge(u, j, 1);\n            }\n            if (nodes[j].dist < INF && nodes[j].x == nodes[u].x + 1 && nodes[j].y == nodes[u].y) {\n                add_edge(u, j, 1);\n            }\n            if (nodes[j].dist < INF && nodes[j].x == nodes[u].x - 1 && nodes[j].y == nodes[u].y) {\n                add_edge(u, j, 1);\n            }\n        }\n        nodes[u].dist = INF;\n    }\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    scanf(\"%d %d\", &start.x, &start.y);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d %d %d\", &segments[i].x1, &segments[i].y1, &segments[i].x2, &segments[i].y2);\n    }\n    for (int i = 0; i < n; i++) {\n        add_node(segments[i].x1, segments[i].y1);\n        add_node(segments[i].x2, segments[i].y2);\n        add_edge(segments[i].x1, segments[i].x2, hypot(segments[i].x2 - segments[i].x1, segments[i].y2 - segments[i].y1));\n    }\n    for (int i = 0; i < n; i++) {\n        if (start.x == segments[i].x1 && start.y == segments[i].y1) {\n            add_edge(segments[i].x1, segments[i].x2, 0);\n        }\n        if (start.x == segments[i].x2 && start.y == segments[i].y2) {\n            add_edge(segments[i].x1, segments[i].x2, 0);\n        }\n    }\n    dijkstra(0);\n    double ans = nodes[0].dist;\n    for (int i = 0; i < n; i++) {\n        ans += hypot(segments[i].x1 - segments[i].x2, segments[i].y1 - segments[i].y2);\n    }\n    printf(\"%.10lf\\n\", ans);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}