{
    "solution_id": "llama3.1-8b-3701",
    "problem_id": "p02246",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nstruct State {\n    vector<vector<int>> board;\n    int steps;\n};\n\nbool isGoal(const vector<vector<int>>& board) {\n    for (int i = 0; i < 4; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            if (board[i][j] != i * 4 + j + 1 && board[i][j] != 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nbool isValidMove(const vector<vector<int>>& board, int x, int y) {\n    if (x < 0 || x >= 4 || y < 0 || y >= 4) {\n        return false;\n    }\n    if (board[x][y] == 0) {\n        return true;\n    }\n    return false;\n}\n\nvoid printBoard(const vector<vector<int>>& board) {\n    for (int i = 0; i < 4; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            cout << board[i][j] << \" \";\n        }\n        cout << endl;\n    }\n}\n\nvector<vector<int>> getNeighbors(const vector<vector<int>>& board) {\n    vector<vector<int>> neighbors;\n    int x, y;\n    for (int i = 0; i < 4; ++i) {\n        for (int j = 0; j < 4; ++j) {\n            if (board[i][j] == 0) {\n                x = i;\n                y = j;\n                break;\n            }\n        }\n    }\n    if (isValidMove(board, x - 1, y)) {\n        vector<vector<int>> temp = board;\n        swap(temp[x - 1][y], temp[x][y]);\n        neighbors.push_back(temp);\n    }\n    if (isValidMove(board, x + 1, y)) {\n        vector<vector<int>> temp = board;\n        swap(temp[x + 1][y], temp[x][y]);\n        neighbors.push_back(temp);\n    }\n    if (isValidMove(board, x, y - 1)) {\n        vector<vector<int>> temp = board;\n        swap(temp[x][y - 1], temp[x][y]);\n        neighbors.push_back(temp);\n    }\n    if (isValidMove(board, x, y + 1)) {\n        vector<vector<int>> temp = board;\n        swap(temp[x][y + 1], temp[x][y]);\n        neighbors.push_back(temp);\n    }\n    return neighbors;\n}\n\nint main() {\n    vector<vector<int>> board;\n    for (int i = 0; i < 4; ++i) {\n        vector<int> row;\n        for (int j = 0; j < 4; ++j) {\n            int temp;\n            cin >> temp;\n            row.push_back(temp);\n        }\n        board.push_back(row);\n    }\n    queue<State> q;\n    q.push({board, 0});\n    set<string> visited;\n    while (!q.empty()) {\n        State state = q.front();\n        q.pop();\n        string key;\n        for (int i = 0; i < 4; ++i) {\n            for (int j = 0; j < 4; ++j) {\n                key += to_string(state.board[i][j]);\n            }\n        }\n        if (visited.find(key) == visited.end()) {\n            visited.insert(key);\n            if (isGoal(state.board)) {\n                cout << state.steps << endl;\n                return 0;\n            }\n            vector<vector<int>> neighbors = getNeighbors(state.board);\n            for (const auto& neighbor : neighbors) {\n                q.push({neighbor, state.steps + 1});\n            }\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}