{
    "solution_id": "llama3.1-8b-1071",
    "problem_id": "p00804",
    "language": "Python",
    "solution": "```python\nfrom collections import defaultdict\nimport sys\n\nclass Market:\n    def __init__(self):\n        self.deals = defaultdict(list)\n        self.dealer_info = defaultdict(lambda: [0, 0])\n\n    def process_order(self, name, order_type, commodity, price):\n        if order_type == 'BUY':\n            self.deals[commodity].append((price, name))\n        else:\n            self.deals[commodity].append((price, name))\n\n    def process_deals(self):\n        for commodity in self.deals:\n            self.deals[commodity].sort()\n            buy_prices = [price for price, _ in self.deals[commodity]]\n            sell_prices = [price for _, price in self.deals[commodity]]\n            if buy_prices and sell_prices:\n                min_sell_price = min(sell_prices)\n                max_buy_price = max(buy_prices)\n                while sell_prices and buy_prices and min_sell_price <= max_buy_price:\n                    sell_price, seller = self.deals[commodity].pop(0)\n                    buy_price, buyer = self.deals[commodity].pop()\n                    self.dealer_info[seller][1] += buy_price\n                    self.dealer_info[buyer][0] += sell_price\n                    min_sell_price = min(sell_prices)\n                    max_buy_price = max(buy_prices)\n\n    def print_results(self):\n        for commodity in sorted(self.deals.keys()):\n            buy_prices = [price for price, _ in self.deals[commodity]]\n            sell_prices = [price for _, price in self.deals[commodity]]\n            if buy_prices and sell_prices:\n                min_sell_price = min(sell_prices)\n                max_buy_price = max(buy_prices)\n                while sell_prices and buy_prices and min_sell_price <= max_buy_price:\n                    sell_price, _ = self.deals[commodity].pop(0)\n                    buy_price, _ = self.deals[commodity].pop()\n                    min_sell_price = min(sell_prices)\n                    max_buy_price = max(buy_prices)\n                avg_price = (max(buy_prices) + min(sell_prices)) // 2\n                print(f\"{commodity} {min(sell_prices)} {avg_price} {max(buy_prices)}\")\n            else:\n                print(f\"{commodity} - - -\")\n\n        print(\"-\")\n        for dealer in sorted(self.dealer_info.keys()):\n            print(f\"{dealer} {self.dealer_info[dealer][0]} {self.dealer_info[dealer][1]}\")\n        print(\"-\")\n\ndef main():\n    market = Market()\n    for line in sys.stdin:\n        line = line.strip()\n        if line == '0':\n            break\n        name, order_type, commodity, price = line.split()\n        price = int(price)\n        market.process_order(name, order_type, commodity, price)\n    market.process_deals()\n    market.print_results()\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}