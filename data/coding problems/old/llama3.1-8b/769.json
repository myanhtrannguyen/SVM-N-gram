{
    "solution_id": "llama3.1-8b-769",
    "problem_id": "p00729",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <algorithm>\n\nusing namespace std;\n\nstruct Record {\n    int time;\n    int pc;\n    int student;\n    int type;\n};\n\nstruct Query {\n    int start;\n    int end;\n    int student;\n};\n\nint main() {\n    int n, m, r, q;\n    cin >> n >> m >> r >> q;\n\n    vector<Record> records;\n    for (int i = 0; i < r; i++) {\n        int time, pc, student, type;\n        cin >> time >> pc >> student >> type;\n        records.push_back({time, pc, student, type});\n    }\n\n    vector<Query> queries;\n    for (int i = 0; i < q; i++) {\n        int start, end, student;\n        cin >> start >> end >> student;\n        queries.push_back({start, end, student});\n    }\n\n    vector<int> studentPcs(m + 1);\n    for (const auto& record : records) {\n        if (record.type == 1) {\n            studentPcs[record.student].push_back(record.pc);\n        } else {\n            auto it = find(studentPcs[record.student].begin(), studentPcs[record.student].end(), record.pc);\n            studentPcs[record.student].erase(it);\n        }\n    }\n\n    for (const auto& query : queries) {\n        int time = 0;\n        for (int pc : studentPcs[query.student]) {\n            auto it = lower_bound(records.begin(), records.end(), (Record){query.start, 0, 0, 0}, [](const Record& a, const Record& b) {\n                return a.time < b.time;\n            });\n            while (it != records.end() && it->time < query.end) {\n                if (it->pc == pc && it->type == 1) {\n                    time += query.end - it->time;\n                    it = next(it);\n                } else if (it->pc == pc && it->type == 0) {\n                    it = next(it);\n                } else {\n                    it = next(it);\n                }\n            }\n        }\n        cout << time << endl;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}