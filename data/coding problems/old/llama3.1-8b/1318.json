{
    "solution_id": "llama3.1-8b-1318",
    "problem_id": "p00866",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Watch {\n        int h, m, s;\n        int[] pos;\n\n        public Watch(int h, int m, int s) {\n            this.h = h;\n            this.m = m;\n            this.s = s;\n            this.pos = new int[3];\n            this.pos[0] = h;\n            this.pos[1] = m;\n            this.pos[2] = s;\n        }\n\n        public Watch rotate(int d) {\n            int[] newpos = new int[3];\n            for (int i = 0; i < 3; i++) {\n                newpos[i] = (pos[i] + d) % 60;\n            }\n            return new Watch(newpos[0], newpos[1], newpos[2]);\n        }\n\n        public Watch permute(int[] p) {\n            int[] newpos = new int[3];\n            for (int i = 0; i < 3; i++) {\n                newpos[i] = pos[p[i]];\n            }\n            return new Watch(newpos[0], newpos[1], newpos[2]);\n        }\n\n        public boolean equals(Watch other) {\n            return Arrays.equals(pos, other.pos);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            Watch[] watches = new Watch[n];\n            for (int i = 0; i < n; i++) {\n                String[] line = br.readLine().split(\" \");\n                watches[i] = new Watch(Integer.parseInt(line[0]), Integer.parseInt(line[1]), Integer.parseInt(line[2]));\n            }\n            Set<Watch> set = new HashSet<>();\n            for (int i = 0; i < n; i++) {\n                set.add(watches[i]);\n                for (int j = 0; j < 60; j++) {\n                    set.add(watches[i].rotate(j));\n                }\n                int[] p = {0, 1, 2};\n                Arrays.sort(p);\n                for (int j = 0; j < 3; j++) {\n                    for (int k = j + 1; k < 3; k++) {\n                        for (int l = k + 1; l < 3; l++) {\n                            set.add(watches[i].permute(p));\n                            p[j] = p[j] == 0 ? 1 : 0;\n                            p[k] = p[k] == 1 ? 2 : 1;\n                            p[l] = p[l] == 2 ? 0 : 2;\n                        }\n                    }\n                }\n            }\n            int[] start = new int[3];\n            int[] end = new int[3];\n            for (int i = 0; i < 3; i++) {\n                start[i] = 0;\n                end[i] = 59;\n            }\n            int min = Integer.MAX_VALUE;\n            for (int i = 0; i < 60; i++) {\n                for (int j = 0; j < 60; j++) {\n                    for (int k = 0; k < 60; k++) {\n                        Watch watch = new Watch(i, j, k);\n                        boolean flag = true;\n                        for (Watch w : set) {\n                            if (!w.equals(watch)) {\n                                flag = false;\n                                break;\n                            }\n                        }\n                        if (flag) {\n                            if (i < start[0] || (i == start[0] && j < start[1]) || (i == start[0] && j == start[1] && k < start[2])) {\n                                start[0] = i;\n                                start[1] = j;\n                                start[2] = k;\n                            }\n                            if (i > end[0] || (i == end[0] && j > end[1]) || (i == end[0] && j == end[1] && k > end[2])) {\n                                end[0] = i;\n                                end[1] = j;\n                                end[2] = k;\n                            }\n                            if (i < end[0] && j < end[1] && k < end[2]) {\n                                min = Math.min(min, (end[0] - start[0]) * 3600 + (end[1] - start[1]) * 60 + (end[2] - start[2]));\n                            }\n                        }\n                    }\n                }\n            }\n            if (min == Integer.MAX_VALUE) {\n                System.out.println(\"00:00:00 00:00:00\");\n            } else {\n                int h = (start[0] + end[0]) / 2;\n                int m = (start[1] + end[1]) / 2;\n                int s = (start[2] + end[2]) / 2;\n                System.out.println(String.format(\"%02d:%02d:%02d %02d:%02d:%02d\", start[0], start[1], start[2], end[0], end[1], end[2]));\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}