{
    "solution_id": "llama3.1-8b-3222",
    "problem_id": "p01792",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static final int MAX = 200;\n    static final double EPS = 1e-6;\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int p = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n        int n = Integer.parseInt(st.nextToken());\n\n        double maxProb = 0;\n        int minBet = 1;\n        int maxBet = m;\n        int optBets = 0;\n\n        while (minBet <= maxBet) {\n            int mid = (minBet + maxBet) / 2;\n            double prob = 0;\n            double cur = m;\n            int curBet = mid;\n\n            while (cur < n) {\n                prob += 1.0 * p / 100 * (1 - prob);\n                cur += curBet;\n                if (cur < n) {\n                    curBet *= 2;\n                }\n            }\n\n            if (prob - EPS > maxProb) {\n                maxProb = prob;\n                optBets = 1;\n                minBet = mid + 1;\n            } else if (prob - EPS == maxProb) {\n                optBets++;\n                minBet = mid + 1;\n            } else {\n                maxBet = mid - 1;\n            }\n        }\n\n        System.out.printf(\"%.6f\\n\", maxProb);\n        System.out.println(optBets);\n\n        if (optBets <= MAX) {\n            List<Integer> bets = new ArrayList<>();\n            double cur = m;\n            int curBet = minBet;\n\n            while (cur < n) {\n                cur += curBet;\n                bets.add(curBet);\n                curBet *= 2;\n            }\n\n            Collections.sort(bets);\n            for (int bet : bets) {\n                System.out.print(bet + \" \");\n            }\n            System.out.println();\n        } else {\n            List<Integer> smallBets = new ArrayList<>();\n            List<Integer> largeBets = new ArrayList<>();\n            double cur = m;\n            int curBet = minBet;\n\n            while (cur < n) {\n                cur += curBet;\n                if (curBet <= 100) {\n                    smallBets.add(curBet);\n                } else {\n                    largeBets.add(curBet);\n                }\n                curBet *= 2;\n            }\n\n            Collections.sort(smallBets);\n            Collections.sort(largeBets);\n            for (int bet : smallBets) {\n                System.out.print(bet + \" \");\n            }\n            for (int i = smallBets.size() - 1; i >= 0; i--) {\n                System.out.print(smallBets.get(i) + \" \");\n            }\n            for (int i = largeBets.size() - 1; i >= 0; i--) {\n                System.out.print(largeBets.get(i) + \" \");\n            }\n            System.out.println();\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}