{
    "solution_id": "llama3.1-8b-566",
    "problem_id": "p00655",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Query {\n        int type;\n        int x;\n        int i;\n\n        public Query(int type, int x, int i) {\n            this.type = type;\n            this.x = x;\n            this.i = i;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            List<Query> queries = new ArrayList<>();\n            String[] line;\n            while ((line = br.readLine()) != null) {\n                if (line.length == 0) continue;\n                if (line[0].equals(\"0\")) {\n                    queries.add(new Query(0, Integer.parseInt(line[1]), 0));\n                } else if (line[0].equals(\"1\")) {\n                    queries.add(new Query(1, 0, 0));\n                } else if (line[0].equals(\"2\")) {\n                    queries.add(new Query(2, 0, 0));\n                } else if (line[0].equals(\"3\")) {\n                    queries.add(new Query(3, 0, 0));\n                } else if (line[0].equals(\"4\")) {\n                    queries.add(new Query(4, Integer.parseInt(line[1]), 0));\n                } else if (line[0].equals(\"5\")) {\n                    queries.add(new Query(5, Integer.parseInt(line[1]), 0));\n                } else if (line[0].equals(\"6\")) {\n                    queries.add(new Query(6, 0, 0));\n                } else if (line[0].equals(\"7\")) {\n                    queries.add(new Query(7, 0, 0));\n                } else if (line[0].equals(\"8\")) {\n                    queries.add(new Query(8, Integer.parseInt(line[1]), 0));\n                } else if (line[0].equals(\"9\")) {\n                    queries.add(new Query(9, Integer.parseInt(line[1]), 0));\n                }\n            }\n            solve(queries);\n        }\n    }\n\n    static void solve(List<Query> queries) {\n        int n = 0;\n        TreeSet<Integer> set = new TreeSet<>();\n        for (Query query : queries) {\n            if (query.type == 0) {\n                set.add(query.x);\n                n++;\n            } else if (query.type == 1) {\n                if (n == 0) continue;\n                int mid = n / 2;\n                if (n % 2 == 0) {\n                    set.remove(set.higher(set.first()));\n                } else {\n                    set.remove(set.higher(set.higher(set.first())));\n                }\n                n--;\n                System.out.println(set.higher(set.first()));\n            } else if (query.type == 2) {\n                if (n == 0) continue;\n                int mid = n / 2;\n                if (n % 2 == 0) {\n                    System.out.println(set.higher(set.first()));\n                } else {\n                    System.out.println(set.higher(set.higher(set.first())));\n                }\n            } else if (query.type == 3) {\n                if (n == 0) continue;\n                int mid = n / 2;\n                if (n % 2 == 0) {\n                    System.out.println(set.lower(set.last()));\n                } else {\n                    System.out.println(set.lower(set.lower(set.last())));\n                }\n            } else if (query.type == 4) {\n                List<Integer> list = new ArrayList<>(set);\n                Collections.sort(list);\n                int i = query.i;\n                int ans = 0;\n                for (int j = 0; j < i; j++) {\n                    ans = list.get(j);\n                }\n                System.out.println(ans);\n            } else if (query.type == 5) {\n                List<Integer> list = new ArrayList<>(set);\n                Collections.sort(list);\n                Collections.reverse(list);\n                int i = query.i;\n                int ans = 0;\n                for (int j = 0; j < i; j++) {\n                    ans = list.get(j);\n                }\n                System.out.println(ans);\n            } else if (query.type == 6) {\n                if (n == 0) continue;\n                int mid = n / 2;\n                if (n % 2 == 0) {\n                    System.out.println(set.last());\n                } else {\n                    System.out.println(set.lower(set.last()));\n                }\n            } else if (query.type == 7) {\n                if (n == 0) continue;\n                int mid = n / 2;\n                if (n % 2 == 0) {\n                    System.out.println(set.first());\n                } else {\n                    System.out.println(set.lower(set.first()));\n                }\n            } else if (query.type == 8) {\n                List<Integer> list = new ArrayList<>(set);\n                Collections.sort(list);\n                Collections.reverse(list);\n                int i = query.i;\n                int ans = 0;\n                for (int j = 0; j < i; j++) {\n                    ans = list.get(j);\n                }\n                System.out.println(ans);\n            } else if (query.type == 9) {\n                List<Integer> list = new ArrayList<>(set);\n                Collections.sort(list);\n                int i = query.i;\n                int ans = 0;\n                for (int j = 0; j < i; j++) {\n                    ans = list.get(j);\n                }\n                System.out.println(ans);\n            }\n        }\n        System.out.println(\"end\");\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}