{
    "solution_id": "llama3.1-8b-337",
    "problem_id": "p00395",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <queue>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nconst int MAX_W = 1000;\nconst int MAX_H = 1000;\nconst int MAX_N = 10;\n\nstruct State {\n    int x, y, items[MAX_N], score;\n    bool visited;\n};\n\nint main() {\n    int w, h;\n    cin >> w >> h;\n\n    vector<string> maze(h);\n    for (int i = 0; i < h; i++) {\n        cin >> maze[i];\n    }\n\n    vector<vector<int>> scores(MAX_N, vector<int>(MAX_N));\n    for (int i = 0; i < MAX_N; i++) {\n        for (int j = 0; j < MAX_N; j++) {\n            cin >> scores[i][j];\n        }\n    }\n\n    int sx, sy, tx, ty;\n    for (int i = 0; i < h; i++) {\n        for (int j = 0; j < w; j++) {\n            if (maze[i][j] == 'S') {\n                sx = i;\n                sy = j;\n            } else if (maze[i][j] == 'T') {\n                tx = i;\n                ty = j;\n            } else if (maze[i][j] >= '0' && maze[i][j] <= '9') {\n                int item = maze[i][j] - '0';\n                for (int k = 0; k < MAX_N; k++) {\n                    if (maze[i][j] == k + '0') {\n                        scores[item][k] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    for (int i = 0; i < MAX_N; i++) {\n        for (int j = 0; j < MAX_N; j++) {\n            if (scores[i][j] == 0) {\n                scores[i][j] = 100;\n            }\n        }\n    }\n\n    queue<State> q;\n    q.push({sx, sy, {0}, 0, false});\n\n    vector<vector<bool>> visited(h, vector<bool>(w, false));\n    visited[sx][sy] = true;\n\n    int min_moves = -1;\n    int max_score = -1;\n\n    while (!q.empty()) {\n        State state = q.front();\n        q.pop();\n\n        if (state.x == tx && state.y == ty) {\n            if (state.items[MAX_N - 1] == MAX_N - 1) {\n                if (min_moves == -1 || state.score > max_score) {\n                    min_moves = state.score;\n                    max_score = state.score;\n                }\n            }\n        }\n\n        for (int dx = -1; dx <= 1; dx++) {\n            for (int dy = -1; dy <= 1; dy++) {\n                if (abs(dx) + abs(dy) != 1) {\n                    continue;\n                }\n\n                int nx = state.x + dx;\n                int ny = state.y + dy;\n\n                if (nx < 0 || nx >= h || ny < 0 || ny >= w) {\n                    continue;\n                }\n\n                if (maze[nx][ny] == '#' || maze[nx][ny] == 'T') {\n                    continue;\n                }\n\n                int item = -1;\n                if (maze[nx][ny] >= 'A' && maze[nx][ny] <= 'J') {\n                    item = maze[nx][ny] - 'A';\n                } else if (maze[nx][ny] >= 'a' && maze[nx][ny] <= 'j') {\n                    item = maze[nx][ny] - 'a';\n                } else if (maze[nx][ny] >= '0' && maze[nx][ny] <= '9') {\n                    item = maze[nx][ny] - '0';\n                }\n\n                if (item != -1) {\n                    if (state.items[item] == 0) {\n                        if (item < MAX_N - 1) {\n                            int score = state.score + scores[state.items[item]][item];\n                            q.push({nx, ny, state.items, score, false});\n                        }\n                    } else {\n                        int score = state.score + scores[state.items[item]][item];\n                        q.push({nx, ny, state.items, score, false});\n                    }\n                } else {\n                    q.push({nx, ny, state.items, state.score, false});\n                }\n\n                if (!visited[nx][ny]) {\n                    visited[nx][ny] = true;\n                }\n            }\n        }\n    }\n\n    if (min_moves == -1) {\n        cout << -1 << endl;\n    } else {\n        cout << min_moves << \" \" << max_score << endl;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}