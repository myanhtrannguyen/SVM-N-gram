{
    "solution_id": "llama3.1-8b-3698",
    "problem_id": "p02245",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class Node {\n        int[][] state;\n        int steps;\n        int[][] parent;\n\n        public Node(int[][] state, int steps, int[][] parent) {\n            this.state = state;\n            this.steps = steps;\n            this.parent = parent;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int[][] initialState = new int[3][3];\n        for (int i = 0; i < 3; i++) {\n            String[] row = scanner.nextLine().split(\" \");\n            for (int j = 0; j < 3; j++) {\n                initialState[i][j] = Integer.parseInt(row[j]);\n            }\n        }\n        System.out.println(solvePuzzle(initialState));\n    }\n\n    public static int solvePuzzle(int[][] initialState) {\n        Queue<Node> queue = new LinkedList<>();\n        Set<String> visited = new HashSet<>();\n        queue.add(new Node(initialState, 0, null));\n        visited.add(Arrays.deepToString(initialState));\n\n        while (!queue.isEmpty()) {\n            Node node = queue.poll();\n            if (isGoal(node.state)) {\n                return node.steps;\n            }\n\n            int[][] neighbors = getNeighbors(node.state);\n            for (int[][] neighbor : neighbors) {\n                if (!visited.contains(Arrays.deepToString(neighbor))) {\n                    queue.add(new Node(neighbor, node.steps + 1, node.state));\n                    visited.add(Arrays.deepToString(neighbor));\n                }\n            }\n        }\n\n        return -1;\n    }\n\n    public static boolean isGoal(int[][] state) {\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (state[i][j] != 0 && state[i][j] != (i * 3 + j + 1)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    public static int[][] getNeighbors(int[][] state) {\n        int[][] neighbors = new int[4][3][3];\n        int zeroIndex = -1;\n        for (int i = 0; i < 3; i++) {\n            for (int j = 0; j < 3; j++) {\n                if (state[i][j] == 0) {\n                    zeroIndex = i * 3 + j;\n                    break;\n                }\n            }\n            if (zeroIndex != -1) {\n                break;\n            }\n        }\n\n        if (zeroIndex % 3 != 0) {\n            neighbors[0] = swap(state, zeroIndex, zeroIndex - 1);\n        }\n        if (zeroIndex % 3 != 2) {\n            neighbors[1] = swap(state, zeroIndex, zeroIndex + 1);\n        }\n        if (zeroIndex >= 3) {\n            neighbors[2] = swap(state, zeroIndex, zeroIndex - 3);\n        }\n        if (zeroIndex < 6) {\n            neighbors[3] = swap(state, zeroIndex, zeroIndex + 3);\n        }\n\n        return neighbors;\n    }\n\n    public static int[][] swap(int[][] state, int i, int j) {\n        int[][] newState = new int[3][3];\n        for (int k = 0; k < 3; k++) {\n            for (int l = 0; l < 3; l++) {\n                newState[k][l] = state[k][l];\n            }\n        }\n        int temp = newState[i / 3][i % 3];\n        newState[i / 3][i % 3] = newState[j / 3][j % 3];\n        newState[j / 3][j % 3] = temp;\n        return newState;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}