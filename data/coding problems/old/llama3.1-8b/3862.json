{
    "solution_id": "llama3.1-8b-3862",
    "problem_id": "p02286",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\nclass Node {\n    int key;\n    int priority;\n    Node left;\n    Node right;\n\n    public Node(int key, int priority) {\n        this.key = key;\n        this.priority = priority;\n        this.left = null;\n        this.right = null;\n    }\n}\n\npublic class Treap {\n    public static Node insert(Node t, int key, int priority) {\n        if (t == null) {\n            return new Node(key, priority);\n        }\n        if (key == t.key) {\n            return t;\n        }\n        if (key < t.key) {\n            t.left = insert(t.left, key, priority);\n            if (t.priority < t.left.priority) {\n                t = rightRotate(t);\n            }\n        } else {\n            t.right = insert(t.right, key, priority);\n            if (t.priority < t.right.priority) {\n                t = leftRotate(t);\n            }\n        }\n        return t;\n    }\n\n    public static Node delete(Node t, int key) {\n        if (t == null) {\n            return null;\n        }\n        if (key < t.key) {\n            t.left = delete(t.left, key);\n        } else if (key > t.key) {\n            t.right = delete(t.right, key);\n        } else {\n            if (t.left == null && t.right == null) {\n                return null;\n            } else if (t.left == null) {\n                return rightRotate(t);\n            } else if (t.right == null) {\n                return leftRotate(t);\n            } else {\n                if (t.left.priority > t.right.priority) {\n                    t = rightRotate(t);\n                } else {\n                    t = leftRotate(t);\n                }\n                t = delete(t, key);\n            }\n        }\n        return t;\n    }\n\n    public static Node leftRotate(Node t) {\n        Node s = t.right;\n        t.right = s.left;\n        s.left = t;\n        return s;\n    }\n\n    public static Node rightRotate(Node t) {\n        Node s = t.left;\n        t.left = s.right;\n        s.right = t;\n        return s;\n    }\n\n    public static void printInorder(Node t) {\n        if (t != null) {\n            printInorder(t.left);\n            System.out.print(t.key + \" \");\n            printInorder(t.right);\n        }\n    }\n\n    public static void printPreorder(Node t) {\n        if (t != null) {\n            System.out.print(t.key + \" \");\n            printPreorder(t.left);\n            printPreorder(t.right);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int m = scanner.nextInt();\n        Node root = null;\n        while (m-- > 0) {\n            String op = scanner.next();\n            if (op.equals(\"insert\")) {\n                int key = scanner.nextInt();\n                int priority = scanner.nextInt();\n                root = insert(root, key, priority);\n            } else if (op.equals(\"find\")) {\n                int key = scanner.nextInt();\n                boolean found = false;\n                while (root != null) {\n                    if (key == root.key) {\n                        found = true;\n                        break;\n                    } else if (key < root.key) {\n                        root = root.left;\n                    } else {\n                        root = root.right;\n                    }\n                }\n                System.out.println(found ? \"yes\" : \"no\");\n            } else if (op.equals(\"delete\")) {\n                int key = scanner.nextInt();\n                root = delete(root, key);\n            } else if (op.equals(\"print\")) {\n                System.out.print(\"Inorder: \");\n                printInorder(root);\n                System.out.println();\n                System.out.print(\"Preorder: \");\n                printPreorder(root);\n                System.out.println();\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}