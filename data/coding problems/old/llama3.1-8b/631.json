{
    "solution_id": "llama3.1-8b-631",
    "problem_id": "p00694",
    "language": "Python",
    "solution": "```python\nimport sys\nimport re\n\ndef parse_key_description(description):\n    lines = description.split('\\n')\n    n = int(lines[0])\n    elements = []\n    for line in lines[1:]:\n        elements.extend(re.findall(r'\\d+|[+-][xyz]', line))\n    return n, elements\n\ndef build_graph(n, elements):\n    graph = {}\n    for i in range(0, len(elements), n):\n        path = elements[i:i+n]\n        label = int(path[0])\n        graph.setdefault(label, []).append(path[1:])\n    return graph\n\ndef dfs(graph, start, visited, path):\n    visited.add(start)\n    path.append(start)\n    for neighbor in graph[start]:\n        if neighbor not in visited:\n            dfs(graph, neighbor, visited, path)\n    return path\n\ndef are_same_key(description1, description2):\n    n1, elements1 = parse_key_description(description1)\n    n2, elements2 = parse_key_description(description2)\n    if n1 != n2:\n        return False\n    graph1 = build_graph(n1, elements1)\n    graph2 = build_graph(n2, elements2)\n    for label in graph1:\n        if label not in graph2:\n            return False\n        path1 = dfs(graph1, label, set(), [])\n        path2 = dfs(graph2, label, set(), [])\n        if path1 != path2:\n            return False\n    return True\n\ndef main():\n    for line in sys.stdin:\n        line = line.strip()\n        if line == '0':\n            break\n        description1, description2 = line.split()\n        if are_same_key(description1, description2):\n            print('SAME')\n        else:\n            print('DIFFERENT')\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}