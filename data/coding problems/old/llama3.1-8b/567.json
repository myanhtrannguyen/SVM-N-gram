{
    "solution_id": "llama3.1-8b-567",
    "problem_id": "p00655",
    "language": "Python",
    "solution": "```python\nimport sys\nimport math\n\nclass FIMO:\n    def __init__(self):\n        self.n = 0\n        self.a = []\n        self.min_first_half = []\n        self.max_first_half = []\n        self.min_latter_half = []\n        self.max_latter_half = []\n\n    def insert(self, x):\n        if self.n == 0:\n            self.a.append(x)\n            self.n += 1\n        else:\n            self.a.append(x)\n            self.n += 1\n            self.a.sort()\n\n    def delete(self):\n        if self.n == 0:\n            return\n        mid = self.n // 2\n        if self.n % 2 == 0:\n            self.a.pop(mid - 1)\n        else:\n            self.a.pop(mid)\n        self.n -= 1\n\n    def get_min_first_half(self):\n        if self.n == 0:\n            return -1\n        mid = math.ceil(self.n / 2)\n        return min(self.a[:mid])\n\n    def get_max_first_half(self):\n        if self.n == 0:\n            return -1\n        mid = math.ceil(self.n / 2)\n        return max(self.a[:mid])\n\n    def get_min_latter_half(self):\n        if self.n == 0:\n            return -1\n        mid = math.ceil(self.n / 2)\n        return min(self.a[mid:])\n\n    def get_max_latter_half(self):\n        if self.n == 0:\n            return -1\n        mid = math.ceil(self.n / 2)\n        return max(self.a[mid:])\n\n    def get_i_th_min_first_half(self, i):\n        if self.n == 0:\n            return -1\n        min_first_half = []\n        while self.n > 0:\n            mid = math.ceil(self.n / 2)\n            min_first_half.append(self.get_min_first_half())\n            self.delete()\n        min_first_half.sort()\n        return min_first_half[i - 1]\n\n    def get_i_th_max_first_half(self, i):\n        if self.n == 0:\n            return -1\n        max_first_half = []\n        while self.n > 0:\n            mid = math.ceil(self.n / 2)\n            max_first_half.append(self.get_max_first_half())\n            self.delete()\n        max_first_half.sort(reverse=True)\n        return max_first_half[i - 1]\n\n    def get_i_th_min_latter_half(self, i):\n        if self.n == 0:\n            return -1\n        min_latter_half = []\n        while self.n > 0:\n            mid = math.ceil(self.n / 2)\n            min_latter_half.append(self.get_min_latter_half())\n            self.delete()\n        min_latter_half.sort()\n        return min_latter_half[i - 1]\n\n    def get_i_th_max_latter_half(self, i):\n        if self.n == 0:\n            return -1\n        max_latter_half = []\n        while self.n > 0:\n            mid = math.ceil(self.n / 2)\n            max_latter_half.append(self.get_max_latter_half())\n            self.delete()\n        max_latter_half.sort(reverse=True)\n        return max_latter_half[i - 1]\n\n    def solve(self, queries):\n        for query in queries:\n            if query[0] == 0:\n                self.insert(query[1])\n            elif query[0] == 1:\n                self.delete()\n                print(self.a[-1])\n            elif query[0] == 2:\n                print(self.get_min_first_half())\n            elif query[0] == 3:\n                print(self.get_min_latter_half())\n            elif query[0] == 4:\n                print(self.get_i_th_min_first_half(query[1]))\n            elif query[0] == 5:\n                print(self.get_i_th_min_latter_half(query[1]))\n            elif query[0] == 6:\n                print(self.get_max_first_half())\n            elif query[0] == 7:\n                print(self.get_max_latter_half())\n            elif query[0] == 8:\n                print(self.get_i_th_max_first_half(query[1]))\n            elif query[0] == 9:\n                print(self.get_i_th_max_latter_half(query[1]))\n\nif __name__ == \"__main__\":\n    f = FIMO()\n    t = int(input())\n    for _ in range(t):\n        queries = []\n        n = int(input())\n        for _ in range(n):\n            query = list(map(int, input().split()))\n            queries.append(query)\n        f.solve(queries)\n        print(\"end\")\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}