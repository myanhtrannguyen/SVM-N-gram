{
    "solution_id": "llama3.1-8b-2954",
    "problem_id": "p01596",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.StringTokenizer;\n\npublic class Main {\n\n    static class Point {\n        double x, y;\n\n        public Point(double x, double y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Line {\n        Point p1, p2;\n        double len;\n\n        public Line(Point p1, Point p2) {\n            this.p1 = p1;\n            this.p2 = p2;\n            this.len = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n        }\n    }\n\n    static class Arc {\n        Point p1, p2, p3;\n        double r;\n\n        public Arc(Point p1, Point p2, Point p3) {\n            this.p1 = p1;\n            this.p2 = p2;\n            this.p3 = p3;\n            this.r = Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));\n        }\n    }\n\n    static class Tangent {\n        Point p;\n        double dir;\n\n        public Tangent(Point p, double dir) {\n            this.p = p;\n            this.dir = dir;\n        }\n    }\n\n    static class Event implements Comparable<Event> {\n        int id;\n        double t;\n        double dir;\n\n        public Event(int id, double t, double dir) {\n            this.id = id;\n            this.t = t;\n            this.dir = dir;\n        }\n\n        @Override\n        public int compareTo(Event o) {\n            if (t == o.t) {\n                return Double.compare(dir, o.dir);\n            }\n            return Double.compare(t, o.t);\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n\n        int n = Integer.parseInt(br.readLine());\n        Point[] points = new Point[n + 1];\n        Line[] lines = new Line[n];\n        Arc[] arcs = new Arc[n];\n        Tangent[] tangents = new Tangent[n + 1];\n\n        for (int i = 1; i <= n; i++) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            points[i] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            points[i + 1] = new Point(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));\n            lines[i - 1] = new Line(points[i], points[i + 1]);\n        }\n\n        for (int i = 1; i <= n; i++) {\n            double x = (points[i].x + points[i + 1].x) / 2;\n            double y = (points[i].y + points[i + 1].y) / 2;\n            double dx = points[i + 1].x - points[i].x;\n            double dy = points[i + 1].y - points[i].y;\n            double dir = Math.atan2(dy, dx);\n            tangents[i] = new Tangent(new Point(x, y), dir);\n        }\n\n        List<Event> events = new ArrayList<>();\n        for (int i = 1; i <= n; i++) {\n            double t = Math.sqrt(Math.pow(points[i + 1].x - points[i].x, 2) + Math.pow(points[i + 1].y - points[i].y, 2)) / lines[i - 1].len;\n            events.add(new Event(i, t, 1));\n            events.add(new Event(i, t, -1));\n        }\n\n        Collections.sort(events);\n\n        double[] dp = new double[n + 1];\n        Arrays.fill(dp, Double.POSITIVE_INFINITY);\n        dp[1] = 0;\n\n        for (Event event : events) {\n            int id = event.id;\n            double t = event.t;\n            double dir = event.dir;\n\n            if (dir == 1) {\n                dp[id] = Math.min(dp[id], dp[id - 1] + lines[id - 1].len);\n                for (int i = 1; i <= n; i++) {\n                    if (i != id - 1 && i != id) {\n                        double dist = Math.sqrt(Math.pow(points[i + 1].x - points[i].x, 2) + Math.pow(points[i + 1].y - points[i].y, 2));\n                        double len = Math.sqrt(Math.pow(points[id].x - points[i].x, 2) + Math.pow(points[id].y - points[i].y, 2));\n                        double newDist = Math.sqrt(Math.pow(points[id].x - points[i + 1].x, 2) + Math.pow(points[id].y - points[i + 1].y, 2));\n                        if (dist <= len && newDist >= len) {\n                            dp[id] = Math.min(dp[id], dp[i] + newDist);\n                        }\n                    }\n                }\n            } else {\n                dp[id] = Math.min(dp[id], dp[id - 1] - lines[id - 1].len);\n                for (int i = 1; i <= n; i++) {\n                    if (i != id - 1 && i != id) {\n                        double dist = Math.sqrt(Math.pow(points[i + 1].x - points[i].x, 2) + Math.pow(points[i + 1].y - points[i].y, 2));\n                        double len = Math.sqrt(Math.pow(points[id].x - points[i].x, 2) + Math.pow(points[id].y - points[i].y, 2));\n                        double newDist = Math.sqrt(Math.pow(points[id].x - points[i + 1].x, 2) + Math.pow(points[id].y - points[i + 1].y, 2));\n                        if (dist >= len && newDist <= len) {\n                            dp[id] = Math.min(dp[id], dp[i] + newDist);\n                        }\n                    }\n                }\n            }\n        }\n\n        double ans = dp[n];\n        for (int i = 1; i <= n; i++) {\n            ans += Math.sqrt(Math.pow(points[i + 1].x - points[i].x, 2) + Math.pow(points[i + 1].y - points[i].y, 2));\n        }\n\n        pw.println(ans);\n\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}