{
    "solution_id": "llama3.1-8b-1043",
    "problem_id": "p00797",
    "language": "Python",
    "solution": "```python\nclass FamilyTree:\n    def __init__(self):\n        self.tree = {}\n        self.names = set()\n\n    def build_tree(self, lines):\n        for line in lines:\n            name = line.strip()\n            self.names.add(name)\n            indent = len(line) - len(line.lstrip())\n            if name not in self.tree:\n                self.tree[name] = {'parent': None, 'children': [], 'siblings': set()}\n            if indent > 0:\n                parent = line[:indent].strip()\n                self.tree[parent]['children'].append(name)\n                self.tree[name]['parent'] = parent\n                self.tree[parent]['siblings'].add(name)\n\n    def check_statement(self, statement):\n        words = statement.split()\n        if words[1] == 'is':\n            words = words[2:]\n        if words[0] == 'a':\n            words = words[1:]\n        if words[0] == 'child':\n            return self.tree[words[1]]['parent'] == words[2]\n        elif words[0] == 'the':\n            return self.tree[words[2]]['parent'] == words[1]\n        elif words[0] == 'a':\n            return self.tree[words[1]]['parent'] in [self.tree[word]['parent'] for word in self.tree[words[2]]['siblings']]\n        elif words[0] == 'is':\n            return self.tree[words[1]]['parent'] == words[2]\n        elif words[0] == 'a':\n            return self.tree[words[1]]['parent'] in self.get_ancestors(words[2])\n        elif words[0] == 'is':\n            return self.tree[words[1]]['parent'] in self.get_ancestors(words[2])\n        else:\n            return False\n\n    def get_ancestors(self, name):\n        ancestors = set()\n        parent = self.tree[name]['parent']\n        while parent is not None:\n            ancestors.add(parent)\n            parent = self.tree[parent]['parent']\n        return ancestors\n\n\ndef main():\n    while True:\n        try:\n            n, m = map(int, input().split())\n            lines = []\n            for _ in range(n):\n                lines.append(input())\n            tree = FamilyTree()\n            tree.build_tree(lines)\n            for _ in range(m):\n                statement = input()\n                print('True' if tree.check_statement(statement) else 'False')\n            print()\n        except ValueError:\n            break\n\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}