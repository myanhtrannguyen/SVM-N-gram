{
    "solution_id": "llama3.1-8b-1068",
    "problem_id": "p00804",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#define MAX_NAME 10\n#define MAX_COMMODITY 1\n#define MAX_PRICE 1000\n\ntypedef struct {\n    char name[MAX_NAME];\n    char type[5];\n    char commodity[MAX_COMMODITY];\n    int price;\n} Order;\n\ntypedef struct {\n    char name[MAX_NAME];\n    int paid;\n    int received;\n} Dealer;\n\ntypedef struct {\n    char commodity[MAX_COMMODITY];\n    int min;\n    int sum;\n    int count;\n    int max;\n} Commodity;\n\nint compare_orders(const void *a, const void *b) {\n    Order *o1 = (Order *)a;\n    Order *o2 = (Order *)b;\n    return strcmp(o1->commodity, o2->commodity);\n}\n\nint compare_dealers(const void *a, const void *b) {\n    Dealer *d1 = (Dealer *)a;\n    Dealer *d2 = (Dealer *)b;\n    return strcmp(d1->name, d2->name);\n}\n\nint compare_commodities(const void *a, const void *b) {\n    Commodity *c1 = (Commodity *)a;\n    Commodity *c2 = (Commodity *)b;\n    return strcmp(c1->commodity, c2->commodity);\n}\n\nint main() {\n    int n;\n    while (scanf(\"%d\", &n) == 1) {\n        if (n == 0) break;\n\n        Order *orders = (Order *)malloc(n * sizeof(Order));\n        Dealer *dealers = (Dealer *)malloc(n * sizeof(Dealer));\n        Commodity *commodities = (Commodity *)malloc(n * sizeof(Commodity));\n\n        for (int i = 0; i < n; i++) {\n            scanf(\"%s %s %s %d\", orders[i].name, orders[i].type, orders[i].commodity, &orders[i].price);\n            strcpy(dealers[i].name, orders[i].name);\n            dealers[i].paid = 0;\n            dealers[i].received = 0;\n            strcpy(commodities[i].commodity, orders[i].commodity);\n            commodities[i].min = orders[i].price;\n            commodities[i].sum = orders[i].price;\n            commodities[i].count = 1;\n            commodities[i].max = orders[i].price;\n        }\n\n        qsort(orders, n, sizeof(Order), compare_orders);\n        qsort(dealers, n, sizeof(Dealer), compare_dealers);\n        qsort(commodities, n, sizeof(Commodity), compare_commodities);\n\n        int market_open = 1;\n        for (int i = 0; i < n; i++) {\n            if (market_open && (orders[i].price < 7 || orders[i].price > 22)) {\n                market_open = 0;\n            }\n            if (market_open) {\n                if (strcmp(orders[i].type, \"BUY\") == 0) {\n                    for (int j = i - 1; j >= 0; j--) {\n                        if (strcmp(orders[j].type, \"SELL\") == 0 && strcmp(orders[i].commodity, orders[j].commodity) == 0 && orders[i].price >= orders[j].price) {\n                            commodities[j].sum -= orders[i].price;\n                            commodities[j].count--;\n                            commodities[j].min = (commodities[j].count == 0) ? 0 : commodities[j].min;\n                            commodities[j].max = (commodities[j].count == 0) ? 0 : commodities[j].max;\n                            commodities[i].sum += orders[i].price;\n                            commodities[i].count++;\n                            commodities[i].min = (commodities[i].count == 0) ? 0 : commodities[i].min;\n                            commodities[i].max = (commodities[i].count == 0) ? 0 : commodities[i].max;\n                            dealers[j].received += orders[i].price;\n                            dealers[i].paid += orders[i].price;\n                            i--;\n                            break;\n                        }\n                    }\n                } else {\n                    for (int j = i - 1; j >= 0; j--) {\n                        if (strcmp(orders[j].type, \"BUY\") == 0 && strcmp(orders[i].commodity, orders[j].commodity) == 0 && orders[i].price <= orders[j].price) {\n                            commodities[j].sum -= orders[i].price;\n                            commodities[j].count--;\n                            commodities[j].min = (commodities[j].count == 0) ? 0 : commodities[j].min;\n                            commodities[j].max = (commodities[j].count == 0) ? 0 : commodities[j].max;\n                            commodities[i].sum += orders[i].price;\n                            commodities[i].count++;\n                            commodities[i].min = (commodities[i].count == 0) ? 0 : commodities[i].min;\n                            commodities[i].max = (commodities[i].count == 0) ? 0 : commodities[i].max;\n                            dealers[j].paid += orders[i].price;\n                            dealers[i].received += orders[i].price;\n                            i--;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (commodities[i].count > 0) {\n                commodities[i].min = (commodities[i].count == 1) ? commodities[i].min : (commodities[i].min + commodities[i].sum - 1) / commodities[i].count;\n                commodities[i].max = (commodities[i].count == 1) ? commodities[i].max : commodities[i].max;\n            }\n        }\n\n        printf(\"%s\\n\", \"--\");\n        for (int i = 0; i < n; i++) {\n            if (commodities[i].count > 0) {\n                printf(\"%s %d %d %d\\n\", commodities[i].commodity, commodities[i].min, commodities[i].min + (commodities[i].max - commodities[i].min) / 2, commodities[i].max);\n            }\n        }\n        printf(\"%s\\n\", \"--\");\n\n        for (int i = 0; i < n; i++) {\n            if (dealers[i].paid > 0 || dealers[i].received > 0) {\n                printf(\"%s %d %d\\n\", dealers[i].name, dealers[i].paid, dealers[i].received);\n            }\n        }\n        printf(\"%s\\n\", \"--\");\n\n        free(orders);\n        free(dealers);\n        free(commodities);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}