{
    "solution_id": "llama3.1-8b-768",
    "problem_id": "p00729",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX_PCS 1000\n#define MAX_STUDENTS 10000\n#define MAX_RECORDS 1000\n#define MAX_QUERIES 50\n\ntypedef struct {\n    int time;\n    int pc;\n    int student;\n    int is_login;\n} Record;\n\ntypedef struct {\n    int start_time;\n    int end_time;\n    int student;\n} Query;\n\nint compare_records(const void *a, const void *b) {\n    Record *record_a = (Record *) a;\n    Record *record_b = (Record *) b;\n    return record_a->time - record_b->time;\n}\n\nint main() {\n    int num_pcs, num_students, num_records, num_queries;\n    scanf(\"%d %d %d %d\", &num_pcs, &num_students, &num_records, &num_queries);\n\n    Record *records = (Record *) malloc(num_records * sizeof(Record));\n    Query *queries = (Query *) malloc(num_queries * sizeof(Query));\n\n    for (int i = 0; i < num_records; i++) {\n        scanf(\"%d %d %d %d %d\", &records[i].time, &records[i].pc, &records[i].student, &records[i].is_login);\n    }\n\n    for (int i = 0; i < num_queries; i++) {\n        scanf(\"%d %d %d\", &queries[i].start_time, &queries[i].end_time, &queries[i].student);\n    }\n\n    qsort(records, num_records, sizeof(Record), compare_records);\n\n    for (int i = 0; i < num_queries; i++) {\n        int student = queries[i].student;\n        int start_time = queries[i].start_time;\n        int end_time = queries[i].end_time;\n        int total_time = 0;\n\n        int pc = -1;\n        int last_login_time = -1;\n        for (int j = 0; j < num_records; j++) {\n            if (records[j].student == student && records[j].time >= start_time && records[j].time <= end_time) {\n                if (records[j].is_login == 1) {\n                    if (pc == -1) {\n                        last_login_time = records[j].time;\n                        pc = records[j].pc;\n                    } else if (pc == records[j].pc) {\n                        last_login_time = records[j].time;\n                    } else {\n                        total_time += records[j].time - last_login_time;\n                        last_login_time = records[j].time;\n                        pc = records[j].pc;\n                    }\n                } else {\n                    if (pc == records[j].pc) {\n                        total_time += records[j].time - last_login_time;\n                        last_login_time = -1;\n                        pc = -1;\n                    }\n                }\n            }\n        }\n\n        if (last_login_time != -1) {\n            total_time += end_time - last_login_time;\n        }\n\n        printf(\"%d\\n\", total_time);\n    }\n\n    free(records);\n    free(queries);\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}