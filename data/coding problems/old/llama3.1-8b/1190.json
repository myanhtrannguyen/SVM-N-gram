{
    "solution_id": "llama3.1-8b-1190",
    "problem_id": "p00834",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        int x, y, z, r;\n        Point(int x, int y, int z, int r) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n            this.r = r;\n        }\n    }\n\n    static class Event implements Comparable<Event> {\n        int type, x, y, z;\n        Event(int type, int x, int y, int z) {\n            this.type = type;\n            this.x = x;\n            this.y = y;\n            this.z = z;\n        }\n\n        public int compareTo(Event e) {\n            if (z != e.z) return z - e.z;\n            if (x != e.x) return x - e.x;\n            if (y != e.y) return y - e.y;\n            return type - e.type;\n        }\n    }\n\n    static class DSU {\n        int[] parent, size;\n        DSU(int n) {\n            parent = new int[n];\n            size = new int[n];\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n                size[i] = 1;\n            }\n        }\n\n        int find(int x) {\n            if (parent[x] != x) parent[x] = find(parent[x]);\n            return parent[x];\n        }\n\n        void union(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX != rootY) {\n                if (size[rootX] > size[rootY]) {\n                    parent[rootY] = rootX;\n                    size[rootX] += size[rootY];\n                } else {\n                    parent[rootX] = rootY;\n                    size[rootY] += size[rootX];\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = 1;\n        while (T-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            Point[] p = new Point[n];\n            for (int i = 0; i < n; i++) {\n                String[] s = br.readLine().split(\" \");\n                p[i] = new Point(Integer.parseInt(s[0]), Integer.parseInt(s[1]), Integer.parseInt(s[2]), Integer.parseInt(s[3]));\n            }\n            List<Event> events = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                events.add(new Event(0, p[i].x - p[i].r, p[i].y, p[i].z - p[i].r));\n                events.add(new Event(1, p[i].x + p[i].r, p[i].y, p[i].z - p[i].r));\n                events.add(new Event(2, p[i].x, p[i].y, p[i].z - p[i].r));\n                events.add(new Event(0, p[i].x - p[i].r, p[i].y, p[i].z + p[i].r));\n                events.add(new Event(1, p[i].x + p[i].r, p[i].y, p[i].z + p[i].r));\n                events.add(new Event(2, p[i].x, p[i].y, p[i].z + p[i].r));\n            }\n            Collections.sort(events);\n            DSU dsu = new DSU(400000);\n            int m = 0;\n            StringBuilder ans = new StringBuilder();\n            for (Event e : events) {\n                if (e.type == 0) {\n                    dsu.union(dsu.find(e.x), dsu.find(e.y));\n                } else if (e.type == 1) {\n                    dsu.union(dsu.find(e.x), dsu.find(e.y));\n                } else {\n                    if (dsu.find(e.x) == dsu.find(e.y)) {\n                        m++;\n                        ans.append('1');\n                    } else {\n                        ans.append('0');\n                    }\n                }\n            }\n            System.out.println(m);\n            System.out.println(ans.toString());\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}