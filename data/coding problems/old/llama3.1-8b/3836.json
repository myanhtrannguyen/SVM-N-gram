{
    "solution_id": "llama3.1-8b-3836",
    "problem_id": "p02280",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX 25\n\ntypedef struct Node {\n    int id;\n    int left;\n    int right;\n    int parent;\n    int sibling;\n    int degree;\n    int depth;\n    int height;\n    char type[20];\n} Node;\n\nNode tree[MAX];\n\nvoid read_tree(int n) {\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d %d\", &tree[i].id, &tree[i].left, &tree[i].right);\n        tree[i].parent = -1;\n        tree[i].sibling = -1;\n        tree[i].degree = 0;\n        tree[i].depth = -1;\n        tree[i].height = -1;\n        strcpy(tree[i].type, \"\");\n    }\n}\n\nvoid dfs(int node, int depth) {\n    if (node == -1) return;\n    tree[node].depth = depth;\n    if (tree[node].left == -1 && tree[node].right == -1) {\n        strcpy(tree[node].type, \"leaf\");\n    } else if (tree[node].left == -1 || tree[node].right == -1) {\n        strcpy(tree[node].type, \"internal node\");\n    } else {\n        strcpy(tree[node].type, \"root\");\n    }\n    tree[node].degree = 0;\n    if (tree[node].left != -1) {\n        tree[node].degree++;\n        tree[tree[node].left].parent = node;\n        tree[tree[node].left].sibling = tree[node].right;\n    }\n    if (tree[node].right != -1) {\n        tree[node].degree++;\n        tree[tree[node].right].parent = node;\n        tree[tree[node].right].sibling = tree[node].left;\n    }\n    dfs(tree[node].left, depth + 1);\n    dfs(tree[node].right, depth + 1);\n}\n\nvoid dfs2(int node, int height) {\n    if (node == -1) return;\n    tree[node].height = height;\n    dfs2(tree[node].left, height + 1);\n    dfs2(tree[node].right, height + 1);\n}\n\nvoid print_tree(int n) {\n    for (int i = 0; i < n; i++) {\n        printf(\"node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, %s\\n\",\n               tree[i].id, tree[i].parent, tree[i].sibling, tree[i].degree, tree[i].depth, tree[i].height, tree[i].type);\n    }\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    read_tree(n);\n    dfs(0, 0);\n    dfs2(0, 0);\n    print_tree(n);\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}