{
    "solution_id": "llama3.1-8b-1267",
    "problem_id": "p00853",
    "language": "Python",
    "solution": "```python\nimport heapq\nfrom collections import defaultdict\n\ndef dijkstra(graph, start, end):\n    queue = [(0, start, [])]\n    seen = set()\n    while queue:\n        (cost, node, path) = heapq.heappop(queue)\n        if node not in seen:\n            seen.add(node)\n            path = path + [node]\n            if node == end:\n                return path, cost\n            for neighbor, weight in graph[node].items():\n                if neighbor not in seen:\n                    heapq.heappush(queue, (cost + weight, neighbor, path))\n    return None\n\ndef kth_shortest_path(graph, start, end, k):\n    paths = []\n    for path, cost in dijkstra(graph, start, end):\n        if path is not None:\n            paths.append((path, cost))\n    paths.sort(key=lambda x: (x[1], x[0]))\n    if len(paths) < k:\n        return \"None\"\n    return \"-\".join(map(str, paths[k-1][0]))\n\ndef main():\n    while True:\n        n, m, k, a, b = map(int, input().split())\n        graph = defaultdict(dict)\n        for _ in range(m):\n            x, y, d = map(int, input().split())\n            graph[x][y] = d\n        if n == 0 and m == 0 and a == 0 and b == 0:\n            break\n        print(kth_shortest_path(graph, a, b, k))\n\nif __name__ == \"__main__\":\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}