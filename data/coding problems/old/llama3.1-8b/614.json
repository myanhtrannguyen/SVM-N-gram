{
    "solution_id": "llama3.1-8b-614",
    "problem_id": "p00690",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Station implements Comparable<Station> {\n        int name;\n        int distance;\n\n        public Station(int name, int distance) {\n            this.name = name;\n            this.distance = distance;\n        }\n\n        @Override\n        public int compareTo(Station o) {\n            if (this.distance == o.distance) {\n                return this.name - o.name;\n            }\n            return o.distance - this.distance;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(br.readLine());\n        int n = Integer.parseInt(st.nextToken());\n        int m = Integer.parseInt(st.nextToken());\n\n        while (n != 0 && m != 0) {\n            Map<Integer, List<Station>> graph = new HashMap<>();\n            for (int i = 0; i < n; i++) {\n                graph.put(i + 1, new ArrayList<>());\n            }\n\n            for (int i = 0; i < m; i++) {\n                st = new StringTokenizer(br.readLine());\n                int u = Integer.parseInt(st.nextToken());\n                int v = Integer.parseInt(st.nextToken());\n                int distance = Integer.parseInt(st.nextToken());\n                graph.get(u).add(new Station(v, distance));\n                graph.get(v).add(new Station(u, distance));\n            }\n\n            int maxDistance = 0;\n            List<Station> maxPath = new ArrayList<>();\n\n            for (int i = 1; i <= n; i++) {\n                int distance = dfs(graph, i, i, new HashSet<>(), 0);\n                if (distance > maxDistance) {\n                    maxDistance = distance;\n                    maxPath = new ArrayList<>();\n                    dfs(graph, i, i, new HashSet<>(), 0, maxPath);\n                } else if (distance == maxDistance) {\n                    dfs(graph, i, i, new HashSet<>(), 0, maxPath);\n                }\n            }\n\n            System.out.println(maxDistance);\n            for (Station station : maxPath) {\n                System.out.print(station.name + \" \");\n            }\n            System.out.println();\n\n            st = new StringTokenizer(br.readLine());\n            n = Integer.parseInt(st.nextToken());\n            m = Integer.parseInt(st.nextToken());\n        }\n    }\n\n    private static int dfs(Map<Integer, List<Station>> graph, int u, int parent, Set<Integer> visited, int distance) {\n        visited.add(u);\n        int maxDistance = distance;\n        for (Station station : graph.get(u)) {\n            if (!visited.contains(station.name)) {\n                int newDistance = dfs(graph, station.name, u, visited, distance + station.distance);\n                maxDistance = Math.max(maxDistance, newDistance);\n            }\n        }\n        visited.remove(u);\n        return maxDistance;\n    }\n\n    private static void dfs(Map<Integer, List<Station>> graph, int u, int parent, Set<Integer> visited, int distance, List<Station> path) {\n        visited.add(u);\n        path.add(new Station(u, distance));\n        for (Station station : graph.get(u)) {\n            if (!visited.contains(station.name) && station.name != parent) {\n                dfs(graph, station.name, u, visited, distance + station.distance, path);\n            }\n        }\n        visited.remove(u);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}