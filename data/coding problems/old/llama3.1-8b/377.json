{
    "solution_id": "llama3.1-8b-377",
    "problem_id": "p00587",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\n\nstruct TreeNode {\n    string val;\n    TreeNode* left;\n    TreeNode* right;\n    TreeNode(string val) : val(val), left(nullptr), right(nullptr) {}\n};\n\nTreeNode* stringToTreeNode(string s) {\n    if (s.empty()) return nullptr;\n    stack<TreeNode*> st;\n    TreeNode* root = new TreeNode(\"\");\n    st.push(root);\n    int i = 0;\n    while (i < s.size()) {\n        if (s[i] == '(') {\n            TreeNode* node = new TreeNode(\"\");\n            st.top()->left = node;\n            st.push(node);\n        } else if (s[i] == ',') {\n            st.top()->val = s.substr(1, i - 1);\n            st.pop();\n        } else if (s[i] == ')') {\n            st.pop();\n        } else {\n            int j = i;\n            while (j < s.size() && s[j] != '(' && s[j] != ',' && s[j] != ')') j++;\n            st.top()->val += s.substr(i, j - i);\n            i = j;\n        }\n        i++;\n    }\n    return root;\n}\n\nstring treeToString(TreeNode* root) {\n    if (root == nullptr) return \"\";\n    string res = \"\";\n    if (root->left != nullptr) res += \"(\" + treeToString(root->left) + \")\";\n    res += root->val;\n    if (root->right != nullptr) res += \",\" + treeToString(root->right);\n    return res;\n}\n\nstring intersection(string s1, string s2) {\n    TreeNode* t1 = stringToTreeNode(s1);\n    TreeNode* t2 = stringToTreeNode(s2);\n    TreeNode* root = new TreeNode(\"\");\n    stack<TreeNode*> st;\n    st.push(root);\n    int i = 0, j = 0;\n    while (i < s1.size() && j < s2.size()) {\n        if (s1[i] == s2[j]) {\n            if (s1[i] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->left = node;\n                st.push(node);\n            } else if (s1[i] == ',') {\n                st.top()->val = s1.substr(1, i - 1);\n                st.pop();\n            } else if (s1[i] == ')') {\n                st.pop();\n            } else {\n                int k = i;\n                while (k < s1.size() && s1[k] != '(' && s1[k] != ',' && s1[k] != ')') k++;\n                st.top()->val += s1.substr(i, k - i);\n                i = k;\n            }\n            if (s1[i] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->right = node;\n                st.push(node);\n            } else if (s1[i] == ',') {\n                st.top()->val = s1.substr(1, i - 1);\n                st.pop();\n            } else if (s1[i] == ')') {\n                st.pop();\n            } else {\n                int k = i;\n                while (k < s1.size() && s1[k] != '(' && s1[k] != ',' && s1[k] != ')') k++;\n                st.top()->val += s1.substr(i, k - i);\n                i = k;\n            }\n        } else {\n            i++;\n        }\n        j++;\n    }\n    return treeToString(root);\n}\n\nstring union_(string s1, string s2) {\n    TreeNode* t1 = stringToTreeNode(s1);\n    TreeNode* t2 = stringToTreeNode(s2);\n    TreeNode* root = new TreeNode(\"\");\n    stack<TreeNode*> st;\n    st.push(root);\n    int i = 0, j = 0;\n    while (i < s1.size() || j < s2.size()) {\n        if (i < s1.size() && (j >= s2.size() || s1[i] != s2[j])) {\n            if (s1[i] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->left = node;\n                st.push(node);\n            } else if (s1[i] == ',') {\n                st.top()->val = s1.substr(1, i - 1);\n                st.pop();\n            } else if (s1[i] == ')') {\n                st.pop();\n            } else {\n                int k = i;\n                while (k < s1.size() && s1[k] != '(' && s1[k] != ',' && s1[k] != ')') k++;\n                st.top()->val += s1.substr(i, k - i);\n                i = k;\n            }\n        } else if (j < s2.size() && (i >= s1.size() || s1[i] != s2[j])) {\n            if (s2[j] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->left = node;\n                st.push(node);\n            } else if (s2[j] == ',') {\n                st.top()->val = s2.substr(1, j - 1);\n                st.pop();\n            } else if (s2[j] == ')') {\n                st.pop();\n            } else {\n                int k = j;\n                while (k < s2.size() && s2[k] != '(' && s2[k] != ',' && s2[k] != ')') k++;\n                st.top()->val += s2.substr(j, k - j);\n                j = k;\n            }\n        } else {\n            if (s1[i] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->left = node;\n                st.push(node);\n            } else if (s1[i] == ',') {\n                st.top()->val = s1.substr(1, i - 1);\n                st.pop();\n            } else if (s1[i] == ')') {\n                st.pop();\n            } else {\n                int k = i;\n                while (k < s1.size() && s1[k] != '(' && s1[k] != ',' && s1[k] != ')') k++;\n                st.top()->val += s1.substr(i, k - i);\n                i = k;\n            }\n            if (s1[i] == '(') {\n                TreeNode* node = new TreeNode(\"\");\n                st.top()->right = node;\n                st.push(node);\n            } else if (s1[i] == ',') {\n                st.top()->val = s1.substr(1, i - 1);\n                st.pop();\n            } else if (s1[i] == ')') {\n                st.pop();\n            } else {\n                int k = i;\n                while (k < s1.size() && s1[k] != '(' && s1[k] != ',' && s1[k] != ')') k++;\n                st.top()->val += s1.substr(i, k - i);\n                i = k;\n            }\n        }\n        i++;\n        j++;\n    }\n    return treeToString(root);\n}\n\nint main() {\n    string op;\n    string s1, s2;\n    while (cin >> op >> s1 >> s2) {\n        if (op == \"i\") {\n            cout << intersection(s1, s2) << endl;\n        } else if (op == \"u\") {\n            cout << union_(s1, s2) << endl;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}