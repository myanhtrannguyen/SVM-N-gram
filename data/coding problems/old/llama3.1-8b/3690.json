{
    "solution_id": "llama3.1-8b-3690",
    "problem_id": "p02243",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int v, w;\n        Edge(int v, int w) {\n            this.v = v;\n            this.w = w;\n        }\n    }\n\n    static class Dijkstra {\n        int[] dist;\n        int[] prev;\n        int n;\n\n        Dijkstra(int n) {\n            this.n = n;\n            dist = new int[n];\n            prev = new int[n];\n            Arrays.fill(dist, Integer.MAX_VALUE);\n            Arrays.fill(prev, -1);\n        }\n\n        void dijkstra(int s) {\n            PriorityQueue<Edge> pq = new PriorityQueue<>((a, b) -> a.w - b.w);\n            dist[s] = 0;\n            pq.offer(new Edge(s, 0));\n            while (!pq.isEmpty()) {\n                Edge e = pq.poll();\n                int u = e.v;\n                if (dist[u] < e.w) continue;\n                for (Edge f : adj.get(u)) {\n                    int v = f.v;\n                    int w = f.w;\n                    if (dist[v] > dist[u] + w) {\n                        dist[v] = dist[u] + w;\n                        prev[v] = u;\n                        pq.offer(new Edge(v, dist[v]));\n                    }\n                }\n            }\n        }\n\n        List<Edge> get_path(int s, int t) {\n            List<Edge> path = new ArrayList<>();\n            while (t != -1) {\n                path.add(new Edge(t, dist[t]));\n                t = prev[t];\n            }\n            Collections.reverse(path);\n            return path;\n        }\n\n        Map<Integer, List<Edge>> adj = new HashMap<>();\n\n        void add_edge(int u, int v, int w) {\n            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(new Edge(v, w));\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int n = Integer.parseInt(br.readLine());\n        Dijkstra dijkstra = new Dijkstra(n);\n        for (int i = 0; i < n; i++) {\n            StringTokenizer st = new StringTokenizer(br.readLine());\n            int u = Integer.parseInt(st.nextToken());\n            int k = Integer.parseInt(st.nextToken());\n            for (int j = 0; j < k; j++) {\n                int v = Integer.parseInt(st.nextToken());\n                int w = Integer.parseInt(st.nextToken());\n                dijkstra.add_edge(u, v, w);\n            }\n        }\n        dijkstra.dijkstra(0);\n        for (int i = 0; i < n; i++) {\n            System.out.println(i + \" \" + dijkstra.dist[i]);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}