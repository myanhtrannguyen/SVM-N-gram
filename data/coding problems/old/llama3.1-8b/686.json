{
    "solution_id": "llama3.1-8b-686",
    "problem_id": "p00708",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\n\npublic class Main {\n\n    static class Point {\n        double x, y, z, r;\n\n        public Point(double x, double y, double z, double r) {\n            this.x = x;\n            this.y = y;\n            this.z = z;\n            this.r = r;\n        }\n    }\n\n    static class Edge {\n        int p1, p2;\n        double length;\n\n        public Edge(int p1, int p2, double length) {\n            this.p1 = p1;\n            this.p2 = p2;\n            this.length = length;\n        }\n    }\n\n    static class Graph {\n        List<Edge>[] edges;\n\n        public Graph(int n) {\n            edges = new List[n];\n            for (int i = 0; i < n; i++) {\n                edges[i] = new ArrayList<>();\n            }\n        }\n\n        public void addEdge(int p1, int p2, double length) {\n            edges[p1].add(new Edge(p1, p2, length));\n            edges[p2].add(new Edge(p2, p1, length));\n        }\n\n        public double shortestPath(int start, int end) {\n            boolean[] visited = new boolean[edges.length];\n            double[] distance = new double[edges.length];\n            Arrays.fill(distance, Double.POSITIVE_INFINITY);\n            distance[start] = 0;\n\n            for (int i = 0; i < edges.length; i++) {\n                int u = -1;\n                for (int j = 0; j < edges.length; j++) {\n                    if (!visited[j] && (u == -1 || distance[j] < distance[u])) {\n                        u = j;\n                    }\n                }\n\n                visited[u] = true;\n\n                for (Edge e : edges[u]) {\n                    int v = e.p2;\n                    if (!visited[v] && distance[v] > distance[u] + e.length) {\n                        distance[v] = distance[u] + e.length;\n                    }\n                }\n            }\n\n            return distance[end];\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        while ((line = br.readLine()) != null) {\n            if (line.equals(\"0\")) {\n                break;\n            }\n\n            int n = Integer.parseInt(line);\n            Point[] points = new Point[n];\n            for (int i = 0; i < n; i++) {\n                String[] parts = br.readLine().split(\" \");\n                points[i] = new Point(Double.parseDouble(parts[0]), Double.parseDouble(parts[1]), Double.parseDouble(parts[2]), Double.parseDouble(parts[3]));\n            }\n\n            Graph graph = new Graph(n);\n            for (int i = 0; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    double distance = Math.sqrt(Math.pow(points[i].x - points[j].x, 2) + Math.pow(points[i].y - points[j].y, 2) + Math.pow(points[i].z - points[j].z, 2));\n                    if (distance <= points[i].r + points[j].r) {\n                        graph.addEdge(i, j, distance);\n                    }\n                }\n            }\n\n            double shortestPath = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    shortestPath = Math.max(shortestPath, graph.shortestPath(i, j));\n                }\n            }\n\n            System.out.printf(\"%.3f%n\", shortestPath);\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}