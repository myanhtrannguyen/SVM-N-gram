{
    "solution_id": "llama3.1-8b-998",
    "problem_id": "p00786",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Node {\n        char label;\n        Node left, right;\n\n        public Node(char label) {\n            this.label = label;\n            this.left = null;\n            this.right = null;\n        }\n    }\n\n    static class Diagram {\n        List<String> lines = new ArrayList<>();\n\n        public void addLine(String line) {\n            lines.add(line);\n        }\n\n        public void print() {\n            for (String line : lines) {\n                System.out.println(line);\n            }\n        }\n    }\n\n    static Diagram draw(Node node, int indent) {\n        Diagram diagram = new Diagram();\n        if (node == null) {\n            return diagram;\n        }\n        if (node.left == null && node.right == null) {\n            diagram.addLine(String.valueOf(node.label));\n            return diagram;\n        }\n        if (node.left == null) {\n            Diagram left = draw(node.right, indent + 1);\n            diagram.addLine(String.valueOf(node.label));\n            for (int i = 0; i < indent; i++) {\n                diagram.addLine(\"-\");\n            }\n            diagram.addLine(\"-\");\n            for (String line : left.lines) {\n                diagram.addLine(\" \" + line);\n            }\n            return diagram;\n        }\n        if (node.right == null) {\n            Diagram left = draw(node.left, indent + 1);\n            diagram.addLine(String.valueOf(node.label));\n            for (int i = 0; i < indent; i++) {\n                diagram.addLine(\"-\");\n            }\n            diagram.addLine(\"-\");\n            for (String line : left.lines) {\n                diagram.addLine(\" \" + line);\n            }\n            return diagram;\n        }\n        Diagram left = draw(node.left, indent + 1);\n        Diagram right = draw(node.right, indent + 1);\n        diagram.addLine(String.valueOf(node.label));\n        for (int i = 0; i < indent; i++) {\n            diagram.addLine(\"-\");\n        }\n        diagram.addLine(\"-\");\n        for (String line : left.lines) {\n            diagram.addLine(\" \" + line);\n        }\n        diagram.addLine(\"-\");\n        for (int i = 0; i < indent; i++) {\n            diagram.addLine(\"-\");\n        }\n        diagram.addLine(\"-\");\n        for (String line : right.lines) {\n            diagram.addLine(\" \" + line);\n        }\n        return diagram;\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String line;\n        int num = 1;\n        while ((line = br.readLine()) != null) {\n            line = line.trim();\n            if (line.equals(\".\")) {\n                break;\n            }\n            line = line.replaceAll(\"\\\\s+\", \"\");\n            line = line.replaceAll(\";\", \"\");\n            line = line.replaceAll(\"\\\\(\", \" ( \");\n            line = line.replaceAll(\"\\\\)\", \" ) \");\n            line = line.replaceAll(\",\", \" , \");\n            Node root = parse(line);\n            Diagram diagram = draw(root, 0);\n            System.out.println(num + \":\");\n            diagram.print();\n            num++;\n        }\n    }\n\n    static Node parse(String line) {\n        Stack<Node> stack = new Stack<>();\n        for (char c : line.toCharArray()) {\n            if (c == '(') {\n                stack.push(null);\n            } else if (c == ')') {\n                Node node = stack.pop();\n                if (stack.peek() != null) {\n                    stack.peek().right = node;\n                }\n            } else if (c == ',') {\n                continue;\n            } else {\n                Node node = new Node(c);\n                if (!stack.isEmpty()) {\n                    stack.peek().left = node;\n                }\n                stack.push(node);\n            }\n        }\n        return stack.pop();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}