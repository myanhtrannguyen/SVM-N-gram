{
    "solution_id": "llama3.1-8b-968",
    "problem_id": "p00779",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAX_CIRCLES 100\n#define MAX_POINTS 10\n\ntypedef struct {\n    int x, y, r;\n} Circle;\n\ntypedef struct {\n    int x, y;\n} Point;\n\ntypedef struct {\n    int x, y;\n    int index;\n} Event;\n\nint compareEvents(const void *a, const void *b) {\n    Event *ea = (Event *)a;\n    Event *eb = (Event *)b;\n    return (ea->y - eb->y);\n}\n\nint comparePoints(const void *a, const void *b) {\n    Point *pa = (Point *)a;\n    Point *pb = (Point *)b;\n    return (pa->x - pb->x);\n}\n\nint compareCircles(const void *a, const void *b) {\n    Circle *ca = (Circle *)a;\n    Circle *cb = (Circle *)b;\n    return (ca->x - cb->x);\n}\n\nint intersect(Circle c1, Circle c2) {\n    int dx = c2.x - c1.x;\n    int dy = c2.y - c1.y;\n    int d = dx * dx + dy * dy;\n    int r1 = c1.r * c1.r;\n    int r2 = c2.r * c2.r;\n    if (d <= r1 + r2 && d >= r1 - r2) {\n        return 1;\n    }\n    return 0;\n}\n\nint inCircle(Circle c, Point p) {\n    int dx = p.x - c.x;\n    int dy = p.y - c.y;\n    int d = dx * dx + dy * dy;\n    if (d <= c.r * c.r) {\n        return 1;\n    }\n    return 0;\n}\n\nint onCircle(Circle c, Point p) {\n    int dx = p.x - c.x;\n    int dy = p.y - c.y;\n    int d = dx * dx + dy * dy;\n    if (d == c.r * c.r) {\n        return 1;\n    }\n    return 0;\n}\n\nint cross(Circle c, Point p1, Point p2) {\n    int dx1 = p1.x - c.x;\n    int dy1 = p1.y - c.y;\n    int dx2 = p2.x - c.x;\n    int dy2 = p2.y - c.y;\n    int d1 = dx1 * dy2 - dy1 * dx2;\n    if (d1 > 0) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int n, m;\n    Circle circles[MAX_CIRCLES];\n    Point points[MAX_POINTS];\n    Event events[MAX_CIRCLES * 2 + MAX_POINTS * 2];\n    int numEvents = 0;\n\n    while (scanf(\"%d %d\", &n, &m) == 2) {\n        if (n == 0 && m == 0) {\n            break;\n        }\n\n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d %d\", &circles[i].x, &circles[i].y, &circles[i].r);\n        }\n\n        for (int i = 0; i < m; i++) {\n            scanf(\"%d %d %d %d\", &points[i].x, &points[i].y, &points[i + m].x, &points[i + m].y);\n            events[numEvents].x = points[i].x;\n            events[numEvents].y = points[i].y;\n            events[numEvents].index = i;\n            numEvents++;\n            events[numEvents].x = points[i + m].x;\n            events[numEvents].y = points[i + m].y;\n            events[numEvents].index = i;\n            numEvents++;\n        }\n\n        qsort(events, numEvents, sizeof(Event), compareEvents);\n\n        for (int i = 0; i < numEvents; i++) {\n            int j = i;\n            while (j < numEvents && events[j].y == events[i].y) {\n                j++;\n            }\n\n            for (int k = i; k < j; k++) {\n                int circleIndex = 0;\n                for (int l = 0; l < n; l++) {\n                    if (intersect(circles[l], events[k].x, events[k].y)) {\n                        circleIndex = l;\n                        break;\n                    }\n                }\n\n                if (circleIndex != 0) {\n                    for (int l = i; l < k; l++) {\n                        if (cross(circles[circleIndex], events[l].x, events[k].x)) {\n                            events[k].index = -1;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            i = j - 1;\n        }\n\n        for (int i = 0; i < numEvents; i++) {\n            if (events[i].index != -1) {\n                Point p1 = {events[i].x, events[i].y};\n                Point p2 = {events[i + 1].x, events[i + 1].y};\n                int circleIndex = 0;\n                for (int j = 0; j < n; j++) {\n                    if (intersect(circles[j], p1, p2)) {\n                        circleIndex = j;\n                        break;\n                    }\n                }\n\n                if (circleIndex != 0) {\n                    if (inCircle(circles[circleIndex], p1) || onCircle(circles[circleIndex], p1)) {\n                        printf(\"NO \");\n                    } else {\n                        printf(\"YES \");\n                    }\n                } else {\n                    printf(\"YES \");\n                }\n            } else {\n                printf(\"NO \");\n            }\n        }\n\n        printf(\"\\n\");\n\n        numEvents = 0;\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}