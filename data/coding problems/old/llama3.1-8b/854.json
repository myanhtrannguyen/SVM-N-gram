{
    "solution_id": "llama3.1-8b-854",
    "problem_id": "p00750",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class Main {\n    static class Node {\n        int id;\n        List<String> labels = new ArrayList<>();\n        List<Node> children = new ArrayList<>();\n\n        public Node(int id) {\n            this.id = id;\n        }\n    }\n\n    static class Edge {\n        int from;\n        int to;\n        String label;\n\n        public Edge(int from, int to, String label) {\n            this.from = from;\n            this.to = to;\n            this.label = label;\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String[] line;\n        while ((line = br.readLine().split(\" \")) != null && line.length > 0) {\n            int n = Integer.parseInt(line[0]);\n            int a = Integer.parseInt(line[1]);\n            int s = Integer.parseInt(line[2]);\n            int g = Integer.parseInt(line[3]);\n\n            Node[] nodes = new Node[n];\n            for (int i = 0; i < n; i++) {\n                nodes[i] = new Node(i);\n            }\n\n            Edge[] edges = new Edge[a];\n            for (int i = 0; i < a; i++) {\n                line = br.readLine().split(\" \");\n                int from = Integer.parseInt(line[0]);\n                int to = Integer.parseInt(line[1]);\n                String label = line[2];\n                edges[i] = new Edge(from, to, label);\n                nodes[from].children.add(nodes[to]);\n                nodes[to].labels.add(label);\n            }\n\n            if (dfs(nodes[s], nodes[g], new HashSet<>())) {\n                String mostPowerfulSpell = getMostPowerfulSpell(nodes[g].labels);\n                System.out.println(mostPowerfulSpell);\n            } else {\n                System.out.println(\"NO\");\n            }\n        }\n    }\n\n    static boolean dfs(Node node, Node target, Set<Node> visited) {\n        if (node == target) {\n            return true;\n        }\n        visited.add(node);\n        for (Node child : node.children) {\n            if (!visited.contains(child)) {\n                if (dfs(child, target, visited)) {\n                    return true;\n                }\n            }\n        }\n        visited.remove(node);\n        return false;\n    }\n\n    static String getMostPowerfulSpell(List<String> labels) {\n        String mostPowerfulSpell = \"\";\n        for (String label : labels) {\n            String spell = mostPowerfulSpell + label;\n            if (spell.compareTo(mostPowerfulSpell) < 0) {\n                mostPowerfulSpell = spell;\n            }\n        }\n        return mostPowerfulSpell;\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}