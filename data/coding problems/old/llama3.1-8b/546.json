{
    "solution_id": "llama3.1-8b-546",
    "problem_id": "p00650",
    "language": "Java",
    "solution": "```java\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\n\npublic class Main {\n    static class Edge {\n        int to, cost;\n\n        public Edge(int to, int cost) {\n            this.to = to;\n            this.cost = cost;\n        }\n    }\n\n    static class Graph {\n        int n;\n        List<Edge>[] edges;\n\n        public Graph(int n) {\n            this.n = n;\n            edges = new List[n];\n            for (int i = 0; i < n; i++) {\n                edges[i] = new ArrayList<>();\n            }\n        }\n\n        public void addEdge(int from, int to, int cost) {\n            edges[from].add(new Edge(to, cost));\n        }\n    }\n\n    static int dfs(int u, int p, Graph g, int[] color, int[] cost) {\n        for (Edge e : g.edges[u]) {\n            if (e.to != p) {\n                if (color[e.to] == -1) {\n                    color[e.to] = color[u] ^ 1;\n                    cost[e.to] = cost[u] + e.cost;\n                    cost[e.to] = Math.min(cost[e.to], dfs(e.to, u, g, color, cost));\n                } else if (color[e.to] == color[u]) {\n                    return Integer.MAX_VALUE / 2;\n                }\n            }\n        }\n        return cost[u];\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        StringTokenizer st;\n\n        while (true) {\n            st = new StringTokenizer(br.readLine());\n            int n = Integer.parseInt(st.nextToken());\n            int m = Integer.parseInt(st.nextToken());\n\n            if (n == 0 && m == 0) break;\n\n            Graph g = new Graph(n);\n            int[] color = new int[n];\n            int[] cost = new int[n];\n            Arrays.fill(color, -1);\n            Arrays.fill(cost, Integer.MAX_VALUE / 2);\n\n            for (int i = 0; i < m; i++) {\n                st = new StringTokenizer(br.readLine());\n                int from = Integer.parseInt(st.nextToken());\n                int to = Integer.parseInt(st.nextToken());\n                int c = Integer.parseInt(st.nextToken());\n                g.addEdge(from, to, c);\n            }\n\n            long ans = 0;\n            for (int i = 0; i < n; i++) {\n                if (color[i] == -1) {\n                    color[i] = 0;\n                    cost[i] = dfs(i, -1, g, color, cost);\n                    ans += cost[i];\n                }\n            }\n\n            pw.println(ans);\n        }\n\n        pw.close();\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}