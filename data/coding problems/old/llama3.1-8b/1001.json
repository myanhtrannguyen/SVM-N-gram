{
    "solution_id": "llama3.1-8b-1001",
    "problem_id": "p00787",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <sstream>\n\nusing namespace std;\n\nstruct Point {\n    int x, y;\n};\n\nstruct Acceleration {\n    int ax, ay;\n};\n\nstruct Record {\n    int sx, sy;\n    double lapTime;\n    vector<Acceleration> accelerations;\n};\n\nbool isOnStartLine(const vector<Point>& innerWall, const vector<Point>& outerWall, int sx, int sy) {\n    if (sx != innerWall[0].x || sx != outerWall[0].x) return false;\n    if (sy != innerWall[0].y || sy != outerWall[0].y) return false;\n    return true;\n}\n\nbool isValidAcceleration(const vector<Acceleration>& accelerations) {\n    for (const auto& acceleration : accelerations) {\n        if (abs(acceleration.ax) > 1 || abs(acceleration.ay) > 1) return false;\n    }\n    return true;\n}\n\nbool isCorrectLapTime(const vector<Acceleration>& accelerations, double lapTime) {\n    int n = accelerations.size();\n    if (n != lapTime) return false;\n    return true;\n}\n\nbool isClockwise(const vector<Point>& innerWall, const vector<Point>& outerWall, const vector<Acceleration>& accelerations) {\n    int n = accelerations.size();\n    int x = innerWall[0].x, y = innerWall[0].y;\n    for (int i = 0; i < n; i++) {\n        x += accelerations[i].ax;\n        y += accelerations[i].ay;\n        if (x < innerWall[0].x || x > outerWall[0].x || y < innerWall[0].y || y > outerWall[0].y) return false;\n    }\n    return true;\n}\n\nbool isCorrectLapTimeValue(double lapTime) {\n    int n = 100;\n    double eps = 0.01;\n    return abs(lapTime - n) < eps;\n}\n\nbool isNoCrash(const vector<Point>& innerWall, const vector<Point>& outerWall, const vector<Acceleration>& accelerations) {\n    int n = accelerations.size();\n    int x = innerWall[0].x, y = innerWall[0].y;\n    for (int i = 0; i < n; i++) {\n        x += accelerations[i].ax;\n        y += accelerations[i].ay;\n        if (x < innerWall[0].x || x > outerWall[0].x || y < innerWall[0].y || y > outerWall[0].y) return false;\n    }\n    return true;\n}\n\nbool checkRecord(const vector<Point>& innerWall, const vector<Point>& outerWall, const Record& record) {\n    if (!isOnStartLine(innerWall, outerWall, record.sx, record.sy)) return false;\n    if (!isValidAcceleration(record.accelerations)) return false;\n    if (!isCorrectLapTime(record.accelerations, record.lapTime)) return false;\n    if (!isClockwise(innerWall, outerWall, record.accelerations)) return false;\n    if (!isCorrectLapTimeValue(record.lapTime)) return false;\n    if (!isNoCrash(innerWall, outerWall, record.accelerations)) return false;\n    return true;\n}\n\nint main() {\n    vector<Point> innerWall, outerWall;\n    string line;\n    while (getline(cin, line)) {\n        if (line == \"99999\") break;\n        istringstream iss(line);\n        int x, y;\n        while (iss >> x >> y) {\n            innerWall.push_back({x, y});\n        }\n    }\n    while (getline(cin, line)) {\n        if (line == \"99999\") break;\n        istringstream iss(line);\n        int x, y;\n        iss >> x >> y;\n        double lapTime;\n        iss >> lapTime;\n        vector<Acceleration> accelerations;\n        while (iss >> x >> y) {\n            accelerations.push_back({x, y});\n        }\n        Record record = {x, y, lapTime, accelerations};\n        if (checkRecord(innerWall, outerWall, record)) {\n            cout << \"OK\" << endl;\n        } else {\n            cout << \"NG\" << endl;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}