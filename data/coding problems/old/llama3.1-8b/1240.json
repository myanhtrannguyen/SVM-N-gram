{
    "solution_id": "llama3.1-8b-1240",
    "problem_id": "p00847",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MAX 3\n#define MAX_COLOR 4\n\ntypedef struct {\n    char color[MAX_COLOR];\n} Cube;\n\ntypedef struct {\n    int x, y;\n    Cube board[MAX][MAX];\n} Board;\n\ntypedef struct {\n    int x, y;\n} Position;\n\ntypedef struct {\n    int x, y;\n    int steps;\n} Path;\n\nint is_valid(int x, int y) {\n    return (x >= 0 && x < MAX && y >= 0 && y < MAX);\n}\n\nint is_empty(int x, int y, Board board) {\n    return board.board[x][y].color[0] == 'E';\n}\n\nint is_target(int x, int y, Board board, char target[MAX_COLOR]) {\n    for (int i = 0; i < MAX_COLOR; i++) {\n        if (board.board[x][y].color[i] != target[i]) {\n            return 0;\n        }\n    }\n    return 1;\n}\n\nint is_equal(Board board1, Board board2) {\n    for (int i = 0; i < MAX; i++) {\n        for (int j = 0; j < MAX; j++) {\n            if (board1.board[i][j].color[0] != board2.board[i][j].color[0]) {\n                return 0;\n            }\n        }\n    }\n    return 1;\n}\n\nint get_distance(int x1, int y1, int x2, int y2) {\n    return abs(x1 - x2) + abs(y1 - y2);\n}\n\nint get_neighbors(int x, int y, Board board) {\n    int count = 0;\n    if (is_valid(x - 1, y) && !is_empty(x - 1, y, board)) {\n        count++;\n    }\n    if (is_valid(x + 1, y) && !is_empty(x + 1, y, board)) {\n        count++;\n    }\n    if (is_valid(x, y - 1) && !is_empty(x, y - 1, board)) {\n        count++;\n    }\n    if (is_valid(x, y + 1) && !is_empty(x, y + 1, board)) {\n        count++;\n    }\n    return count;\n}\n\nint bfs(Board board, char target[MAX_COLOR], int steps) {\n    Position queue[MAX * MAX * steps];\n    int front = 0, rear = 0;\n    int visited[MAX][MAX][steps + 1];\n    for (int i = 0; i < MAX; i++) {\n        for (int j = 0; j < MAX; j++) {\n            for (int k = 0; k <= steps; k++) {\n                visited[i][j][k] = 0;\n            }\n        }\n    }\n    queue[rear].x = board.x;\n    queue[rear].y = board.y;\n    rear++;\n    visited[board.x][board.y][0] = 1;\n    while (front < rear) {\n        int x = queue[front].x;\n        int y = queue[front].y;\n        int step = queue[front].steps;\n        front++;\n        if (is_target(x, y, board, target)) {\n            return step;\n        }\n        for (int i = 0; i < get_neighbors(x, y, board); i++) {\n            int nx, ny;\n            if (is_valid(x - 1, y) && !is_empty(x - 1, y, board)) {\n                nx = x - 1;\n                ny = y;\n            } else if (is_valid(x + 1, y) && !is_empty(x + 1, y, board)) {\n                nx = x + 1;\n                ny = y;\n            } else if (is_valid(x, y - 1) && !is_empty(x, y - 1, board)) {\n                nx = x;\n                ny = y - 1;\n            } else {\n                nx = x;\n                ny = y + 1;\n            }\n            if (!visited[nx][ny][step + 1]) {\n                queue[rear].x = nx;\n                queue[rear].y = ny;\n                queue[rear].steps = step + 1;\n                rear++;\n                visited[nx][ny][step + 1] = 1;\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n    int x, y;\n    char target[MAX_COLOR][MAX_COLOR];\n    Board board;\n    while (scanf(\"%d %d\", &x, &y) == 2) {\n        if (x == 0 && y == 0) {\n            break;\n        }\n        board.x = x;\n        board.y = y;\n        for (int i = 0; i < MAX; i++) {\n            for (int j = 0; j < MAX; j++) {\n                board.board[i][j].color[0] = 'E';\n            }\n        }\n        for (int i = 0; i < MAX; i++) {\n            for (int j = 0; j < MAX; j++) {\n                scanf(\"%c\", &board.board[i][j].color[0]);\n            }\n            scanf(\"\\n\");\n        }\n        for (int i = 0; i < MAX_COLOR; i++) {\n            for (int j = 0; j < MAX_COLOR; j++) {\n                scanf(\"%c\", &target[i][j]);\n            }\n            scanf(\"\\n\");\n        }\n        int steps = bfs(board, target[0], 30);\n        if (steps == -1) {\n            printf(\"-1\\n\");\n        } else {\n            printf(\"%d\\n\", steps);\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}