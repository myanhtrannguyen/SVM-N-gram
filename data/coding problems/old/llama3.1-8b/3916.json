{
    "solution_id": "llama3.1-8b-3916",
    "problem_id": "p02300",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n\n#define MAX_POINTS 100000\n\ntypedef struct Point {\n    int x, y;\n} Point;\n\ntypedef struct Hull {\n    Point *points;\n    int size;\n} Hull;\n\nHull* create_hull(int n) {\n    Hull* hull = (Hull*)malloc(sizeof(Hull));\n    hull->points = (Point*)malloc(n * sizeof(Point));\n    hull->size = 0;\n    return hull;\n}\n\nvoid free_hull(Hull* hull) {\n    free(hull->points);\n    free(hull);\n}\n\nint compare_points(const void* a, const void* b) {\n    Point* p1 = (Point*)a;\n    Point* p2 = (Point*)b;\n    if (p1->y == p2->y) {\n        return p1->x - p2->x;\n    }\n    return p1->y - p2->y;\n}\n\nint orientation(Point p, Point q, Point r) {\n    int val = (q->y - p->y) * (r->x - q->x) - (q->x - p->x) * (r->y - q->y);\n    if (val == 0) return 0;\n    return (val > 0) ? 1 : 2;\n}\n\nint on_segment(Point p, Point q, Point r) {\n    if (q->x <= max(p->x, r->x) && q->x >= min(p->x, r->x) &&\n        q->y <= max(p->y, r->y) && q->y >= min(p->y, r->y))\n        return 1;\n    return 0;\n}\n\nint convex_hull(Point points[], int n, Hull* hull) {\n    if (n < 3) return 0;\n\n    qsort(points, n, sizeof(Point), compare_points);\n\n    int leftmost = 0;\n    for (int i = 1; i < n; i++) {\n        if (points[i].x < points[leftmost].x) leftmost = i;\n    }\n\n    int p = leftmost, q = 0;\n    hull->points[hull->size++] = points[p];\n    while (1) {\n        int next = (q + 1) % n;\n        while (next != p && orientation(points[q], points[next], points[p]) != 2) next = (next + 1) % n;\n        hull->points[hull->size++] = points[next];\n        q = next;\n        if (q == p) break;\n    }\n\n    return hull->size;\n}\n\nint main() {\n    int n;\n    scanf(\"%d\", &n);\n    Point points[n];\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d %d\", &points[i].x, &points[i].y);\n    }\n\n    Hull* hull = create_hull(n);\n    int size = convex_hull(points, n, hull);\n\n    printf(\"%d\\n\", size);\n    for (int i = 0; i < size; i++) {\n        printf(\"%d %d\\n\", hull->points[i].x, hull->points[i].y);\n    }\n\n    free_hull(hull);\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}