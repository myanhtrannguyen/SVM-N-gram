{
    "solution_id": "llama3.1-8b-1322",
    "problem_id": "p00867",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n    static class Point {\n        int x, y;\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n\n    static class Line {\n        Point a, b;\n\n        public Line(Point a, Point b) {\n            this.a = a;\n            this.b = b;\n        }\n    }\n\n    static int[][] count = new int[10];\n\n    static void dfs(int x, int y, int[] vis, List<Line> lines) {\n        vis[x * 1000 + y] = 1;\n        for (Line line : lines) {\n            if (line.a.x == x && line.a.y == y) {\n                if (line.b.x == x && line.b.y == y) continue;\n                dfs(line.b.x, line.b.y, vis, lines);\n            } else if (line.b.x == x && line.b.y == y) {\n                if (line.a.x == x && line.a.y == y) continue;\n                dfs(line.a.x, line.a.y, vis, lines);\n            }\n        }\n    }\n\n    static void solve(List<Line> lines) {\n        int n = lines.size();\n        int[][] vis = new int[1001 * 1001];\n        for (int i = 0; i < 10; i++) count[i] = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                if (lines.get(i).a.x == lines.get(j).a.x && lines.get(i).a.y == lines.get(j).a.y) {\n                    if (lines.get(i).b.x == lines.get(j).b.x && lines.get(i).b.y == lines.get(j).b.y) continue;\n                    dfs(lines.get(j).b.x, lines.get(j).b.y, vis, lines);\n                } else if (lines.get(i).b.x == lines.get(j).a.x && lines.get(i).b.y == lines.get(j).a.y) {\n                    if (lines.get(i).a.x == lines.get(j).a.x && lines.get(i).a.y == lines.get(j).a.y) continue;\n                    dfs(lines.get(j).a.x, lines.get(j).a.y, vis, lines);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (vis[lines.get(i).a.x * 1000 + lines.get(i).a.y] == 1) {\n                if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y == lines.get(i).b.y) {\n                    count[0]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[1]++;\n                } else if (lines.get(i).a.x + 1 == lines.get(i).b.x && lines.get(i).a.y == lines.get(i).b.y) {\n                    count[2]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[2]++;\n                } else if (lines.get(i).a.x - 1 == lines.get(i).b.x && lines.get(i).a.y == lines.get(i).b.y) {\n                    count[9]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[8]++;\n                } else if (lines.get(i).a.x + 1 == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[5]++;\n                } else if (lines.get(i).a.x - 1 == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[5]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[6]++;\n                } else if (lines.get(i).a.x + 1 == lines.get(i).b.x && lines.get(i).a.y == lines.get(i).b.y) {\n                    count[3]++;\n                } else if (lines.get(i).a.x - 1 == lines.get(i).b.x && lines.get(i).a.y == lines.get(i).b.y) {\n                    count[4]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[7]++;\n                } else if (lines.get(i).a.x + 1 == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[7]++;\n                } else if (lines.get(i).a.x - 1 == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[4]++;\n                } else if (lines.get(i).a.x == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[3]++;\n                } else if (lines.get(i).a.x + 1 == lines.get(i).b.x && lines.get(i).a.y - 1 == lines.get(i).b.y) {\n                    count[6]++;\n                } else if (lines.get(i).a.x - 1 == lines.get(i).b.x && lines.get(i).a.y + 1 == lines.get(i).b.y) {\n                    count[9]++;\n                }\n            }\n        }\n        for (int i = 0; i < 10; i++) {\n            System.out.print(count[i] + \" \");\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            List<Line> lines = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                String[] s = br.readLine().split(\" \");\n                Point a = new Point(Integer.parseInt(s[0]), Integer.parseInt(s[1]));\n                Point b = new Point(Integer.parseInt(s[2]), Integer.parseInt(s[3]));\n                lines.add(new Line(a, b));\n            }\n            solve(lines);\n            for (int i = 0; i < 10; i++) count[i] = 0;\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}