{
    "solution_id": "llama3.1-8b-571",
    "problem_id": "p00656",
    "language": "Python",
    "solution": "```python\nimport sys\ninput = sys.stdin.readline\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.expectation = 0\n        self.price = 0\n        self.min_expectation = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, string, expectation, price):\n        node = self.root\n        for char in string:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.expectation = expectation\n        node.price = price\n        node.min_expectation = expectation\n\n    def query(self, string, budget, memo):\n        if string in memo:\n            return memo[string]\n        node = self.root\n        for char in string:\n            if char not in node.children:\n                return 0\n            node = node.children[char]\n        if node.price > budget:\n            return 0\n        max_sum = node.expectation\n        for char in string:\n            if char in node.children:\n                max_sum = max(max_sum, self.query(string[:string.index(char)], budget, memo) + node.expectation)\n        memo[string] = max_sum\n        return max_sum\n\ndef main():\n    trie = Trie()\n    while True:\n        try:\n            N, W = map(int, input().split())\n            if N == 0:\n                break\n            for _ in range(N):\n                string, expectation, price = input().split()\n                expectation = int(expectation)\n                price = int(price)\n                trie.insert(string, expectation, price)\n            Q = int(input())\n            for _ in range(Q):\n                query = input().strip()\n                memo = {}\n                print(trie.query(query, W, memo))\n        except ValueError:\n            break\n\nmain()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}