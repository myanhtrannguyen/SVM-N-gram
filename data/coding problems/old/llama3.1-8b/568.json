{
    "solution_id": "llama3.1-8b-568",
    "problem_id": "p00656",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n#define N 20000\n#define W 20\n#define MAXLEN 10\n#define MAXQ 20000\n\ntypedef struct {\n    char str[MAXLEN + 1];\n    int exp;\n    int price;\n} Anime;\n\nAnime animes[N + 1];\nint n, w, q;\nint dp[N + 1][MAXLEN + 1][MAXLEN + 1];\nint minexp[N + 1][MAXLEN + 1];\n\nint getminexp(int i, int j) {\n    if (minexp[i][j] != -1) return minexp[i][j];\n    if (i == 0 || j == 0) return 0;\n    int min = INT_MAX;\n    for (int k = 1; k <= j; k++) {\n        int exp = animes[i - 1].exp;\n        int prevmin = getminexp(i - 1, k - 1);\n        if (prevmin != -1) exp = animes[i - 1].exp + prevmin;\n        min = (min < exp) ? min : exp;\n    }\n    minexp[i][j] = min;\n    return min;\n}\n\nint getdp(int i, int j, int k) {\n    if (i == 0 || j == 0 || k == 0) return 0;\n    if (dp[i][j][k] != -1) return dp[i][j][k];\n    int max = 0;\n    for (int l = 1; l <= j; l++) {\n        int exp = animes[i - 1].exp;\n        int prevmax = getdp(i - 1, l - 1, k - 1);\n        if (prevmax != -1) exp = animes[i - 1].exp + prevmax;\n        int cost = animes[i - 1].price;\n        if (k >= cost) {\n            int newmax = getminexp(i - 1, l - 1) + exp;\n            max = (max < newmax) ? max : newmax;\n        }\n    }\n    dp[i][j][k] = max;\n    return max;\n}\n\nint main() {\n    while (scanf(\"%d %d\", &n, &w) == 2) {\n        if (n == 0 && w == 0) break;\n        for (int i = 1; i <= n; i++) {\n            scanf(\"%s %d %d\", animes[i].str, &animes[i].exp, &animes[i].price);\n        }\n        scanf(\"%d\", &q);\n        for (int i = 1; i <= q; i++) {\n            char query[MAXLEN + 1];\n            scanf(\"%s\", query);\n            int len = strlen(query);\n            int max = getdp(n, len, w);\n            printf(\"%d\\n\", max);\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= MAXLEN; j++) {\n                minexp[i][j] = -1;\n                for (int k = 1; k <= MAXLEN; k++) {\n                    dp[i][j][k] = -1;\n                }\n            }\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}