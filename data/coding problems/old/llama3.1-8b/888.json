{
    "solution_id": "llama3.1-8b-888",
    "problem_id": "p00759",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\n#define MAX_H 30\n#define MAX_W 30\n\nint dfs(int h, int w, int x, int y, int **map, int **visited, int **cards, int **broken) {\n    if (x == h - 1 && y == w - 1) {\n        return 0;\n    }\n\n    if (visited[x][y]) {\n        return 1000000;\n    }\n\n    visited[x][y] = 1;\n\n    int min_cards = 1000000;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            int nx = x + i;\n            int ny = y + j;\n            if (nx >= 0 && nx < h && ny >= 0 && ny < w && map[nx][ny] == 0) {\n                int cards_needed = 1 + dfs(h, w, nx, ny, map, visited, cards, broken);\n                if (cards_needed < min_cards) {\n                    min_cards = cards_needed;\n                }\n            }\n        }\n    }\n\n    if (min_cards == 1000000) {\n        return 1000000;\n    }\n\n    if (cards[x][y] == 0) {\n        return min_cards;\n    }\n\n    if (broken[x][y] == 1) {\n        return 1000000;\n    }\n\n    return min_cards;\n}\n\nint main() {\n    int h, w;\n    while (scanf(\"%d %d\", &h, &w) == 2) {\n        if (h == 0 && w == 0) {\n            break;\n        }\n\n        int **map = (int **)malloc(h * sizeof(int *));\n        for (int i = 0; i < h; i++) {\n            map[i] = (int *)malloc(w * sizeof(int));\n        }\n\n        int **visited = (int **)malloc(h * sizeof(int *));\n        for (int i = 0; i < h; i++) {\n            visited[i] = (int *)malloc(w * sizeof(int));\n        }\n\n        int **cards = (int **)malloc(h * sizeof(int *));\n        for (int i = 0; i < h; i++) {\n            cards[i] = (int *)malloc(w * sizeof(int));\n        }\n\n        int **broken = (int **)malloc(h * sizeof(int *));\n        for (int i = 0; i < h; i++) {\n            broken[i] = (int *)malloc(w * sizeof(int));\n        }\n\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                scanf(\"%d\", &map[i][j]);\n            }\n        }\n\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                scanf(\"%d\", &cards[i][j]);\n            }\n        }\n\n        int min_cards = 1000000;\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (map[i][j] == 0) {\n                    int cards_needed = dfs(h, w, i, j, map, visited, cards, broken);\n                    if (cards_needed < min_cards) {\n                        min_cards = cards_needed;\n                    }\n                }\n            }\n        }\n\n        if (min_cards == 1000000) {\n            printf(\"-1\\n\");\n        } else {\n            printf(\"%d\\n\", min_cards);\n        }\n\n        for (int i = 0; i < h; i++) {\n            free(map[i]);\n            free(visited[i]);\n            free(cards[i]);\n            free(broken[i]);\n        }\n\n        free(map);\n        free(visited);\n        free(cards);\n        free(broken);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}