{
    "solution_id": "llama3.1-8b-1136",
    "problem_id": "p00821",
    "language": "C",
    "solution": "```c\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct {\n    int x, y;\n} Point;\n\nint orientation(Point p, Point q, Point r) {\n    int val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n    if (val == 0) return 0; // Collinear\n    return (val > 0) ? 1 : 2; // Clockwise or Counterclockwise\n}\n\nint intersect(Point p1, Point p2, Point q1, Point q2) {\n    int o1 = orientation(p1, p2, q1);\n    int o2 = orientation(p1, p2, q2);\n    int o3 = orientation(q1, q2, p1);\n    int o4 = orientation(q1, q2, p2);\n\n    if (o1 != o2 && o3 != o4) return 1; // Intersecting\n    if (o1 == 0 && onSegment(p1, p2, q1)) return 1; // p1, p2 and q1 are collinear\n    if (o2 == 0 && onSegment(p1, p2, q2)) return 1; // p1, p2 and q2 are collinear\n    if (o3 == 0 && onSegment(q1, q2, p1)) return 1; // q1, q2 and p1 are collinear\n    if (o4 == 0 && onSegment(q1, q2, p2)) return 1; // q1, q2 and p2 are collinear\n\n    return 0; // Not intersecting\n}\n\nint onSegment(Point p, Point q, Point r) {\n    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&\n        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))\n        return 1;\n    return 0;\n}\n\nint max(int a, int b) {\n    return (a >= b) ? a : b;\n}\n\nint min(int a, int b) {\n    return (a <= b) ? a : b;\n}\n\nint areaOfPolygon(int n, Point points[]) {\n    int area = 0;\n    for (int i = 0; i < n; i++) {\n        int j = (i + 1) % n;\n        area += points[i].x * points[j].y;\n        area -= points[j].x * points[i].y;\n    }\n    return abs(area) / 2;\n}\n\nint main() {\n    int n, m, count = 0;\n    Point points[100];\n\n    while (scanf(\"%d\", &n) == 1) {\n        if (n == 0) break;\n        count++;\n\n        for (int i = 0; i < n; i++) {\n            scanf(\"%d %d\", &points[i].x, &points[i].y);\n        }\n\n        int area = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (intersect(points[i], points[(i + 1) % n], points[j], points[(j + 1) % n])) {\n                    area++;\n                }\n            }\n        }\n\n        printf(\"%d\\n\", area);\n    }\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}