{
    "solution_id": "llama3.1-8b-3277",
    "problem_id": "p01823",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cmath>\n\nusing namespace std;\n\nconst long double INF = numeric_limits<long double>::max();\n\nstruct Edge {\n    int to;\n    long double w;\n};\n\nstruct Node {\n    int id;\n    long double dist;\n    bool operator<(const Node& other) const {\n        return dist > other.dist;\n    }\n};\n\nint main() {\n    int N, M, P;\n    cin >> N >> M >> P;\n\n    vector<vector<Edge>> graph(N + 1);\n    for (int i = 0; i < M; i++) {\n        int s, t, d, v;\n        cin >> s >> t >> d >> v;\n        graph[s].push_back({t, d * 1.0 * v / d});\n        graph[t].push_back({s, d * 1.0 * v / d});\n    }\n\n    vector<long double> dp(N + 1, 0);\n    priority_queue<Node> pq;\n    pq.push({1, 0});\n\n    while (!pq.empty()) {\n        Node node = pq.top();\n        pq.pop();\n        if (node.dist != dp[node.id]) continue;\n        for (const Edge& edge : graph[node.id]) {\n            long double newDist = dp[node.id] + edge.w;\n            if (newDist < dp[edge.to]) {\n                dp[edge.to] = newDist;\n                pq.push({edge.to, newDist});\n            }\n        }\n    }\n\n    long double ans = 0;\n    for (int i = 1; i <= N; i++) {\n        long double dist = dp[i] * 1.0 * P / (P - dp[i]);\n        ans = max(ans, dist);\n    }\n\n    cout << fixed << setprecision(10) << ans << endl;\n\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}