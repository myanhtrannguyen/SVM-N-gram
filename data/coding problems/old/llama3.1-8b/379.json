{
    "solution_id": "llama3.1-8b-379",
    "problem_id": "p00587",
    "language": "Python",
    "solution": "```python\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef parse_tree(expression):\n    if expression == '':\n        return None\n    if expression[0] == '(' and expression[-1] == ')':\n        expression = expression[1:-1]\n    if ',' not in expression:\n        return Node(expression)\n    left, right = expression.split(',', 1)\n    return Node(expression), parse_tree(left), parse_tree(right)\n\ndef intersection(tree1, tree2):\n    if tree1 is None and tree2 is None:\n        return None\n    if tree1 is None:\n        return tree2\n    if tree2 is None:\n        return tree1\n    if tree1.value == tree2.value:\n        return Node(tree1.value), intersection(tree1.left, tree2.left), intersection(tree1.right, tree2.right)\n    return None\n\ndef union(tree1, tree2):\n    if tree1 is None and tree2 is None:\n        return None\n    if tree1 is None:\n        return tree2\n    if tree2 is None:\n        return tree1\n    return Node(tree1.value), intersection(tree1, tree2), intersection(tree1, tree2)\n\ndef print_tree(tree):\n    if tree is None:\n        return ''\n    if tree.left is None and tree.right is None:\n        return tree.value\n    return '(' + print_tree(tree.left) + ',' + print_tree(tree.right) + ')'\n\ndef main():\n    for line in open(0):\n        op, tree1, tree2 = line.strip().split()\n        tree1 = parse_tree(tree1)\n        tree2 = parse_tree(tree2)\n        if op == 'i':\n            result = intersection(tree1, tree2)\n        else:\n            result = union(tree1, tree2)\n        print(print_tree(result))\n\nif __name__ == '__main__':\n    main()\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}