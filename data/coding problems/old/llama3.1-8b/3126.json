{
    "solution_id": "llama3.1-8b-3126",
    "problem_id": "p01709",
    "language": "Java",
    "solution": "```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main {\n    static class DSU {\n        int[] parent, size;\n\n        public DSU(int n) {\n            parent = new int[n];\n            size = new int[n];\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n                size[i] = 1;\n            }\n        }\n\n        public int find(int x) {\n            if (parent[x] != x) {\n                parent[x] = find(parent[x]);\n            }\n            return parent[x];\n        }\n\n        public void union(int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX != rootY) {\n                if (size[rootX] > size[rootY]) {\n                    parent[rootY] = rootX;\n                    size[rootX] += size[rootY];\n                } else {\n                    parent[rootX] = rootY;\n                    size[rootY] += size[rootX];\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter pw = new PrintWriter(System.out);\n        int T = Integer.parseInt(br.readLine());\n        while (T-- > 0) {\n            int n = Integer.parseInt(br.readLine());\n            int[][] polygons = new int[n][];\n            for (int i = 0; i < n; i++) {\n                int m = Integer.parseInt(br.readLine());\n                String[] line = br.readLine().split(\" \");\n                int[] polygon = new int[m * 2];\n                for (int j = 0; j < m; j++) {\n                    polygon[j * 2] = Integer.parseInt(line[j * 2]);\n                    polygon[j * 2 + 1] = Integer.parseInt(line[j * 2 + 1]);\n                }\n                polygons[i] = polygon;\n            }\n            DSU dsu = new DSU(n);\n            for (int i = 0; i < n; i++) {\n                for (int j = i + 1; j < n; j++) {\n                    if (doIntersect(polygons[i], polygons[j])) {\n                        dsu.union(i, j);\n                    }\n                }\n            }\n            int ans = 0;\n            for (int i = 0; i < n; i++) {\n                int root = dsu.find(i);\n                ans = Math.max(ans, dsu.size[root]);\n            }\n            pw.println(ans);\n        }\n        pw.close();\n    }\n\n    public static boolean doIntersect(int[] p1, int[] p2) {\n        int[][] points1 = new int[p1.length / 2][2];\n        int[][] points2 = new int[p2.length / 2][2];\n        for (int i = 0; i < p1.length / 2; i++) {\n            points1[i][0] = p1[i * 2];\n            points1[i][1] = p1[i * 2 + 1];\n        }\n        for (int i = 0; i < p2.length / 2; i++) {\n            points2[i][0] = p2[i * 2];\n            points2[i][1] = p2[i * 2 + 1];\n        }\n        for (int i = 0; i < points1.length; i++) {\n            for (int j = i + 1; j < points1.length; j++) {\n                for (int k = 0; k < points2.length; k++) {\n                    for (int l = k + 1; l < points2.length; l++) {\n                        if (doIntersect(points1[i], points1[j], points2[k], points2[l])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean doIntersect(int[] p1, int[] p2, int[] p3, int[] p4) {\n        int x1 = p1[0], y1 = p1[1];\n        int x2 = p2[0], y2 = p2[1];\n        int x3 = p3[0], y3 = p3[1];\n        int x4 = p4[0], y4 = p4[1];\n        int d1 = (x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4);\n        int d2 = (x2 - x3) * (y3 - y4) - (y2 - y3) * (x3 - x4);\n        int d3 = (x1 - x3) * (y2 - y3) - (y1 - y3) * (x2 - x3);\n        int d4 = (x1 - x2) * (y2 - y3) - (y1 - y2) * (x2 - x3);\n        return (d1 * d2 < 0) && (d3 * d4 < 0);\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}