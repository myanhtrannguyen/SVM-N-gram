{
    "solution_id": "llama3.1-8b-2977",
    "problem_id": "p01647",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nstruct Card {\n    char suit;\n    char rank;\n};\n\nstruct Hand {\n    vector<Card> cards;\n    int rank[5];\n    int suit[5];\n};\n\nstruct HandRank {\n    int royalStraightFlush;\n    int straightFlush;\n    int fourOfAKind;\n    int fullHouse;\n    int flush;\n    int straight;\n    int threeOfAKind;\n    int twoPairs;\n    int onePair;\n    int highCard;\n};\n\nHandRank compareHands(Hand hand1, Hand hand2) {\n    HandRank rank1 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n    HandRank rank2 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\n    sort(hand1.cards.begin(), hand1.cards.end(), [](Card a, Card b) {\n        return a.rank > b.rank;\n    });\n\n    sort(hand2.cards.begin(), hand2.cards.end(), [](Card a, Card b) {\n        return a.rank > b.rank;\n    });\n\n    for (int i = 0; i < 5; i++) {\n        hand1.rank[i] = hand1.cards[i].rank;\n        hand1.suit[i] = hand1.cards[i].suit;\n        hand2.rank[i] = hand2.cards[i].rank;\n        hand2.suit[i] = hand2.cards[i].suit;\n    }\n\n    if (isRoyalStraightFlush(hand1)) rank1.royalStraightFlush = 1;\n    if (isRoyalStraightFlush(hand2)) rank2.royalStraightFlush = 1;\n\n    if (isStraightFlush(hand1)) rank1.straightFlush = 1;\n    if (isStraightFlush(hand2)) rank2.straightFlush = 1;\n\n    if (isFourOfAKind(hand1)) rank1.fourOfAKind = 1;\n    if (isFourOfAKind(hand2)) rank2.fourOfAKind = 1;\n\n    if (isFullHouse(hand1)) rank1.fullHouse = 1;\n    if (isFullHouse(hand2)) rank2.fullHouse = 1;\n\n    if (isFlush(hand1)) rank1.flush = 1;\n    if (isFlush(hand2)) rank2.flush = 1;\n\n    if (isStraight(hand1)) rank1.straight = 1;\n    if (isStraight(hand2)) rank2.straight = 1;\n\n    if (isThreeOfAKind(hand1)) rank1.threeOfAKind = 1;\n    if (isThreeOfAKind(hand2)) rank2.threeOfAKind = 1;\n\n    if (isTwoPairs(hand1)) rank1.twoPairs = 1;\n    if (isTwoPairs(hand2)) rank2.twoPairs = 1;\n\n    if (isOnePair(hand1)) rank1.onePair = 1;\n    if (isOnePair(hand2)) rank2.onePair = 1;\n\n    if (isHighCard(hand1)) rank1.highCard = 1;\n    if (isHighCard(hand2)) rank2.highCard = 1;\n\n    if (rank1.royalStraightFlush > rank2.royalStraightFlush) return rank1;\n    if (rank1.royalStraightFlush < rank2.royalStraightFlush) return rank2;\n\n    if (rank1.straightFlush > rank2.straightFlush) return rank1;\n    if (rank1.straightFlush < rank2.straightFlush) return rank2;\n\n    if (rank1.fourOfAKind > rank2.fourOfAKind) return rank1;\n    if (rank1.fourOfAKind < rank2.fourOfAKind) return rank2;\n\n    if (rank1.fullHouse > rank2.fullHouse) return rank1;\n    if (rank1.fullHouse < rank2.fullHouse) return rank2;\n\n    if (rank1.flush > rank2.flush) return rank1;\n    if (rank1.flush < rank2.flush) return rank2;\n\n    if (rank1.straight > rank2.straight) return rank1;\n    if (rank1.straight < rank2.straight) return rank2;\n\n    if (rank1.threeOfAKind > rank2.threeOfAKind) return rank1;\n    if (rank1.threeOfAKind < rank2.threeOfAKind) return rank2;\n\n    if (rank1.twoPairs > rank2.twoPairs) return rank1;\n    if (rank1.twoPairs < rank2.twoPairs) return rank2;\n\n    if (rank1.onePair > rank2.onePair) return rank1;\n    if (rank1.onePair < rank2.onePair) return rank2;\n\n    if (rank1.highCard > rank2.highCard) return rank1;\n    if (rank1.highCard < rank2.highCard) return rank2;\n\n    return rank1;\n}\n\nbool isRoyalStraightFlush(Hand hand) {\n    if (hand.cards[0].rank == 'A' && hand.cards[1].rank == 'K' && hand.cards[2].rank == 'Q' && hand.cards[3].rank == 'J' && hand.cards[4].rank == 'T') {\n        return true;\n    }\n    return false;\n}\n\nbool isStraightFlush(Hand hand) {\n    if (hand.cards[0].suit == hand.cards[1].suit && hand.cards[1].suit == hand.cards[2].suit && hand.cards[2].suit == hand.cards[3].suit && hand.cards[3].suit == hand.cards[4].suit) {\n        if (hand.cards[0].rank == hand.cards[1].rank - 1 && hand.cards[1].rank == hand.cards[2].rank - 1 && hand.cards[2].rank == hand.cards[3].rank - 1 && hand.cards[3].rank == hand.cards[4].rank - 1) {\n            return true;\n        }\n    }\n    return false;\n}\n\nbool isFourOfAKind(Hand hand) {\n    for (int i = 0; i < 13; i++) {\n        int count = 0;\n        for (int j = 0; j < 5; j++) {\n            if (hand.cards[j].rank == i + '2') count++;\n        }\n        if (count == 4) return true;\n    }\n    return false;\n}\n\nbool isFullHouse(Hand hand) {\n    for (int i = 0; i < 13; i++) {\n        int count1 = 0;\n        int count2 = 0;\n        for (int j = 0; j < 5; j++) {\n            if (hand.cards[j].rank == i + '2') count1++;\n            else if (hand.cards[j].rank == i + '2' + 1) count2++;\n        }\n        if (count1 == 3 && count2 == 2) return true;\n    }\n    return false;\n}\n\nbool isFlush(Hand hand) {\n    if (hand.cards[0].suit == hand.cards[1].suit && hand.cards[1].suit == hand.cards[2].suit && hand.cards[2].suit == hand.cards[3].suit && hand.cards[3].suit == hand.cards[4].suit) {\n        return true;\n    }\n    return false;\n}\n\nbool isStraight(Hand hand) {\n    if (hand.cards[0].rank == hand.cards[1].rank - 1 && hand.cards[1].rank == hand.cards[2].rank - 1 && hand.cards[2].rank == hand.cards[3].rank - 1 && hand.cards[3].rank == hand.cards[4].rank - 1) {\n        return true;\n    }\n    return false;\n}\n\nbool isThreeOfAKind(Hand hand) {\n    for (int i = 0; i < 13; i++) {\n        int count = 0;\n        for (int j = 0; j < 5; j++) {\n            if (hand.cards[j].rank == i + '2') count++;\n        }\n        if (count == 3) return true;\n    }\n    return false;\n}\n\nbool isTwoPairs(Hand hand) {\n    int count1 = 0;\n    int count2 = 0;\n    for (int i = 0; i < 13; i++) {\n        for (int j = 0; j < 5; j++) {\n            if (hand.cards[j].rank == i + '2') count1++;\n            else if (hand.cards[j].rank == i + '2' + 1) count2++;\n        }\n        if (count1 == 2 && count2 == 2) return true;\n        count1 = 0;\n        count2 = 0;\n    }\n    return false;\n}\n\nbool isOnePair(Hand hand) {\n    for (int i = 0; i < 13; i++) {\n        int count = 0;\n        for (int j = 0; j < 5; j++) {\n            if (hand.cards[j].rank == i + '2') count++;\n        }\n        if (count == 2) return true;\n    }\n    return false;\n}\n\nbool isHighCard(Hand hand) {\n    return true;\n}\n\ndouble calculateProbability(Hand hand1, Hand hand2, vector<Card> communityCards",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}