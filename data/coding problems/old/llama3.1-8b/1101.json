{
    "solution_id": "llama3.1-8b-1101",
    "problem_id": "p00812",
    "language": "C++",
    "solution": "```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <stack>\n#include <unordered_map>\n#include <unordered_set>\n#include <cctype>\n\nusing namespace std;\n\n// Function to parse the input expression\nunordered_map<char, int> parse(const string& expr) {\n    unordered_map<char, int> vars;\n    stack<char> stack;\n    for (char c : expr) {\n        if (c == ' ') continue;\n        if (c == '(') stack.push(c);\n        else if (c == ')') {\n            while (stack.top() != '(') {\n                char var = stack.top();\n                stack.pop();\n                int power = 0;\n                if (stack.size() > 0 && isdigit(stack.top())) {\n                    power = stack.top() - '0';\n                    stack.pop();\n                }\n                vars[var] += power;\n            }\n            stack.pop();\n        } else if (c == '+' || c == '-') {\n            while (stack.size() > 0 && stack.top() != '(') {\n                char var = stack.top();\n                stack.pop();\n                int power = 0;\n                if (stack.size() > 0 && isdigit(stack.top())) {\n                    power = stack.top() - '0';\n                    stack.pop();\n                }\n                vars[var] += power;\n            }\n            stack.push(c);\n        } else if (c == '^') {\n            if (stack.size() > 0 && isdigit(stack.top())) {\n                int power = stack.top() - '0';\n                stack.pop();\n                stack.push(power);\n            }\n            stack.push(c);\n        } else if (isalpha(c)) {\n            stack.push(c);\n        } else if (isdigit(c)) {\n            stack.push(c);\n        }\n    }\n    while (stack.size() > 0) {\n        char var = stack.top();\n        stack.pop();\n        int power = 0;\n        if (stack.size() > 0 && isdigit(stack.top())) {\n            power = stack.top() - '0';\n            stack.pop();\n        }\n        vars[var] += power;\n    }\n    return vars;\n}\n\n// Function to check if two expressions are equivalent\nbool check(const string& expr1, const string& expr2) {\n    unordered_map<char, int> vars1 = parse(expr1);\n    unordered_map<char, int> vars2 = parse(expr2);\n    if (vars1.size() != vars2.size()) return false;\n    for (const auto& pair : vars1) {\n        if (vars2.find(pair.first) == vars2.end() || vars2.at(pair.first) != pair.second) return false;\n    }\n    return true;\n}\n\nint main() {\n    string expr;\n    while (getline(cin, expr)) {\n        if (expr == \".\") {\n            cout << \".\" << endl;\n            continue;\n        }\n        string correct_expr;\n        getline(cin, correct_expr);\n        for (const auto& line : vector<string>(1, expr)) {\n            if (check(correct_expr, line)) cout << \"yes\" << endl;\n            else cout << \"no\" << endl;\n        }\n    }\n    return 0;\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}