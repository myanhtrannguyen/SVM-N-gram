{
    "solution_id": "llama3.1-8b-778",
    "problem_id": "p00731",
    "language": "Java",
    "solution": "```java\nimport java.util.*;\n\npublic class Main {\n    static class Pair implements Comparable<Pair> {\n        int x, y, time;\n\n        public Pair(int x, int y, int time) {\n            this.x = x;\n            this.y = y;\n            this.time = time;\n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            return Integer.compare(this.time, o.time);\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextInt()) {\n            int w = scanner.nextInt();\n            int h = scanner.nextInt();\n            char[][] cliff = new char[h][w];\n            for (int i = 0; i < h; i++) {\n                String s = scanner.next();\n                cliff[i] = s.toCharArray();\n            }\n\n            int[][][] dp = new int[h][w][2];\n            for (int[][] row : dp) {\n                for (int[] col : row) {\n                    Arrays.fill(col, -1);\n                }\n            }\n\n            Queue<Pair> queue = new LinkedList<>();\n            for (int i = 0; i < w; i++) {\n                if (cliff[0][i] == 'S') {\n                    queue.add(new Pair(0, i, 0));\n                    dp[0][i][0] = 0;\n                }\n            }\n\n            int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n            while (!queue.isEmpty()) {\n                Pair pair = queue.poll();\n                int x = pair.x;\n                int y = pair.y;\n                int time = pair.time;\n\n                for (int[] direction : directions) {\n                    int nx = x + direction[0];\n                    int ny = y + direction[1];\n\n                    if (nx >= 0 && nx < h && ny >= 0 && ny < w) {\n                        if (cliff[nx][ny] != 'X') {\n                            if (dp[nx][ny][0] == -1) {\n                                dp[nx][ny][0] = dp[x][y][0] + time + cliff[nx][ny] - '0';\n                                queue.add(new Pair(nx, ny, dp[nx][ny][0]));\n                            } else if (dp[nx][ny][0] > dp[x][y][0] + time + cliff[nx][ny] - '0') {\n                                dp[nx][ny][0] = dp[x][y][0] + time + cliff[nx][ny] - '0';\n                                queue.add(new Pair(nx, ny, dp[nx][ny][0]));\n                            }\n                        }\n\n                        if (nx >= 0 && nx < h && ny >= 0 && ny < w) {\n                            if (cliff[nx][ny] != 'X') {\n                                if (dp[nx][ny][1] == -1) {\n                                    dp[nx][ny][1] = dp[x][y][1] + time + cliff[nx][ny] - '0';\n                                    queue.add(new Pair(nx, ny, dp[nx][ny][1]));\n                                } else if (dp[nx][ny][1] > dp[x][y][1] + time + cliff[nx][ny] - '0') {\n                                    dp[nx][ny][1] = dp[x][y][1] + time + cliff[nx][ny] - '0';\n                                    queue.add(new Pair(nx, ny, dp[nx][ny][1]));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            int minTime = Integer.MAX_VALUE;\n            for (int i = 0; i < w; i++) {\n                if (cliff[h - 1][i] == 'T') {\n                    minTime = Math.min(minTime, Math.min(dp[h - 1][i][0], dp[h - 1][i][1]));\n                }\n            }\n\n            if (minTime == Integer.MAX_VALUE) {\n                System.out.println(-1);\n            } else {\n                System.out.println(minTime);\n            }\n        }\n    }\n}\n```",
    "model": "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
    "prompt": "You are a university student working on a programming assignment for a course. Your task is to provide the coding solution to a problem using the most appropriate programming language and practices for the given scenario. Your output should be only the code, without any explanations. Ensure the code is functional, correct for the specified language. Do not include any introductory text or output besides the code itself."
}